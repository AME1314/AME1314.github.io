<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>文章加密测试</title>
    <url>/2020/03/13/%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="这里是密码测试，密码为test." /><label>这里是密码测试，密码为test.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="5a34d6b1c774b84d296f5914e0f9dfccb19fd04e0d913e9b2048652c09ad4fd1"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>10.异常</title>
    <url>/2020/03/11/10-%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<div class="note info no-icon"><p>在本文中将解释有关断言和异常的知识</p></div>
<a id="more"></a>
<h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul>
<li>断言</li>
<li>NameError</li>
<li>TypeError</li>
<li>异常处理（try..except）</li>
<li>异常抛出（raise）</li>
<li>finally 子句</li>
</ul>
<h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><h5 id="1-断言"><a href="#1-断言" class="headerlink" title="1.断言"></a>1.断言</h5><p>Python assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况，语法格式为：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> expression</span><br></pre></td></tr></table></figure><br>例如我们的代码只能在windows系统下运行，可以先判断当前系统是否符合条件:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">assert</span> (<span class="string">'linux'</span> <span class="keyword">in</span> sys.platform), <span class="string">'错误'</span></span><br><span class="line">print(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure><br>会输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"F:/Python/10/eg 10-1.py"</span>, line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">assert</span> (<span class="string">'linux'</span> <span class="keyword">in</span> sys.platform), <span class="string">'错误'</span></span><br><span class="line">AssertionError: 错误</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">1</span></span><br></pre></td></tr></table></figure><br>当我们将<code>linux</code>更改为<code>win32</code>就会输出<code>hello</code></p>
<h5 id="2-错误和异常"><a href="#2-错误和异常" class="headerlink" title="2.错误和异常"></a>2.错误和异常</h5><p>在程序执行过程中发生的任何错误都是异常。每个异常显示一些相关的错误信息，比如我们在 Python3 中使用 Python2 独有的语法就会发生<code>SyntaxError</code>：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><br>输出为：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">  File <span class="string">"F:/Python/10/eg 10-1.py"</span>, line <span class="number">11</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello'</span></span><br><span class="line">          ^</span><br><span class="line">SyntaxError: Missing parentheses in call to 'print'. Did you mean print('hello')?</span><br></pre></td></tr></table></figure><br>而如果我们多打了一个空格：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure><br>就会出现<code>IndentationError</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  File <span class="string">"F:/Python/10/eg 10-1.py"</span>, line <span class="number">12</span></span><br><span class="line">    print(<span class="string">'hello'</span>)</span><br><span class="line">    ^</span><br><span class="line">IndentationError: unexpected indent</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">1</span></span><br></pre></td></tr></table></figure><br>接下来将介绍几种常见的异常：<br><strong>2.1 <code>NameError</code></strong><br>当访问一个未定义的变量则会发生 <code>NameError</code>，例如：<code>print(a)</code>会输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"F:/Python/10/eg 10-1.py"</span>, line <span class="number">15</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(a)</span><br><span class="line">NameError: name <span class="string">'a'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p>
<p><strong>2.2 <code>ZeroDivisionError</code></strong><br>当把<code>0</code>作为除数则会发生 <code>ZeroDivisionError</code>，例如：<code>print(1/0)</code>会输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"F:/Python/10/eg 10-1.py"</span>, line <span class="number">18</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p>
<p><strong>2.3 <code>TyprError</code></strong><br>当操作或函数应用于不适当类型的对象时引发<code>TyprError</code>,较为常见的是字符串与整数加法，例如：<code>print(&#39;1&#39;+1)</code>会输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"F:/Python/10/eg 10-1.py"</span>, line <span class="number">21</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="string">'1'</span>+<span class="number">1</span>)</span><br><span class="line">TypeError: can only concatenate str (<span class="keyword">not</span> <span class="string">"int"</span>) to str</span><br></pre></td></tr></table></figure></p>
<div class="note warning"><p>标准异常：<a href="https://www.runoob.com/python/python-exceptions.html" target="_blank" rel="noopener">https://www.runoob.com/python/python-exceptions.html</a></p></div>
<h5 id="3-异常处理"><a href="#3-异常处理" class="headerlink" title="3.异常处理"></a>3.异常处理</h5><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200311-1583941636023" alt="异常处理"></p>
<p>我将通过一个例子来解释上图的流程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> a != <span class="number">-1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = int(input(<span class="string">"输入一个数字:"</span>))</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        print(<span class="string">"输入类型有误"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="number">1</span> + a)</span><br><span class="line">        print(<span class="string">"输入类型无误"</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">"结束"</span>)</span><br><span class="line">print(<span class="string">"循环结束"</span>)</span><br></pre></td></tr></table></figure>
<p>我们分别输入<code>1</code>和<code>a</code>,最后输入<code>-1</code>结束，输出如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输入一个数字:<span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">输入类型无误</span><br><span class="line">结束</span><br><span class="line">输入一个数字:a</span><br><span class="line">输入类型有误</span><br><span class="line">结束</span><br><span class="line">输入一个数字:<span class="number">-1</span></span><br><span class="line">结束</span><br><span class="line">循环结束</span><br></pre></td></tr></table></figure><br>这个过程是这样的：</p>
<ul>
<li>如果我们输入一个数字<code>-1</code>，程序停止循环，程序等价为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> a != <span class="number">-1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = int(input(<span class="string">"输入一个数字:"</span>))</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">"结束"</span>)</span><br><span class="line">print(<span class="string">"循环结束"</span>)</span><br></pre></td></tr></table></figure>
<div class="note primary no-icon"><p>注意：<code>finally</code>只要执行了<code>try</code>不管有没有异常都会执行。在真实场景的应用程序中，<code>finally</code> 子句用于释放外部资源（文件或网络连接之类的），无论它们的使用过程中是否出错。</p></div>
<ul>
<li>如果我们输入一个字母<code>‘a’</code>，程序异常，程序等价为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> a != <span class="number">-1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = int(input(<span class="string">"输入一个数字:"</span>))</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        print(<span class="string">"输入类型有误"</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">"结束"</span>)</span><br><span class="line">print(<span class="string">"循环结束"</span>)</span><br></pre></td></tr></table></figure>
<p>即程序在<code>try</code>中的语句中出现了异常，会在<code>except</code>中匹配对应的异常类型，如果未匹配则会终止程序，如果匹配上对应的异常类型会执行对应<code>except</code>下的语句，如果语句中有<code>fially</code>，在执行完<code>except</code>中的语句会执行<code>fianlly</code>中的语句。</p>
<ul>
<li>如果我们输入一个整数<code>1</code>，程序无异常，程序等价为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> a != <span class="number">-1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = int(input(<span class="string">"输入一个数字:"</span>))</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="number">1</span> + a)</span><br><span class="line">        print(<span class="string">"输入类型无误"</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">"结束"</span>)</span><br><span class="line">print(<span class="string">"循环结束"</span>)</span><br></pre></td></tr></table></figure>
<p>即程序通过<code>try</code>语句检测之后没有异常，如果是<code>try-except</code>格式，在没有异常的情况下会直接跳出<code>try-except</code>程序块，继续向下执行；如果是<code>try-except-else</code>格式，在没有异常的情况下会进入<code>else</code>语句中的代码；如果是<code>try-except-else-finally</code>格式，在执行完<code>else</code>语句会执行<code>finally</code>语句中的内容。</p>
<h5 id="4-抛出异常"><a href="#4-抛出异常" class="headerlink" title="4.抛出异常"></a>4.抛出异常</h5><p>使用raise语句主动抛出异常的意思是开发者可以自己制造程序异常，这里的程序异常不是指发生了内存溢出、列表越界访问等系统异常，而是指程序在执行过程中，发生了用户输入的数据与要求数据不符、用户操作错误等问题，这些问题都需要程序进行处理并给出相应的提示。处理这些问题多使用判断语句，在判断语句体内进行相应的问题处理，如果处理问题的语句过多，就会导致代码复杂化，代码结构不够清晰。在这种情况下，可以使用raise语句主动抛出异常，由异常处理语句块进行处理。例如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">"请输入登录账号："</span>)</span><br><span class="line">    username = input(<span class="string">"&gt;&gt;:"</span>)</span><br><span class="line">    <span class="keyword">if</span> username != <span class="string">"zhe"</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"用户名输入错误"</span>)</span><br><span class="line">    print(<span class="string">"请输入密码："</span>)</span><br><span class="line">    psw = input(<span class="string">"&gt;&gt;:"</span>)</span><br><span class="line">    <span class="keyword">if</span> psw != <span class="string">"123456"</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"密码输入错误"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure><br>在上述代码中，当我们输入用户名不是<code>zhe</code>时会主动抛出异常<code>用户名输入错误</code>而此时<code>except</code>语句会捕获异常并输出，而如果我们用户名无误，程序会继续向下进行，在密码输入处如果错误会抛出<code>密码输入错误</code>异常，由<code>except</code>捕获之后输出，如果一直无误，程序执行完之后跳出<code>try-except</code>语句。执行下一程序块。</p>
<h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-玩转函数"><a href="#1-玩转函数" class="headerlink" title="1.玩转函数"></a>1.玩转函数</h5><div class="note info no-icon"><p>本次挑战中我们将实现一个程序，将分钟转为小时和分钟。在 MinutesToHours.py 文件中实现一个函数 <code>Hours()</code>，将用户输入的 <code>分钟数</code> 转化为 <code>小时数和分钟数</code>，并要求小时数尽量大。将结果以 <code>XX H, XX M</code> 的形式打印出来。</p></div>
<p>输入：<br><div class="note default no-icon"><p>80</p></div></p>
<p>输出：<br><div class="note default no-icon"><p>1 H,20 M</p></div></p>
<div class="note danger no-icon"><p><strong>注意：</strong></p>
<ul>
<li>代码中不要使用 <code>input()</code> 函数。</li>
<li>如果用户输入的是一个负值，程序需要<code>raise</code> 来抛出<code>ValueError</code> 异常。</li>
<li><code>Hours()</code>函数调用的时候，需要使用 <code>try...except</code> 处理异常。获取异常后，在屏幕上打印出<code>Parameter Error</code> 提示用户输入的值有误。</li>
</ul></div>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hours</span><span class="params">(minute)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> minute &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"负值"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"&#123;&#125; H,&#123;&#125; M"</span>.format(int(minute / <span class="number">60</span>), minute % <span class="number">60</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    Hours(int(sys.argv[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"Parameter Error"</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>控制台的输出为：</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">(venv) F:\Python\<span class="number">10</span>&gt;python hour.py <span class="number">70</span></span><br><span class="line"><span class="number">1</span> H,<span class="number">10</span> M</span><br></pre></td></tr></table></figure>
<div class="note primary"><p>有关<code>sys.argv[]</code>的解释</p></div>
<div class="note primary no-icon"><p>在<code>sys.argv[value]</code>中对于输入的内容实际上保存为了一个列表，列表的第一个元素即为脚本，例如我们写一个输出脚本<code>print_f.py</code>，脚本中的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">a = sys.argv[<span class="number">0</span>]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<p>我们通过控制台在根目录运行，输入：<code>python print_f</code>，敲击回车，会输出<code>print_f</code><br>此时我们更改一下脚本中的代码为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">a = sys.argv[<span class="number">1</span>]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<p>我们再通过控制台在根目录输入：<code>python print_f hello</code>敲击回车会输出<code>hello</code><br>我们再更改一次代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">a = sys.argv[<span class="number">2</span>:]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<p>在控制台中输入：<code>python print_f a b c d e</code>敲击回车输出的为：<code>[&#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</code>。<br>通过上面的例子我们容易理解<code>sys.argv</code>的用法。</p></div>
<h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><p>无</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>9.文件处理</title>
    <url>/2020/03/10/9-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<div class="note info no-icon"><p>在本文中将提供Python中的文件操作</p></div>
<a id="more"></a>
<h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul>
<li>文件打开与关闭</li>
<li>文件读取与写入</li>
</ul>
<h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><h5 id="1-打印到屏幕"><a href="#1-打印到屏幕" class="headerlink" title="1.打印到屏幕"></a>1.打印到屏幕</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Python 是一个非常棒的语言，不是吗？"</span>)</span><br></pre></td></tr></table></figure>
<p>输出为：<code>Python 是一个非常棒的语言，不是吗？</code></p>
<h5 id="2-读取键盘输入"><a href="#2-读取键盘输入" class="headerlink" title="2.读取键盘输入"></a>2.读取键盘输入</h5><ul>
<li><strong><code>raw_input</code>:</strong>raw_input([prompt]) 函数从标准输入读取一个行，并返回一个字符串（去掉结尾的换行符）,例如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = raw_input(<span class="string">"请输入："</span>)</span><br><span class="line">print(<span class="string">"你输入的内容是: "</span>, str)</span><br></pre></td></tr></table></figure>
<p>输出为：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请输入：Hello Python！</span><br><span class="line">你输入的内容是:  Hello Python！</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong><code>input()</code>:</strong>input([prompt]) 函数和 raw_input([prompt]) 函数基本类似，但是 input 可以接收一个Python表达式作为输入，并将运算结果返回。例如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = input(<span class="string">"请输入："</span>)</span><br><span class="line">print(<span class="string">"你输入的内容是: "</span>, str)</span><br></pre></td></tr></table></figure>
<p>这会产生如下的对应着输入的结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请输入：[x*<span class="number">5</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">10</span>,<span class="number">2</span>)]</span><br><span class="line">你输入的内容是:  [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br></pre></td></tr></table></figure></p>
<h5 id="3-文件操作"><a href="#3-文件操作" class="headerlink" title="3.文件操作"></a>3.文件操作</h5><p><strong>3.1 <code>open()</code>打开文件</strong><br>用Python内置的open()函数打开一个文件，创建一个file对象，相关的方法才可以调用它进行读写。语法如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file object = open(file_name [, access_mode][, buffering])</span><br></pre></td></tr></table></figure><br>各个参数详解：</p>
<ul>
<li>file_name：file_name变量是一个包含了你要访问的文件名称的字符串值。</li>
<li>access_mode：access_mode决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</li>
<li>buffering:如果buffering的值被设为0，就不会有寄存。如果buffering的值取1，访问文件时会寄存行。如果将buffering的值设为大于1的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。</li>
</ul>
<p>不同模式下打开文件的列表如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">模式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">t</td>
<td style="text-align:left">文本模式 (默认)。</td>
</tr>
<tr>
<td style="text-align:left">x</td>
<td style="text-align:left">写模式，新建一个文件，如果该文件已存在则会报错。</td>
</tr>
<tr>
<td style="text-align:left">b</td>
<td style="text-align:left">二进制模式。</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">打开一个文件进行更新(可读可写)。</td>
</tr>
<tr>
<td style="text-align:left">U</td>
<td style="text-align:left">通用换行模式（不推荐）。</td>
</tr>
<tr>
<td style="text-align:left">r</td>
<td style="text-align:left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td style="text-align:left">rb</td>
<td style="text-align:left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td style="text-align:left">r+</td>
<td style="text-align:left">打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td style="text-align:left">rb+</td>
<td style="text-align:left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td style="text-align:left">w</td>
<td style="text-align:left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td style="text-align:left">wb</td>
<td style="text-align:left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td style="text-align:left">w+</td>
<td style="text-align:left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td style="text-align:left">wb+</td>
<td style="text-align:left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td style="text-align:left">a</td>
<td style="text-align:left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td style="text-align:left">ab</td>
<td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td style="text-align:left">a+</td>
<td style="text-align:left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr>
<td style="text-align:left">ab+</td>
<td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody>
</table>
</div>
<p>对于不同模式的可用操作如下表所示：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">r</th>
<th style="text-align:center">r+</th>
<th style="text-align:center">w</th>
<th style="text-align:center">w+</th>
<th style="text-align:center">a</th>
<th style="text-align:center">a+</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">读</td>
<td style="text-align:center">+</td>
<td style="text-align:center">+</td>
<td style="text-align:center"></td>
<td style="text-align:center">+</td>
<td style="text-align:center"></td>
<td style="text-align:center">+</td>
</tr>
<tr>
<td style="text-align:center">写</td>
<td style="text-align:center"></td>
<td style="text-align:center">+</td>
<td style="text-align:center">+</td>
<td style="text-align:center">+</td>
<td style="text-align:center">+</td>
<td style="text-align:center">+</td>
</tr>
<tr>
<td style="text-align:center">创建</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">+</td>
<td style="text-align:center">+</td>
<td style="text-align:center">+</td>
<td style="text-align:center">+</td>
</tr>
<tr>
<td style="text-align:center">覆盖</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">+</td>
<td style="text-align:center">+</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">指针在开始</td>
<td style="text-align:center">+</td>
<td style="text-align:center">+</td>
<td style="text-align:center">+</td>
<td style="text-align:center">+</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">指针在结尾</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">+</td>
<td style="text-align:center">+</td>
</tr>
</tbody>
</table>
</div>
<p><strong>3.2 <code>close()</code>关闭文件</strong><br><code>File</code>对象的 <code>close（）</code>方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。当一个文件对象的引用被重新指定给另一个文件时，Python 会关闭之前的文件。用 <code>close（）</code>方法关闭文件是一个很好的习惯。基本语法：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fileObject.close()</span><br></pre></td></tr></table></figure><br>例如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件</span></span><br><span class="line">fo = open(<span class="string">"foo.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">print(<span class="string">"文件名: "</span>, fo.name)</span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><br>输出：<code>文件名:  foo.txt</code></p>
<hr>
<p><strong>拓展：File对象的属性</strong><br>一个文件被打开后，你有一个file对象，你可以得到有关该文件的各种信息。以下是和file对象相关的所有属性的列表：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">file.closed</td>
<td style="text-align:left">返回true如果文件已被关闭，否则返回false。</td>
</tr>
<tr>
<td style="text-align:left">file.mode</td>
<td style="text-align:left">返回被打开文件的访问模式。</td>
</tr>
<tr>
<td style="text-align:left">file.name</td>
<td style="text-align:left">返回文件的名称。</td>
</tr>
</tbody>
</table>
</div>
<p>例如,首先在根目录下创建文件<code>sample.txt</code>,然后执行程序：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fo = open(<span class="string">"sample.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">print(<span class="string">"文件名: "</span>, fo.name)</span><br><span class="line">print(<span class="string">"是否已关闭 : "</span>, fo.closed)</span><br><span class="line">print(<span class="string">"访问模式 : "</span>, fo.mode)</span><br></pre></td></tr></table></figure><br>输出为：</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件名:  sample.txt</span><br><span class="line">是否已关闭 :  <span class="literal">False</span></span><br><span class="line">访问模式 :  w</span><br></pre></td></tr></table></figure></h2><p><strong>3.3 <code>write()</code>写入文件</strong><br><code>write()</code>方法可将任何字符串写入一个打开的文件。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。<code>write()</code>方法不会在字符串的结尾添加换行符<code>(&#39;\n&#39;)</code>,基本语法为：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fileObject.write(string)</span><br></pre></td></tr></table></figure><br>在这里，被传递的参数是要写入到已打开文件的内容。例如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件</span></span><br><span class="line"><span class="comment"># write</span></span><br><span class="line">fo = open(<span class="string">"sample.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">fo.write(<span class="string">"hello world!\nVery good!\n"</span>)</span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><br>上述方法会创建sample.txt文件，并将收到的内容写入该文件，并最终关闭文件。如果你打开这个文件，将看到以下内容:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello world!</span><br><span class="line">Very good!</span><br></pre></td></tr></table></figure></p>
<p><strong>3.4 <code>read()</code>和<code>readline()</code>读取文件</strong><br><code>read（）</code>方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。基础语法为：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fileObject.read([count])</span><br></pre></td></tr></table></figure><br>在这里，被传递的参数是要从已打开文件中读取的字节计数。该方法从文件的开头开始读入，如果没有传入count，它会尝试尽可能多地读取更多的内容，很可能是直到文件的末尾。例如（我们继续使用上一条中创建的<code>sample.txt</code>)：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fo = open(<span class="string">"sample.txt"</span>, <span class="string">"r+"</span>)</span><br><span class="line">str = fo.read(<span class="number">10</span>)</span><br><span class="line">print(<span class="string">"读取的字符串是 : "</span>, str)</span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><br>输出为：<code>读取的字符串是 :  hello worl</code></p>
<p>而<code>readline()</code>函数是读一行：<br>例如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fo = open(<span class="string">"sample.txt"</span>, <span class="string">"r+"</span>)</span><br><span class="line">str_2 = fo.readline()</span><br><span class="line">print(str_2)</span><br></pre></td></tr></table></figure><br>输出为：<code>hello world!</code><br>也可通过遍历：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fo = open(<span class="string">"sample.txt"</span>, <span class="string">"r+"</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> fo:</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><br>来输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">Very good!</span><br></pre></td></tr></table></figure></p>
<p><strong>3.5 文件定位<code>tell()</code>，位置改变<code>seek()</code></strong><br><code>tell()</code>方法告诉你文件内的当前位置, 换句话说，下一次的读写会发生在文件开头这么多字节之后。<code>seek（offset [,from]）</code>方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tell()、seek()</span></span><br><span class="line">fo = open(<span class="string">"tell.txt"</span>, <span class="string">'w'</span>)  <span class="comment"># 创建文件tell.txt</span></span><br><span class="line">fo.write(<span class="string">"vxiaozhe1998"</span>)  <span class="comment"># 在文件tell.txt中写入vxiaozhe1998</span></span><br><span class="line">print(<span class="string">"当前位置："</span>,fo.tell())  <span class="comment"># 输出当前位置</span></span><br><span class="line">fo = open(<span class="string">"tell.txt"</span>, <span class="string">"rb+"</span>)</span><br><span class="line"><span class="comment"># fo.tell()  # 将指针移动至当前位置</span></span><br><span class="line">fo.seek(<span class="number">5</span>, <span class="number">0</span>)  <span class="comment"># 将指针以文件开头为参考位置向后移动5</span></span><br><span class="line">str_1 = fo.read(<span class="number">3</span>)</span><br><span class="line">print(<span class="string">"str_1="</span>, str_1)</span><br><span class="line">fo.seek(<span class="number">-2</span>, <span class="number">1</span>)  <span class="comment"># 以当前位置为参考向前移动2</span></span><br><span class="line">str_2 = fo.read(<span class="number">3</span>)</span><br><span class="line">print(<span class="string">"str_2="</span>, str_2)</span><br><span class="line">fo.seek(<span class="number">-5</span>, <span class="number">2</span>)  <span class="comment"># 以末尾为参考位置向前移动5</span></span><br><span class="line">str_3 = fo.read(<span class="number">3</span>)</span><br><span class="line">print(<span class="string">"str_3="</span>, str_3)</span><br></pre></td></tr></table></figure>
<p>输出为：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当前位置： <span class="number">12</span></span><br><span class="line">str_1= <span class="string">b'zhe'</span></span><br><span class="line">str_2= <span class="string">b'he1'</span></span><br><span class="line">str_3= <span class="string">b'e19'</span></span><br></pre></td></tr></table></figure><br>具体指针操作流程如下：<br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200310-1583841249481" alt="seek"><br>如果from被设为0，这意味着将文件的开头作为移动字节的参考位置。如果设为1，则使用当前的位置作为参考位置。如果它被设为2，那么该文件的末尾将作为参考位置。</p>
<p><strong>3.6 重命名和删除文件</strong><br>Python的os模块提供了帮你执行文件处理操作的方法，比如重命名和删除文件。要使用这个模块，你必须先导入它，然后才可以调用相关的各种功能。</p>
<ul>
<li><code>rename()</code>方法：</li>
</ul>
<p>语法：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.rename(current_file_name, new_file_name)</span><br><span class="line">os.rename(当前文件名，新文件名)</span><br></pre></td></tr></table></figure><br>例如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 创建文件first.txt</span></span><br><span class="line">fo = open(<span class="string">"first.txt"</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># 在txt文件中添加内容first</span></span><br><span class="line">fo.write(<span class="string">"first"</span>)</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br><span class="line"><span class="comment"># 更改文件名为second.txt</span></span><br><span class="line">os.rename(<span class="string">"first.txt"</span>, <span class="string">"second.txt"</span>)</span><br></pre></td></tr></table></figure><br>此时在根目录中能够看到一个新文件<code>second.txt</code>,文件中内容为<code>first</code></p>
<ul>
<li><code>remove()</code>方法</li>
</ul>
<p>语法：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.remove(file_name)</span><br><span class="line">os.remove(文件名)</span><br></pre></td></tr></table></figure><br>在<code>rename()</code>代码的基础上我们运行：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 检测文件是否存在</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    fo=open(<span class="string">"second.txt"</span>)</span><br><span class="line">    print(<span class="string">"文件已打开"</span>)</span><br><span class="line">    fo.close()</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"文件不存在"</span>)</span><br><span class="line"><span class="comment"># 移除文件second()</span></span><br><span class="line">os.remove(<span class="string">"second.txt"</span>)</span><br><span class="line"><span class="comment"># 检测文件是否还存在</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    fo = open(<span class="string">"second.txt"</span>)</span><br><span class="line">    print(<span class="string">"文件已打开"</span>)</span><br><span class="line">    fo.close()</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"文件不存在"</span>)</span><br></pre></td></tr></table></figure><br>输出为：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">文件已打开</span><br><span class="line">文件不存在</span><br></pre></td></tr></table></figure></p>
<p><strong>3.8 Python中的目录</strong></p>
<ul>
<li><code>mkdir()</code></li>
</ul>
<p>可以使用os模块的mkdir()方法在当前目录下创建新的目录们。你需要提供一个包含了要创建的目录名称的参数。语法：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.mkdir(<span class="string">"newdir"</span>)</span><br></pre></td></tr></table></figure></p>
<p>例如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.mkdir(<span class="string">"newdir"</span>)  <span class="comment"># 创建新目录</span></span><br></pre></td></tr></table></figure><br>执行代码后将会在脚本位置处生成一个名称为<code>newdir</code>的文件夹。</p>
<ul>
<li><code>chdir()</code></li>
</ul>
<p>可以用chdir()方法来改变当前的目录。chdir()方法需要的一个参数是你想设成当前目录的目录名称。语法：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.chdir(<span class="string">"newdir"</span>)</span><br></pre></td></tr></table></figure><br>例如我们在上文中的<code>newdir</code>文件夹中新建一个<code>newdirs</code>目录，在<code>newdirs</code>目录中新建文本文档<code>index.txt</code>，执行下面代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    fo =open(<span class="string">"index.txt"</span>)</span><br><span class="line">    print(fo.read())</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"访问失败"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.chdir(<span class="string">"newdir/newdirs"</span>)</span><br><span class="line">    fo = open(<span class="string">"index.txt"</span>)</span><br><span class="line">    print(fo.read())</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"访问失败"</span>)</span><br></pre></td></tr></table></figure>
<p>输出为：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">访问失败</span><br><span class="line">this <span class="keyword">is</span> index.txt</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>getcwd()</code></li>
</ul>
<p>getcwd()方法显示当前的工作目录。语法：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure><br>例如执行下述代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(os.getcwd())</span><br></pre></td></tr></table></figure><br>我们会得到<code>F:\Python\9</code>即为当前脚本所在路径</p>
<ul>
<li><code>rmdir()</code></li>
</ul>
<p>rmdir()方法删除目录，目录名称以参数传递。在删除这个目录之前，它的所有内容应该先被清除。语法：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.rmdir(<span class="string">'dirname'</span>)</span><br></pre></td></tr></table></figure><br>例如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.mkdir(<span class="string">"测试rmdir"</span>)</span><br><span class="line">    os.chdir(<span class="string">"测试rmdir"</span>)</span><br><span class="line">    print(<span class="string">"访问到rmdir目录"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"rmdir目录不存在"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.rmdir(<span class="string">"测试rmdir"</span>)</span><br><span class="line">    os.chdir(<span class="string">"测试rmdir"</span>)</span><br><span class="line">    print(<span class="string">"访问到rmdir目录"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"rmdir目录不存在"</span>)</span><br></pre></td></tr></table></figure><br>输出为：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">访问到rmdir目录</span><br><span class="line">rmdir目录不存在</span><br></pre></td></tr></table></figure></p>
<p><strong>更多资料</strong></p>
<hr>
<p><a href="https://www.runoob.com/python/os-file-methods.html" target="_blank" rel="noopener">Python OS 文件/目录方法</a><br><a href="https://www.runoob.com/python/file-methods.html" target="_blank" rel="noopener">Python File(文件) 方法</a></p>
<hr>
<p><strong>3.9 <code>with()</code>语句</strong><br>在实际情况中，我们应该尝试使用 with 语句处理文件对象，它会在文件用完后会自动关闭，就算发生异常也没关系。它是 try-finally 块的简写，例如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"sample.txt"</span>) <span class="keyword">as</span> fo:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">        print(line, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><br>输出为：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello world!</span><br><span class="line">Very good!</span><br><span class="line">das45			<span class="number">646</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><br>(sample.txt)中的内容</p>
<h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-拷贝文件"><a href="#1-拷贝文件" class="headerlink" title="1.拷贝文件"></a>1.拷贝文件</h5><p>我们拷贝给定的文本文件到另一个给定的文本文件。</p>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import os</span></span><br><span class="line">fo = open(<span class="string">'a.txt'</span>, <span class="string">"w"</span>)  <span class="comment"># 创建新文件a.txt</span></span><br><span class="line">fo.write(<span class="string">"hello2"</span>)  <span class="comment"># 在a.txt中写入hello</span></span><br><span class="line">fo = open(<span class="string">'a.txt'</span>, <span class="string">'r'</span>)  <span class="comment"># 打开a.txt用于读</span></span><br><span class="line">fq = open(<span class="string">'b.txt'</span>, <span class="string">'a'</span>)  <span class="comment"># 创建b.txt用于写入</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    fq.write(line)  <span class="comment"># 将a.txt内容追加至b.txt</span></span><br><span class="line">fo.close()</span><br><span class="line">fq.close()</span><br></pre></td></tr></table></figure>
<p>通过这段代码，在根目录将生成两个文件，文件名分别为<code>a.txt</code>,<code>b.txt</code>。且两个文件中内容完全相同。</p>
<h5 id="2-文本文件相关信息统计"><a href="#2-文本文件相关信息统计" class="headerlink" title="2.文本文件相关信息统计"></a>2.文本文件相关信息统计</h5><p>编写一个程序，对任意给定文本文件中的制表符、行、空格进行计数。</p>
<ul>
<li>代码(该脚本名称<code>file.py</code>)：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_file</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分析给定文本文件，返回其空格、制表符、行的相关信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :arg path: 要分析的文本文件的路径</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :return: 包含空格数、制表符数、行数的元组</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    fd = open(path)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    spaces = <span class="number">0</span></span><br><span class="line">    tabs = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, line <span class="keyword">in</span> enumerate(fd):</span><br><span class="line">        spaces += line.count(<span class="string">' '</span>)</span><br><span class="line">        tabs += line.count(<span class="string">'\t'</span>)</span><br><span class="line">    <span class="comment"># 现在关闭打开的文件</span></span><br><span class="line">    fd.close()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 以元组形式返回结果</span></span><br><span class="line">    <span class="keyword">return</span> spaces, tabs, i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    函数用于打印文件分析结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :arg path: 要分析的文本文件的路径</span></span><br><span class="line"><span class="string">    :return: 若文件存在则为 True，否则 False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">        spaces, tabs, lines = parse_file(path)</span><br><span class="line">        print(<span class="string">"Spaces &#123;&#125;. tabs &#123;&#125;. lines &#123;&#125;"</span>.format(spaces, tabs, lines))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">        main(sys.argv[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sys.exit(<span class="number">-1</span>)</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>使用：</strong></p>
<ul>
<li>我们在项目根目录创建<code>sample.txt</code>:<br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200310-1583812560805" alt="图片描述"></li>
<li>输入快捷键<code>Win+R</code>并输入<code>cmd</code><br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200310-1583812675951" alt="图片描述"></li>
<li>切换到项目根目录<br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200310-1583812722350" alt="图片描述"></li>
<li>输入<code>python file.py sample.txt</code>后敲击<code>enter</code>即可运行<br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200310-1583812893861" alt="图片描述"></li>
</ul>
</blockquote>
<ul>
<li><strong>拓展：</strong>在Pycharm中输入文件名输出文件信息统计</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_file</span><span class="params">(file)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分析给定文本文件，返回其空格、制表符、行的相关信息</span></span><br><span class="line"><span class="string">    :arg path: 要分析的文本文件的路径</span></span><br><span class="line"><span class="string">    :return: 包含空格数、制表符数、行数的元组</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    spaces = <span class="number">0</span></span><br><span class="line">    tabs = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, line <span class="keyword">in</span> enumerate(file):</span><br><span class="line">        spaces += line.count(<span class="string">' '</span>)</span><br><span class="line">        tabs += line.count(<span class="string">'\t'</span>)</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 以元组形式返回结果</span></span><br><span class="line">    <span class="keyword">return</span> spaces, tabs, i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(file)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    函数用于打印文件分析结果</span></span><br><span class="line"><span class="string">    :arg path: 要分析的文本文件的路径</span></span><br><span class="line"><span class="string">    :return: 若文件存在则为 True，否则 False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> file:</span><br><span class="line">        spaces, tabs, lines = parse_file(file)</span><br><span class="line">        print(<span class="string">"Spaces &#123;&#125;. tabs &#123;&#125;. lines &#123;&#125;"</span>.format(spaces, tabs, lines))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    str = input(<span class="string">"请输入文件名（包括扩展名）："</span>)</span><br><span class="line">    file = open(str)</span><br><span class="line">    <span class="comment"># print(file)</span></span><br><span class="line">    <span class="comment"># str_r = file.read()</span></span><br><span class="line">    main(file)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请输入文件名（包括扩展名）：sample.txt</span><br><span class="line">Spaces <span class="number">2.</span> tabs <span class="number">3.</span> lines <span class="number">4</span></span><br></pre></td></tr></table></figure>
<h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><h5 id="1-提取文件中的字符串"><a href="#1-提取文件中的字符串" class="headerlink" title="1.提取文件中的字符串"></a>1.提取文件中的字符串</h5><div class="note info no-icon"><p>我们需要实现一个程序用来提取文件中的字符串中的数字，然后打印输出。</p></div>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = input(<span class="string">"请输入文件名（包括扩展名）："</span>)</span><br><span class="line"><span class="keyword">with</span> open(str) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.read()</span><br><span class="line">res = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> char.isdigit():</span><br><span class="line">        res += char</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请输入文件名（包括扩展名）：sample.txt</span><br><span class="line"><span class="number">456461</span></span><br></pre></td></tr></table></figure>
<p>注：sample.txt的内容为<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello world!</span><br><span class="line">Very good!</span><br><span class="line">das45			<span class="number">646</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>8.函数</title>
    <url>/2020/03/08/8-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<div class="note info no-icon"><p>本文中将讲解Python中函数的知识</p></div>
<a id="more"></a>
<h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul>
<li>函数的定义</li>
<li>局部/全局变量的概念</li>
<li>默认参数，关键字参数及强制关键字参数</li>
<li>文档字符串的使用</li>
<li>高阶函数，map() 函数</li>
</ul>
<h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。函数能提高应用的模块性，和代码的重复利用率。我们已经知道Python提供了许多内建函数，比如print()。但我们也可以自己创建函数，这被叫做用户自定义函数。</p>
<h5 id="1-定义一个函数"><a href="#1-定义一个函数" class="headerlink" title="1.定义一个函数"></a>1.定义一个函数</h5><ul>
<li>流程：<ul>
<li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。</li>
<li>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</li>
<li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li>
<li>函数内容以冒号起始，并且缩进。</li>
<li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li>
</ul>
</li>
<li>语法格式：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义  函数名  （参数）:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionname</span><span class="params">( parameters )</span>:</span></span><br><span class="line">   <span class="string">"函数_文档字符串"</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure>
<h5 id="2-调用函数"><a href="#2-调用函数" class="headerlink" title="2.调用函数"></a>2.调用函数</h5><p>定义一个函数只给了函数一个名称，指定了函数里包含的参数，和代码块结构。这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从Python提示符执行。</p>
<h5 id="3-对象"><a href="#3-对象" class="headerlink" title="3.对象"></a>3.对象</h5><div class="table-container">
<table>
<thead>
<tr>
<th>对象类型</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>可更改对象 </strong></td>
<td>Strings（字符串）</td>
<td>tuples（元组）</td>
<td>numbers（数字</td>
</tr>
<tr>
<td><strong>不可更改对象</strong></td>
<td>list（列表）</td>
<td>dict（字典）</td>
</tr>
</tbody>
</table>
</div>
<p>下面的例子将解析可更改对象与不可更改对象的区别：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(string_2, tuples_2, int_2, float_2, list_2, dict_2, set_2)</span>:</span></span><br><span class="line">    print(<span class="string">"已收到传入参数，传入值为："</span>, string_2, tuples_2, int_2, float_2, list_2, dict_2, set_2)</span><br><span class="line">    string_2 = <span class="string">"newstring"</span></span><br><span class="line">    <span class="keyword">del</span> tuples_2</span><br><span class="line">    int_2 = <span class="number">3</span></span><br><span class="line">    float_2 = <span class="number">2.0</span></span><br><span class="line">    list_2[<span class="number">0</span>] = <span class="string">"newlist1"</span></span><br><span class="line">    dict_2[<span class="string">'dict1'</span>] = <span class="string">"newfirst"</span></span><br><span class="line">    <span class="keyword">del</span> set_2</span><br><span class="line">    print(<span class="string">"已修改传入参数，目前的属性值为:"</span>, string_2, int_2, float_2, list_2, dict_2)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(tuples_2)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">"tumples_2已删除"</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(set_2)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">"set_2已删除"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string_1 = <span class="string">"string"</span>  <span class="comment"># 字符串对象</span></span><br><span class="line">tuples_1 = (<span class="string">"tuples1"</span>, <span class="string">"tuples2"</span>, <span class="number">3</span>)  <span class="comment"># 元组对象</span></span><br><span class="line">int_1 = <span class="number">2</span>  <span class="comment"># 整型对象</span></span><br><span class="line">float_1 = <span class="number">1.0</span>  <span class="comment"># 浮点型对象</span></span><br><span class="line">list_1 = [<span class="string">"list1"</span>, <span class="string">"list2"</span>, <span class="number">3</span>]  <span class="comment"># 列表对象</span></span><br><span class="line">dict_1 = &#123;<span class="string">"dict1"</span>: <span class="string">"first"</span>, <span class="string">"dict2"</span>: <span class="number">2</span>&#125;  <span class="comment"># 字典对象</span></span><br><span class="line">set_1 = &#123;<span class="string">"set1"</span>, <span class="string">"set2"</span>, <span class="number">3</span>&#125;  <span class="comment"># 集合对象</span></span><br><span class="line">change(string_1, tuples_1, int_1, float_1, list_1, dict_1, set_1)</span><br><span class="line">print(<span class="string">"返回值为：\n"</span>, string_1, tuples_1, int_1, float_1, list_1, dict_1, set_1)</span><br></pre></td></tr></table></figure></p>
<p>我们用一个表格来解析一下整个过程：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>变量</th>
<th>输入</th>
<th>传入函数</th>
<th>修改之后</th>
<th>输出</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td>“string”</td>
<td>“string”</td>
<td>“newstring”</td>
<td>“string”</td>
</tr>
<tr>
<td>tuples</td>
<td>(“tuples1”,”tuples2”)</td>
<td>(“tuples1”,”tuples2”)</td>
<td>delete</td>
<td>(‘tuples1’, ‘tuples2’, 3)</td>
</tr>
<tr>
<td>int</td>
<td>2</td>
<td>2</td>
<td>3</td>
<td>2</td>
</tr>
<tr>
<td>float</td>
<td>1.0</td>
<td>1.0</td>
<td>2.0</td>
<td>1.0</td>
</tr>
<tr>
<td>list</td>
<td>[“list1”, “list2”, 3]</td>
<td>[“list1”, “list2”, 3]</td>
<td>[‘newlist1’, ‘list2’, 3]</td>
<td>[‘newlist1’, ‘list2’, 3]</td>
</tr>
<tr>
<td>dict</td>
<td>{“dict1”: “first”, “dict2”: 2}</td>
<td>{“dict1”: “first”, “dict2”: 2}</td>
<td>{‘dict1’: ‘newfirst’, ‘dict2’: 2}</td>
<td>{‘dict1’: ‘newfirst’, ‘dict2’: 2}</td>
</tr>
<tr>
<td>set</td>
<td>{“set1”, “set2”, 3}</td>
<td>{“set1”, “set2”, 3}</td>
<td>delete</td>
<td>{3, ‘set1’, ‘set2’}</td>
</tr>
</tbody>
</table>
</div>
<p>可以看到，只有属性为<code>列表对象list</code>,<code>字典对象dict</code>可以在函数中修改，而<code>字符串对象string</code>,<code>整型对象int</code>,<code>浮点型对象float</code>,<code>元组对象tuples</code>,<code>集合对象set</code>是无法在函数中修改的。</p>
<h5 id="4-参数"><a href="#4-参数" class="headerlink" title="4.参数"></a>4.参数</h5><ul>
<li><strong>必备参数</strong>：必备参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。例如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">must</span><span class="params">(str)</span>:</span></span><br><span class="line">    print(str)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    must()</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"未传入参数异常"</span>)</span><br></pre></td></tr></table></figure>
<p>该代码会输出<code>未传入参数异常</code>。</p>
<ul>
<li><strong>关键字参数：</strong>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。例如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyword_1</span><span class="params">(name_1, age_1)</span>:</span></span><br><span class="line">    print(<span class="string">"name_1 is &#123;&#125;,age_1 is &#123;&#125;"</span>.format(name_1, age_1))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">keyword_1(age_1=<span class="number">10</span>, name_1=<span class="string">"zhe"</span>)</span><br></pre></td></tr></table></figure>
<p>该代码会输出<code>name_1 is zhe,age_1 is 10</code>,关键字参数顺序不重要。</p>
<ul>
<li><strong>默认参数:</strong>调用函数时，默认参数的值如果没有传入，则被认为是默认值。例如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(name, age=<span class="number">35</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"name is &#123;&#125;,age is &#123;&#125;"</span>.format(name, age))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">default(name=<span class="string">'zhang'</span>,age=<span class="number">50</span>);</span><br><span class="line">default(name=<span class="string">'zhe'</span>)</span><br></pre></td></tr></table></figure>
<p>输出为：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name <span class="keyword">is</span> zhang,age <span class="keyword">is</span> <span class="number">50</span></span><br><span class="line">name <span class="keyword">is</span> zhe,age <span class="keyword">is</span> <span class="number">35</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>不定长参数:</strong>处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述2种参数不同，声明时不会命名。基本语法如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionname</span><span class="params">([formal_args,] *var_args_tuple )</span>:</span></span><br><span class="line">   <span class="string">"函数_文档字符串"</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure>
<p>加了星号（*）的变量名会存放所有未命名的变量参数。不定长参数实例如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nolenth_n</span><span class="params">(num_1, *num)</span>:</span></span><br><span class="line">    print(<span class="string">"输入的常量是："</span>, num_1)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> num:</span><br><span class="line">        print(<span class="string">"可变参数："</span>, x)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nolenth_n(<span class="number">10</span>)</span><br><span class="line">nolenth_n(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>)</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输入的常量是： <span class="number">10</span></span><br><span class="line">输入的常量是： <span class="number">10</span></span><br><span class="line">可变参数： <span class="number">20</span></span><br><span class="line">可变参数： <span class="number">30</span></span><br><span class="line">可变参数： <span class="number">40</span></span><br></pre></td></tr></table></figure></p>
<p>在可变参数后定义的参数必须通过关键词传入：<br>例如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Force_key</span><span class="params">(name, *home, age)</span>:</span></span><br><span class="line">    print(<span class="string">"传入name为&#123;&#125;,age为&#123;&#125;"</span>.format(name, age))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    Force_key(name=<span class="string">"zhang"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"传入异常"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    Force_key(<span class="string">"zhang"</span>,age=<span class="number">16</span>)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"传入异常"</span>)</span><br></pre></td></tr></table></figure><br>输出为：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">传入异常</span><br><span class="line">传入name为zhang,age为<span class="number">16</span></span><br></pre></td></tr></table></figure></p>
<h5 id="5-匿名函数"><a href="#5-匿名函数" class="headerlink" title="5.匿名函数"></a>5.匿名函数</h5><p>python 使用 lambda 来创建匿名函数。lambda只是一个表达式，函数体比def简单很多。lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。<br>匿名函数语法：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure><br>例如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sum = <span class="keyword">lambda</span> arg1, arg2: arg1 + arg2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用sum函数</span></span><br><span class="line">print(<span class="string">"相加后的值为 : "</span>, sum(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">print(<span class="string">"相加后的值为 : "</span>, sum(<span class="number">20</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><br>输出为：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">相加后的值为 :  <span class="number">30</span></span><br><span class="line">相加后的值为 :  <span class="number">40</span></span><br></pre></td></tr></table></figure></p>
<h5 id="6-return语句"><a href="#6-return语句" class="headerlink" title="6.return语句"></a>6.<code>return</code>语句</h5><p>return语句[表达式]退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。之前的例子都没有示范如何返回数值，下例便告诉你怎么做：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(arg1, arg2)</span>:</span></span><br><span class="line">    <span class="comment"># 返回2个参数的和."</span></span><br><span class="line">    total = arg1 + arg2</span><br><span class="line">    print(<span class="string">"函数内 : "</span>, total)</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用sum函数</span></span><br><span class="line">total = sum(<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><br>该程序输出<code>函数内 :  30</code></p>
<h5 id="7-全局变量与局部变量"><a href="#7-全局变量与局部变量" class="headerlink" title="7.全局变量与局部变量"></a>7.全局变量与局部变量</h5><p>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。下面的例子有助于理解这两个概念：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">9</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">global_1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(a)</span><br><span class="line">        a = <span class="number">100</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">"变量a误作局部变量"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">global_2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">global</span> a</span><br><span class="line">        print(a)</span><br><span class="line">        a = <span class="number">100</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">"变量a误作局部变量"</span>)</span><br><span class="line">print(<span class="string">"Before the function call "</span>, a)</span><br><span class="line">print(<span class="string">"inside change function"</span>)</span><br><span class="line">global_1()</span><br><span class="line">print(<span class="string">"After the function global_1() call "</span>, a)</span><br><span class="line">global_2()</span><br><span class="line">print(<span class="string">"After the function global_2() call "</span>, a)</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Before the function call  <span class="number">9</span></span><br><span class="line">inside change function</span><br><span class="line">变量a误作局部变量</span><br><span class="line">After the function global_1() call  <span class="number">9</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">After the function global_2() call  <span class="number">100</span></span><br></pre></td></tr></table></figure><br>当函数中只要用到了变量 <code>a</code>，并且 <code>a</code>出现在表达式等于号的前面，就会被当作局部变量。当执行到 <code>print(a)</code>的时候会报错，因为 <code>a</code>作为函数局部变量是在<code>print(a)</code> 之后才定义的。而当使用 <code>global</code>关键字，对函数中的 <code>a</code>标志为全局变量，让函数内部使用全局变量的<code>a</code>,程序中就没有问题了。</p>
<h5 id="8-文档字符串"><a href="#8-文档字符串" class="headerlink" title="8.文档字符串"></a>8.文档字符串</h5><p>DocStrings 文档字符串是一个重要工具，用于解释文档程序，帮助你的程序文档更加简单易懂。我们可以在函数体的第一行使用一对三个单引号<code>&#39;&#39;&#39;</code>或者一对三个双引号<code>&quot;&quot;&quot;</code>来定义文档字符串。你可以使用 <code>__doc__</code>（注意双下划线）调用函数中的文档字符串属性。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">''' say something here！</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(function.__doc__)  <span class="comment"># 调用 doc</span></span><br></pre></td></tr></table></figure>
<p>输出为<code>say something here！</code></p>
<h5 id="9-高阶函数"><a href="#9-高阶函数" class="headerlink" title="9.高阶函数"></a>9.高阶函数</h5><p>高阶函数（Higher-order function）或仿函数（functor）是可以接受函数作为参数的函数：</p>
<ul>
<li>使用一个或多个函数作为参数</li>
<li>返回另一个函数作为输出</li>
</ul>
<p>例如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high</span><span class="params">(l)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [i.upper() <span class="keyword">for</span> i <span class="keyword">in</span> l]</span><br><span class="line"><span class="comment"># 创建高阶函数，接受一个函数和一个列表作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(h, l)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> h(l)</span><br><span class="line"></span><br><span class="line">l = [<span class="string">'python'</span>, <span class="string">'Linux'</span>, <span class="string">'Git'</span>]</span><br><span class="line">print(test(high, l))</span><br></pre></td></tr></table></figure><br>输出为<code>[&#39;PYTHON&#39;, &#39;LINUX&#39;, &#39;GIT&#39;]</code></p>
<h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-定义一个函数用于实现求和运算"><a href="#1-定义一个函数用于实现求和运算" class="headerlink" title="1.定义一个函数用于实现求和运算"></a>1.定义一个函数用于实现求和运算</h5><ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_my</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure>
<h5 id="2-在代码中调用求和方法"><a href="#2-在代码中调用求和方法" class="headerlink" title="2.在代码中调用求和方法"></a>2.在代码中调用求和方法</h5><ul>
<li>代码： </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_my</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(<span class="string">"方法调用成功，传入的参数a=%d,b=%d,结果为:"</span> % (a, b), end=<span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = int(input(<span class="string">"Please enter an number:"</span>))</span><br><span class="line">n = int(input(<span class="string">"Please enter another number:"</span>))</span><br><span class="line">print(sum_my(m, n))</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Please enter an number:<span class="number">2</span></span><br><span class="line">Please enter another number:<span class="number">3</span></span><br><span class="line">方法调用成功，传入的参数a=<span class="number">2</span>,b=<span class="number">3</span>,结果为: <span class="number">5</span></span><br></pre></td></tr></table></figure>
<h5 id="3-重要的高阶函数"><a href="#3-重要的高阶函数" class="headerlink" title="3.重要的高阶函数"></a>3.重要的高阶函数</h5><p><strong>3.1 <code>map()</code></strong></p>
<p><code>map</code> 是一个在 Python 里非常有用的高阶函数。它接受一个函数和一个序列（迭代器）作为输入，然后对序列（迭代器）的每一个值应用这个函数，返回一个序列（迭代器），其包含应用函数后的结果。举例：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num * num</span><br><span class="line"></span><br><span class="line">print(list(map(square, lst)))</span><br></pre></td></tr></table></figure><br>输出为<code>[1, 4, 9, 16, 25]</code></p>
<ul>
<li>map函数用来将序列中的值处理再依次返回至列表内；</li>
<li>第一个参数func为函数，实现函数映射的功能，第二个参数为可迭代对象；</li>
<li>map函数的返回值为一个迭代器对象map；</li>
</ul>
<p><strong>3.2 <code>sorted()</code></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 反向排序</span></span><br><span class="line">str = sorted(<span class="string">'abcdefg'</span>, reverse=<span class="literal">True</span>)</span><br><span class="line">print(str)  <span class="comment"># ['g', 'f', 'e', 'd', 'c', 'b', 'a']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按指定元素进行排序</span></span><br><span class="line">obj = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">5</span>,<span class="number">6</span>], [<span class="number">2</span>,<span class="number">8</span>], [<span class="number">8</span>,<span class="number">3</span>], [<span class="number">3</span>,<span class="number">10</span>]]</span><br><span class="line">func = <span class="keyword">lambda</span> x: x[<span class="number">1</span>]</span><br><span class="line">new_list = sorted(obj, key=func, reverse=<span class="literal">False</span>)</span><br><span class="line">print(new_list)  <span class="comment"># [[1, 2], [8, 3], [5, 6], [2, 8], [3, 10]]</span></span><br></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">'g'</span>, <span class="string">'f'</span>, <span class="string">'e'</span>, <span class="string">'d'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">8</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">2</span>, <span class="number">8</span>], [<span class="number">3</span>, <span class="number">10</span>]]</span><br></pre></td></tr></table></figure></p>
<ul>
<li>sorted是Python提供的功能强大的排序函数，满足字符、数字等排序要求；</li>
<li>函数的第一个参数为可迭代对象，第二个参数key作为排序的规则（指定按什么排序），第三个参数表明是否反向；</li>
<li>sorted函数的返回结果是列表类型；</li>
</ul>
<p><strong>3.3 <code>filter()</code></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 过滤</span></span><br><span class="line">obj = filter(<span class="keyword">lambda</span> x: x &gt; <span class="number">0</span>, [<span class="number">-20</span>, <span class="number">-10</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">20</span>])</span><br><span class="line">print(obj) <span class="comment"># &lt;filter object at 0x004C9EB0&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> obj:</span><br><span class="line">    print(i) <span class="comment"># 1 10 20</span></span><br></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>filter函数也是接收一个函数和一个序列的高阶函数，其主要功能是过滤；</li>
<li>第一个参数是一个函数，第二个参数是可迭代对象；</li>
<li>filter函数的返回值是迭代器对象filter；</li>
</ul>
<h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><p>无</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>7.字符串</title>
    <url>/2020/03/08/7-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<div class="note info no-icon"><p>在本文中将解释字符串有关知识</p></div>
<a id="more"></a>
<h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul>
<li>字符串的3种表示</li>
<li>字符串的分割、连接、大小写转换、搜索等常用操作</li>
</ul>
<h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><h5 id="1-字符串的三种表示法"><a href="#1-字符串的三种表示法" class="headerlink" title="1.字符串的三种表示法"></a>1.字符串的三种表示法</h5><p>字符串可以通过单引号<code>（&#39;...&#39;）</code>或双引号<code>（&quot;...&quot;）</code>来进行表示，如果你想要分几行输入字符串，并且希望行尾的换行符自动包含到字符串当中，可以使用三对引号：·<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code> 或 <code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'test1'</span>  <span class="comment">#单引号</span></span><br><span class="line">b = <span class="string">"test2"</span>  <span class="comment">#双引号</span></span><br><span class="line">a_1 = <span class="string">'第一行\</span></span><br><span class="line"><span class="string"> 第一行结尾'</span>    <span class="comment">#多行一行输出</span></span><br><span class="line">b_1 = <span class="string">'第一行 \n 第二行'</span>  <span class="comment">#换行</span></span><br><span class="line">c = <span class="string">"""</span></span><br><span class="line"><span class="string">   test3         </span></span><br><span class="line"><span class="string">   test4</span></span><br><span class="line"><span class="string">   """</span>          <span class="comment">#多行文本</span></span><br><span class="line">d = <span class="string">'''</span></span><br><span class="line"><span class="string">   test5</span></span><br><span class="line"><span class="string">   test6</span></span><br><span class="line"><span class="string">   '''</span>         <span class="comment">#多行文本</span></span><br><span class="line">print(<span class="string">"a="</span>, a)</span><br><span class="line">print(<span class="string">"a_1="</span>, a_1)</span><br><span class="line">print(<span class="string">"b="</span>, b)</span><br><span class="line">print(<span class="string">"b_1="</span>, b_1)</span><br><span class="line">print(<span class="string">"c="</span>, c)</span><br><span class="line">print(<span class="string">"d="</span>, d)</span><br></pre></td></tr></table></figure>
<p>输出为：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a= test1</span><br><span class="line">a_1= 第一行 第一行结尾</span><br><span class="line">b= test2</span><br><span class="line">b_1= 第一行 </span><br><span class="line"> 第二行</span><br><span class="line">c= </span><br><span class="line">   test3         </span><br><span class="line">   test4</span><br><span class="line">   </span><br><span class="line">d= </span><br><span class="line">   test5</span><br><span class="line">   test6</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>在字符串中可以通过在一行的结尾输入<code>\</code>再换行达到多行文本最终输出一行的效果，而通过在字符串中输入<code>\n</code>可以达到换行的目的。转义字符如下表所示：</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">转义字符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">(在行尾时)</td>
<td style="text-align:left">续行符</td>
</tr>
<tr>
<td style="text-align:left">\\</td>
<td style="text-align:left">反斜杠符号</td>
</tr>
<tr>
<td style="text-align:left">\’</td>
<td style="text-align:left">单引号</td>
</tr>
<tr>
<td style="text-align:left">\”</td>
<td style="text-align:left">双引号</td>
</tr>
<tr>
<td style="text-align:left">\a</td>
<td style="text-align:left">响铃</td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:left">退格(Backspace)</td>
</tr>
<tr>
<td style="text-align:left">\e</td>
<td style="text-align:left">转义</td>
</tr>
<tr>
<td style="text-align:left">\000</td>
<td style="text-align:left">空</td>
</tr>
<tr>
<td style="text-align:left">\n</td>
<td style="text-align:left">换行</td>
</tr>
<tr>
<td style="text-align:left">\v</td>
<td style="text-align:left">纵向制表符</td>
</tr>
<tr>
<td style="text-align:left">\t</td>
<td style="text-align:left">横向制表符</td>
</tr>
<tr>
<td style="text-align:left">\r</td>
<td style="text-align:left">回车</td>
</tr>
<tr>
<td style="text-align:left">\f</td>
<td style="text-align:left">换页</td>
</tr>
<tr>
<td style="text-align:left">\oyy</td>
<td style="text-align:left">八进制数，yy代表的字符，例如：\o12代表换行</td>
</tr>
<tr>
<td style="text-align:left">\xyy</td>
<td style="text-align:left">十六进制数，yy代表的字符，例如：\x0a代表换行</td>
</tr>
<tr>
<td style="text-align:left">\other</td>
<td style="text-align:left">其它的字符以普通格式输出</td>
</tr>
</tbody>
</table>
</div>
<h5 id="2-字符串方法"><a href="#2-字符串方法" class="headerlink" title="2.字符串方法"></a>2.字符串方法</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"><strong>方法</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-capitalize.html" target="_blank" rel="noopener">string.capitalize()</a></td>
<td style="text-align:left">把字符串的第一个字符大写</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-center.html" target="_blank" rel="noopener">string.center(width)</a></td>
<td style="text-align:left">返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</td>
</tr>
<tr>
<td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-count.html" target="_blank" rel="noopener">string.count(str, beg=0, end=len(string))</a></strong></td>
<td style="text-align:left">返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-decode.html" target="_blank" rel="noopener">string.decode(encoding=’UTF-8’, errors=’strict’)</a></td>
<td style="text-align:left">以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 ‘ignore’ 或 者’replace’</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-encode.html" target="_blank" rel="noopener">string.encode(encoding=’UTF-8’, errors=’strict’)</a></td>
<td style="text-align:left">以 encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td>
</tr>
<tr>
<td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-endswith.html" target="_blank" rel="noopener">string.endswith(obj, beg=0, end=len(string))</a></strong></td>
<td style="text-align:left">检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-expandtabs.html" target="_blank" rel="noopener">string.expandtabs(tabsize=8)</a></td>
<td style="text-align:left">把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8。</td>
</tr>
<tr>
<td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-find.html" target="_blank" rel="noopener">string.find(str, beg=0, end=len(string))</a></strong></td>
<td style="text-align:left">检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1</td>
</tr>
<tr>
<td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-format.html" target="_blank" rel="noopener">string.format()</a></strong></td>
<td style="text-align:left">格式化字符串</td>
</tr>
<tr>
<td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-index.html" target="_blank" rel="noopener">string.index(str, beg=0, end=len(string))</a></strong></td>
<td style="text-align:left">跟find()方法一样，只不过如果str不在 string中会报一个异常.</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isalnum.html" target="_blank" rel="noopener">string.isalnum()</a></td>
<td style="text-align:left">如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isalpha.html" target="_blank" rel="noopener">string.isalpha()</a></td>
<td style="text-align:left">如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isdecimal.html" target="_blank" rel="noopener">string.isdecimal()</a></td>
<td style="text-align:left">如果 string 只包含十进制数字则返回 True 否则返回 False.</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isdigit.html" target="_blank" rel="noopener">string.isdigit()</a></td>
<td style="text-align:left">如果 string 只包含数字则返回 True 否则返回 False.</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-islower.html" target="_blank" rel="noopener">string.islower()</a></td>
<td style="text-align:left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isnumeric.html" target="_blank" rel="noopener">string.isnumeric()</a></td>
<td style="text-align:left">如果 string 中只包含数字字符，则返回 True，否则返回 False</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isspace.html" target="_blank" rel="noopener">string.isspace()</a></td>
<td style="text-align:left">如果 string 中只包含空格，则返回 True，否则返回 False.</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-istitle.html" target="_blank" rel="noopener">string.istitle()</a></td>
<td style="text-align:left">如果 string 是标题化的(见 title())则返回 True，否则返回 False</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isupper.html" target="_blank" rel="noopener">string.isupper()</a></td>
<td style="text-align:left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td>
</tr>
<tr>
<td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-join.html" target="_blank" rel="noopener">string.join(seq)</a></strong></td>
<td style="text-align:left">以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-ljust.html" target="_blank" rel="noopener">string.ljust(width)</a></td>
<td style="text-align:left">返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-lower.html" target="_blank" rel="noopener">string.lower()</a></td>
<td style="text-align:left">转换 string 中所有大写字符为小写.</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-lstrip.html" target="_blank" rel="noopener">string.lstrip()</a></td>
<td style="text-align:left">截掉 string 左边的空格</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-maketrans.html" target="_blank" rel="noopener">string.maketrans(intab, outtab])</a></td>
<td style="text-align:left">maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-max.html" target="_blank" rel="noopener">max(str)</a></td>
<td style="text-align:left">返回字符串 <em>str</em> 中最大的字母。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-min.html" target="_blank" rel="noopener">min(str)</a></td>
<td style="text-align:left">返回字符串 <em>str</em> 中最小的字母。</td>
</tr>
<tr>
<td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-partition.html" target="_blank" rel="noopener">string.partition(str)</a></strong></td>
<td style="text-align:left">有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str == string.</td>
</tr>
<tr>
<td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-replace.html" target="_blank" rel="noopener">string.replace(str1, str2, num=string.count(str1))</a></strong></td>
<td style="text-align:left">把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-rfind.html" target="_blank" rel="noopener">string.rfind(str, beg=0,end=len(string) )</a></td>
<td style="text-align:left">类似于 find()函数，不过是从右边开始查找.</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-rindex.html" target="_blank" rel="noopener">string.rindex( str, beg=0,end=len(string))</a></td>
<td style="text-align:left">类似于 index()，不过是从右边开始.</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-rjust.html" target="_blank" rel="noopener">string.rjust(width)</a></td>
<td style="text-align:left">返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-rpartition.html" target="_blank" rel="noopener">string.rpartition(str)</a></td>
<td style="text-align:left">类似于 partition()函数,不过是从右边开始查找</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-rstrip.html" target="_blank" rel="noopener">string.rstrip()</a></td>
<td style="text-align:left">删除 string 字符串末尾的空格.</td>
</tr>
<tr>
<td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-split.html" target="_blank" rel="noopener">string.split(str=””, num=string.count(str))</a></strong></td>
<td style="text-align:left">以 str 为分隔符切片 string，如果 num 有指定值，则仅分隔 num+ 个子字符串</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-splitlines.html" target="_blank" rel="noopener">string.splitlines([keepends])</a></td>
<td style="text-align:left">按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-startswith.html" target="_blank" rel="noopener">string.startswith(obj, beg=0,end=len(string))</a></td>
<td style="text-align:left">检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.</td>
</tr>
<tr>
<td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-strip.html" target="_blank" rel="noopener">string.strip([obj])</a></strong></td>
<td style="text-align:left">在 string 上执行 lstrip()和 rstrip()</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-swapcase.html" target="_blank" rel="noopener">string.swapcase()</a></td>
<td style="text-align:left">翻转 string 中的大小写</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-title.html" target="_blank" rel="noopener">string.title()</a></td>
<td style="text-align:left">返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td>
</tr>
<tr>
<td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-translate.html" target="_blank" rel="noopener">string.translate(str, del=””)</a></strong></td>
<td style="text-align:left">根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-upper.html" target="_blank" rel="noopener">string.upper()</a></td>
<td style="text-align:left">转换 string 中的小写字母为大写</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-string-zfill.html" target="_blank" rel="noopener">string.zfill(width)</a></td>
<td style="text-align:left">返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0</td>
</tr>
</tbody>
</table>
</div>
<h5 id="3-字符串运算"><a href="#3-字符串运算" class="headerlink" title="3.字符串运算"></a>3.字符串运算</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">字符串连接</td>
<td style="text-align:left">&gt;&gt;&gt;a + b ‘HelloPython’</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">重复输出字符串</td>
<td style="text-align:left">&gt;&gt;&gt;a * 2 ‘HelloHello’</td>
</tr>
<tr>
<td style="text-align:left">[]</td>
<td style="text-align:left">通过索引获取字符串中字符</td>
<td style="text-align:left">&gt;&gt;&gt;a[1] ‘e’</td>
</tr>
<tr>
<td style="text-align:left">[ : ]</td>
<td style="text-align:left">截取字符串中的一部分</td>
<td style="text-align:left">&gt;&gt;&gt;a[1:4] ‘ell’</td>
</tr>
<tr>
<td style="text-align:left">in</td>
<td style="text-align:left">成员运算符 - 如果字符串中包含给定的字符返回 True</td>
<td style="text-align:left">&gt;&gt;&gt;”H” in a True</td>
</tr>
<tr>
<td style="text-align:left">not in</td>
<td style="text-align:left">成员运算符 - 如果字符串中不包含给定的字符返回 True</td>
<td style="text-align:left">&gt;&gt;&gt;”M” not in a True</td>
</tr>
<tr>
<td style="text-align:left">r/R</td>
<td style="text-align:left">原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母”r”（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</td>
<td style="text-align:left">&gt;&gt;&gt;print r’\n’ \n &gt;&gt;&gt; print R’\n’ \n</td>
</tr>
<tr>
<td style="text-align:left">%</td>
<td style="text-align:left">格式字符串</td>
<td style="text-align:left">下一条</td>
</tr>
</tbody>
</table>
</div>
<h5 id="4-字符串格式化"><a href="#4-字符串格式化" class="headerlink" title="4.字符串格式化"></a>4.字符串格式化</h5><p>Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">"My name is %s and weight is %d kg!"</span> % (<span class="string">'Zara'</span>, <span class="number">21</span>) </span><br><span class="line"></span><br><span class="line">&gt;&gt;My name <span class="keyword">is</span> Zara <span class="keyword">and</span> weight <span class="keyword">is</span> <span class="number">21</span> kg!</span><br></pre></td></tr></table></figure>
<p>字符串格式化符号如下表所示：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">符  号</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">%c</td>
<td style="text-align:left">格式化字符及其ASCII码</td>
</tr>
<tr>
<td style="text-align:left">%s</td>
<td style="text-align:left">格式化字符串</td>
</tr>
<tr>
<td style="text-align:left">%d</td>
<td style="text-align:left">格式化整数</td>
</tr>
<tr>
<td style="text-align:left">%u</td>
<td style="text-align:left">格式化无符号整型</td>
</tr>
<tr>
<td style="text-align:left">%o</td>
<td style="text-align:left">格式化无符号八进制数</td>
</tr>
<tr>
<td style="text-align:left">%x</td>
<td style="text-align:left">格式化无符号十六进制数</td>
</tr>
<tr>
<td style="text-align:left">%X</td>
<td style="text-align:left">格式化无符号十六进制数（大写）</td>
</tr>
<tr>
<td style="text-align:left">%f</td>
<td style="text-align:left">格式化浮点数字，可指定小数点后的精度</td>
</tr>
<tr>
<td style="text-align:left">%e</td>
<td style="text-align:left">用科学计数法格式化浮点数</td>
</tr>
<tr>
<td style="text-align:left">%E</td>
<td style="text-align:left">作用同%e，用科学计数法格式化浮点数</td>
</tr>
<tr>
<td style="text-align:left">%g</td>
<td style="text-align:left">%f和%e的简写</td>
</tr>
<tr>
<td style="text-align:left">%G</td>
<td style="text-align:left">%F 和 %E 的简写</td>
</tr>
<tr>
<td style="text-align:left">%p</td>
<td style="text-align:left">用十六进制数格式化变量的地址</td>
</tr>
</tbody>
</table>
</div>
<p>格式化操作符辅助指令：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">符号</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">定义宽度或者小数点精度</td>
</tr>
<tr>
<td style="text-align:left">-</td>
<td style="text-align:left">用做左对齐</td>
</tr>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">在正数前面显示加号( + )</td>
</tr>
<tr>
<td style="text-align:left"><sp></td>
<td style="text-align:left">在正数前面显示空格</td>
</tr>
<tr>
<td style="text-align:left">#</td>
<td style="text-align:left">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td>
</tr>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">显示的数字前面填充’0’而不是默认的空格</td>
</tr>
<tr>
<td style="text-align:left">%</td>
<td style="text-align:left">‘%%’输出一个单一的’%’</td>
</tr>
<tr>
<td style="text-align:left">(var)</td>
<td style="text-align:left">映射变量(字典参数)</td>
</tr>
<tr>
<td style="text-align:left">m.n.</td>
<td style="text-align:left">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td>
</tr>
</tbody>
</table>
</div>
<h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-字符串常用函数使用："><a href="#1-字符串常用函数使用：" class="headerlink" title="1.字符串常用函数使用："></a>1.字符串常用函数使用：</h5><p><strong>1.1 <code>split()</code>和<code>join()</code></strong><br>split() 分割任意字符串, join() 使用指定字符连接多个字符串,两者通常配合使用</p>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">'hello world  boy#zhe#nan,good'</span></span><br><span class="line">print(s.split())        <span class="comment"># 无参数</span></span><br><span class="line">print(s.split(<span class="string">"#"</span>))     <span class="comment"># 定义分割符号</span></span><br><span class="line">print(s.split(<span class="string">"#"</span>, <span class="number">1</span>))  <span class="comment"># 定义分割段数</span></span><br><span class="line">print(<span class="string">"-"</span>.join(s.split(<span class="string">"#"</span>)))  <span class="comment">#使用"-"替换"#"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'boy#zhe#nan,good'</span>]</span><br><span class="line">[<span class="string">'hello world  boy'</span>, <span class="string">'zhe'</span>, <span class="string">'nan,good'</span>]</span><br><span class="line">[<span class="string">'hello world  boy'</span>, <span class="string">'zhe#nan,good'</span>]</span><br><span class="line">hello world  boy-zhe-nan,good</span><br></pre></td></tr></table></figure>
<ul>
<li>分析：<br>split() 方法语法：<br><code>str.split(str=&quot;&quot;, num=string.count(str)).</code><blockquote>
<p>其中：</p>
<ul>
<li>str — 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。</li>
<li>num — 分割次数。默认为 -1, 即分隔所有。</li>
</ul>
</blockquote>
</li>
</ul>
<p><strong>1.2 <code>title()</code></strong><br>该方法返回”标题化”的字符串,就是说所有单词都是以大写开始。</p>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">"this is string example....wow!!!"</span></span><br><span class="line"><span class="keyword">print</span> (str.title())</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">This Is String Example....Wow!!!</span><br></pre></td></tr></table></figure>
<p><strong>1.3 <code>upper()</code></strong><br>将字符串中的小写字母转为大写字母。</p>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">"this is string example....wow!!!"</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"str.upper() : "</span>, str.upper())</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str.upper() :  THIS IS STRING EXAMPLE....WOW!!!</span><br></pre></td></tr></table></figure>
<p><strong>1.4 <code>lower()</code></strong><br>将字符串中的大写字母转为小写字母。</p>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">"This Is String Example....Wow!!!"</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"str.lower() : "</span>, str.lower())</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">this <span class="keyword">is</span> string example....wow!!!</span><br></pre></td></tr></table></figure>
<p><strong>1.5 <code>swapcase()</code></strong><br>返回大小写交换版本。</p>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">"My name is Zhang"</span></span><br><span class="line">print(s.swapcase())</span><br></pre></td></tr></table></figure>
<ul>
<li>结果<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mY NAME IS zHANG</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>1.6 <code>isalnum()</code></strong><br>检查所有字符是否只有字母和数字’</p>
<ul>
<li>代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s_1 = <span class="string">"test1"</span></span><br><span class="line">s_2 = <span class="string">"test 2"</span></span><br><span class="line">print(s_1.isalnum(), s_2.isalnum())</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">+ 结果</span><br><span class="line"></span><br><span class="line">​```python</span><br><span class="line"><span class="literal">True</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p><strong>1.7 <code>isalpha()</code></strong><br>检查所有字符中是否只有字母</p>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s_3 = <span class="string">"test1"</span></span><br><span class="line">s_4 = <span class="string">"test "</span></span><br><span class="line">s_5 = <span class="string">"test"</span></span><br><span class="line">print(s_3.isalpha(), s_4.isalpha(), s_5.isalpha())</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">False</span> <span class="literal">False</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p><strong>1.8 <code>strip()</code>、<code>lstrip()</code>、<code>rstrip()</code></strong><br><code>strip()</code>移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。<br><strong>注意：</strong>该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。<br><code>rstrip()</code>删除 string 字符串末尾的指定字符（默认为空格）。<br><code>lstrip()</code>截掉字符串左边的空格或指定字符。</p>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">' a bc\n'</span></span><br><span class="line">print(<span class="string">"s.strip()="</span>, s.strip())  <span class="comment"># 无参</span></span><br><span class="line">print(<span class="string">"s.strip(\"a \")="</span>, s.strip(<span class="string">"a "</span>))  <span class="comment"># 有参</span></span><br><span class="line">s_1 = <span class="string">' www.baidu.com '</span></span><br><span class="line">print(<span class="string">"s_1.lstrip()="</span>, s_1.lstrip())  <span class="comment"># 无参</span></span><br><span class="line">print(<span class="string">"s_1.lstrip(\"wu \")="</span>, s_1.lstrip(<span class="string">"wu "</span>))  <span class="comment"># 有参</span></span><br><span class="line">print(<span class="string">"s_1.rstrip()="</span>, s_1.rstrip())  <span class="comment"># 无参</span></span><br><span class="line">print(<span class="string">"s_1.rstrip(\"com \")="</span>, s_1.rstrip(<span class="string">"com "</span>))  <span class="comment"># 有参</span></span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.strip()= a bc</span><br><span class="line">s.strip(<span class="string">"a "</span>)= bc</span><br><span class="line"></span><br><span class="line">s_1.lstrip()= www.baidu.com </span><br><span class="line">s_1.lstrip(<span class="string">"wu "</span>)= .baidu.com </span><br><span class="line">s_1.rstrip()=  www.baidu.com</span><br><span class="line">s_1.rstrip(<span class="string">"com "</span>)=  www.baidu.</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>参数中包括的最后一个结尾的字符就是截取的部分，例如：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s_3 = <span class="string">'abcdefg'</span></span><br><span class="line">print(s_3.strip(<span class="string">'cbaf'</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt;defg</span><br></pre></td></tr></table></figure>
<p>由于没有输入<code>g</code>，字符<code>f</code>并没有截取</p>
<p><strong>1.9 <code>find()</code>，<code>startwith()</code>，<code>endwith()</code></strong><br><code>find()</code>搜索字符串里的文本或子字符串，没有找到则返回 -1。<br><code>startwith(value)</code>检查字符串是否以<code>value</code>开头，是则返回true，否则返回false<br><code>endwith(value)</code>检查字符串是否以<code>value</code>结尾，是则返回true，否则返回false</p>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">"faulty for a reason"</span></span><br><span class="line">print(s.find(<span class="string">"for"</span>))</span><br><span class="line">print(s.find(<span class="string">"fora"</span>))</span><br><span class="line">print(s.startswith(<span class="string">"fa"</span>))</span><br><span class="line">print(s.startswith(<span class="string">"fas"</span>))  <span class="comment"># 检查字符串是否以 fa 开头</span></span><br><span class="line">print(s.endswith(<span class="string">"reason"</span>))</span><br><span class="line">print(s.endswith(<span class="string">"reasons"</span>)) <span class="comment"># 检查字符串是否以 reason 结尾</span></span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><h5 id="1-回文检查"><a href="#1-回文检查" class="headerlink" title="1.回文检查"></a>1.回文检查</h5><div class="note info no-icon"><p>回文是一种无论从左还是从右读都一样的字符序列。比如 “madam”。在这个例子中，我们检查用户输入的字符串是否是回文，并输出结果。</p></div>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = input(<span class="string">"请输入一串字符串："</span>)</span><br><span class="line">z = s[::<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">if</span> s == z:</span><br><span class="line">    print(<span class="string">"是回文"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"不是回文"</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请输入一串字符串：asda</span><br><span class="line">不是回文</span><br><span class="line">请输入一串字符串：abcba</span><br><span class="line">是回文</span><br></pre></td></tr></table></figure>
<h5 id="2-单词计数"><a href="#2-单词计数" class="headerlink" title="2.单词计数"></a>2.单词计数</h5><div class="note info no-icon"><p>对用户输入的一行文本进行单词计数</p></div>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = input(<span class="string">"请输入一段句子（英文）:"</span>)</span><br><span class="line">print(<span class="string">"这段句子中有%d个单词"</span> % (len(s.split(<span class="string">" "</span>))))</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请输入一段句子（英文）:my name <span class="keyword">is</span> zhagn</span><br><span class="line">这段句子中有<span class="number">4</span>个单词</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>6.数据结构</title>
    <url>/2020/03/07/6-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<div class="note info no-icon"><p>数据结构（data structure）是计算机中存储、组织数据的方式。本实验将深入了解列表。</p></div>
<a id="more"></a>
<h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul>
<li>列表的方法与列表元素的删除</li>
<li>将列表用作栈和队列</li>
<li>列表推导式</li>
<li>元组、集合、字典的创建与操作</li>
<li>enumerate() 和 zip() 函数</li>
</ul>
<h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><h5 id="1-列表的更多方法"><a href="#1-列表的更多方法" class="headerlink" title="1.列表的更多方法"></a>1.列表的更多方法</h5><p>1.1 插入<code>insert(position,value)</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br><span class="line">a.insert(<span class="number">0</span>, <span class="number">1</span>)  <span class="comment"># 在列表索引 0 位置添加元素 1</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br><span class="line"></span><br><span class="line">a.insert(<span class="number">0</span>, <span class="string">'1'</span>) </span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="string">'1'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>在索引为<code>0</code>的位置插入值，任意属性的值均可。</p>
</blockquote>
<p>1.2 计数<code>count(value)</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br><span class="line">print(a.count(<span class="number">45</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>检索列表中为<code>45</code>的关键词的数目。</p>
</blockquote>
<p>1.3 移除指定值<code>remove(value)</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br><span class="line">a.remove(<span class="number">45</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>可知，<code>remove()</code>函数每次只能移除一个有效值</p>
</blockquote>
<p>1.4 反转<code>reverse()</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br><span class="line">a.reverse();            <span class="comment">#反转a列表</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">68</span>, <span class="number">97</span>, <span class="number">66</span>, <span class="number">64</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p>
<p>1.5 追加<code>extend()</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br><span class="line">b = [<span class="number">989</span>, <span class="number">-546</span>, <span class="number">798</span>]</span><br><span class="line">a.extend(b)             <span class="comment">#追加b列表至a列表</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>, <span class="number">989</span>, <span class="number">-546</span>, <span class="number">798</span>]</span><br></pre></td></tr></table></figure></p>
<p>1.6 排序<code>sort()</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br><span class="line">a.sort()                <span class="comment">#对a列表排序</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">97</span>]</span><br></pre></td></tr></table></figure></p>
<h5 id="2-将列表用作栈"><a href="#2-将列表用作栈" class="headerlink" title="2.将列表用作栈"></a>2.将列表用作栈</h5><p>栈是我们通常所说的一种 LIFO （Last In First Out 后进先出）数据结构。它的意思是最后进入的数据第一个出来。一个最简单的例子往一端封闭的管道放入一些弹珠然后取出来，如果你想把弹珠取出来，你必须从你最后放入弹珠的位置挨个拿出来。</p>
<p>2.1 <code>pop(value)</code>方法<br>使用该方法可以将列表中第<code>value</code>个元素弹出，例如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">print(a.pop(<span class="number">1</span>))</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;<span class="number">1</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">print(a.pop())</span><br><span class="line">&gt;&gt;<span class="number">5</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><code>pop()</code>方法如果不加参数即将最后一个元素弹出，通过这种方法实现了栈。</p>
</blockquote>
<h5 id="3-将列表用作队列"><a href="#3-将列表用作队列" class="headerlink" title="3.将列表用作队列"></a>3.将列表用作队列</h5><p>队列 是一种在末尾追加数据以及在开始弹出数据的数据结构。与栈不同，它是 FIFO （First In First Out 先进先出）的数据结构。<br>通过代码来实现队列：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">a.append(<span class="number">1</span>)</span><br><span class="line">print(a)</span><br><span class="line">a.pop(<span class="number">0</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p>
<h5 id="4-列表推导式"><a href="#4-列表推导式" class="headerlink" title="4.列表推导式"></a>4.列表推导式</h5><p>列表推导式为从序列中创建列表提供了一个简单的方法。如果没有列表推导式，一般都是这样创建列表的：通过将一些操作应用于序列的每个成员并通过返回的元素创建列表，或者通过满足特定条件的元素创建子序列。例如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    a.append(x**<span class="number">2</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><br>但是当我们输入代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">&gt;&gt;<span class="number">9</span></span><br></pre></td></tr></table></figure><br>会发现<code>x</code>值仍然存在，通过下面方法达到生成列表且不产生资源浪费：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><br>而对于坐标，同样可以通过这种方法：<br><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">m = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>] <span class="keyword">if</span> x != y]</span><br><span class="line">print(m)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure></p>
<h5 id="5-元组"><a href="#5-元组" class="headerlink" title="5.元组"></a>5.元组</h5><p>元组与列表类似，不同之处在于元组的元素不能修改。元组使用小括号，列表使用方括号。元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。例如：<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">tup1</span> = ()     <span class="comment">#创建空元组</span></span><br><span class="line"><span class="attr">tup2</span> = (<span class="number">12</span>,)  <span class="comment">#创建只包含一个元素的元组</span></span><br></pre></td></tr></table></figure><br>元组与字符串类似，下标索引从0开始，可以进行截取，组合等。</p>
<p><strong>5.1 元组运算符</strong><br>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Python 表达式</th>
<th style="text-align:left">结果</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">len((1, 2, 3))</td>
<td style="text-align:left">3</td>
<td style="text-align:left">计算元素个数</td>
</tr>
<tr>
<td style="text-align:left">(1, 2, 3) + (4, 5, 6)</td>
<td style="text-align:left">(1, 2, 3, 4, 5, 6)</td>
<td style="text-align:left">连接</td>
</tr>
<tr>
<td style="text-align:left">(‘Hi!’,) * 4</td>
<td style="text-align:left">(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td>
<td style="text-align:left">复制</td>
</tr>
<tr>
<td style="text-align:left">3 in (1, 2, 3)</td>
<td style="text-align:left">True</td>
<td style="text-align:left">元素是否存在</td>
</tr>
<tr>
<td style="text-align:left">for x in (1, 2, 3): print x,</td>
<td style="text-align:left">1 2 3</td>
<td style="text-align:left">迭代</td>
</tr>
</tbody>
</table>
</div>
<p><strong>5.2 元组索引、截取</strong><br>因为元组也是一个序列，所以我们可以访问元组中的指定位置的元素，也可以截取索引中的一段元素，如下所示：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = (<span class="string">'spam'</span>, <span class="string">'Spam'</span>, <span class="string">'SPAM!'</span>)</span><br></pre></td></tr></table></figure></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Python 表达式</th>
<th style="text-align:left">结果</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">L[2]</td>
<td style="text-align:left">‘SPAM!’</td>
<td style="text-align:left">读取第三个元素</td>
</tr>
<tr>
<td style="text-align:left">L[-2]</td>
<td style="text-align:left">‘Spam’</td>
<td style="text-align:left">反向读取，读取倒数第二个元素</td>
</tr>
<tr>
<td style="text-align:left">L[1:]</td>
<td style="text-align:left">(‘Spam’, ‘SPAM!’)</td>
<td style="text-align:left">截取元素</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>任意无符号的对象，以逗号隔开，默认为元组</p>
</blockquote>
<p><strong>5.3 元组内置函数</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">方法及描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-tuple-cmp.html" target="_blank" rel="noopener">cmp(tuple1, tuple2)</a> 比较两个元组元素。</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-tuple-len.html" target="_blank" rel="noopener">len(tuple)</a> 计算元组元素个数。</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-tuple-max.html" target="_blank" rel="noopener">max(tuple)</a> 返回元组中元素最大值。</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-tuple-min.html" target="_blank" rel="noopener">min(tuple)</a> 返回元组中元素最小值。</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-tuple-tuple.html" target="_blank" rel="noopener">tuple(seq)</a> 将列表转换为元组。</td>
</tr>
</tbody>
</table>
</div>
<h5 id="6-集合"><a href="#6-集合" class="headerlink" title="6.集合"></a>6.集合</h5><p>集合是一个无序不重复元素的集。基本功能包括关系测试和消除重复元素。集合对象还支持 union（联合），intersection（交），difference（差）和 symmetric difference（对称差集）等数学运算。大括号或 set() 函数可以用来创建集合，例如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'2'</span>&#125;</span><br><span class="line">b = set(<span class="string">'1232'</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&#123;<span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'1'</span>&#125;</span><br><span class="line">&#123;<span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'1'</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>6.1 常用运算</strong></p>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">b = set(<span class="string">'alacazam'</span>)</span><br><span class="line">print(<span class="string">'a='</span>, a)</span><br><span class="line">print(<span class="string">'b='</span>, b)</span><br><span class="line">print(<span class="string">'a - b='</span>, a - b)  <span class="comment"># a 有而 b 没有的字母</span></span><br><span class="line">print(<span class="string">'a | b='</span>, a | b)  <span class="comment"># 存在于 a 或 b 的字母</span></span><br><span class="line">print(<span class="string">'a &amp; b='</span>, a &amp; b)  <span class="comment"># a 和 b 都有的字母</span></span><br><span class="line">print(<span class="string">'a ^ b='</span>, a ^ b)  <span class="comment"># 存在于 a 或 b 但不同时存在的字母</span></span><br><span class="line">print(<span class="string">'a.pop()='</span>, a.pop()) <span class="comment">#随机弹出一个元素</span></span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a= &#123;<span class="string">'r'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>&#125;</span><br><span class="line">b= &#123;<span class="string">'c'</span>, <span class="string">'m'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>&#125;</span><br><span class="line">a - b= &#123;<span class="string">'r'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line">a | b= &#123;<span class="string">'r'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>&#125;</span><br><span class="line">a &amp; b= &#123;<span class="string">'c'</span>, <span class="string">'a'</span>&#125;</span><br><span class="line">a ^ b= &#123;<span class="string">'l'</span>, <span class="string">'z'</span>, <span class="string">'b'</span>, <span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'m'</span>&#125;</span><br><span class="line">a.pop()= d</span><br></pre></td></tr></table></figure>
<h5 id="7-字典"><a href="#7-字典" class="headerlink" title="7.字典"></a>7.字典</h5><p>字典是是无序的键值对（<code>key:value</code>）集合，同一个字典内的键必须是互不相同的。一对大括号 {} 创建一个空字典。初始化字典时，在大括号内放置一组逗号分隔的键<code>：</code>值对，这也是字典输出的方式。我们使用键来检索存储在字典中的数据。格式如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2 &#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。</p>
</blockquote>
<p><strong>7.1 字典键的特性</strong><br>字典值可以没有限制地取任何python对象，既可以是标准的对象，也可以是用户定义的，但键不行。两个重要的点需要记住：</p>
<ul>
<li>不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住</li>
<li>键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行</li>
</ul>
<p><strong>7.2 字典内置函数和方法</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">函数及描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-cmp.html" target="_blank" rel="noopener">cmp(dict1, dict2)</a> 比较两个字典元素。</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-len.html" target="_blank" rel="noopener">len(dict)</a> 计算字典元素个数，即键的总数。</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-str.html" target="_blank" rel="noopener">str(dict)</a> 输出字典可打印的字符串表示。</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-type.html" target="_blank" rel="noopener">type(variable)</a> 返回输入的变量类型，如果变量是字典就返回字典类型。</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-clear.html" target="_blank" rel="noopener">dict.clear()</a> 删除字典内所有元素</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-copy.html" target="_blank" rel="noopener">dict.copy()</a> 返回一个字典的浅复制</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-fromkeys.html" target="_blank" rel="noopener">dict.fromkeys(seq[, val])</a> 创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-get.html" target="_blank" rel="noopener">dict.get(key, default=None)</a> 返回指定键的值，如果值不在字典中返回default值</td>
</tr>
<tr>
<td style="text-align:left">9</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-has_key.html" target="_blank" rel="noopener">dict.has_key(key)</a> 如果键在字典dict里返回true，否则返回false</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-items.html" target="_blank" rel="noopener">dict.items()</a> 以列表返回可遍历的(键, 值) 元组数组</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-keys.html" target="_blank" rel="noopener">dict.keys()</a> 以列表返回一个字典所有的键</td>
</tr>
<tr>
<td style="text-align:left">12</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-setdefault.html" target="_blank" rel="noopener">dict.setdefault(key, default=None)</a> 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-update.html" target="_blank" rel="noopener">dict.update(dict2)</a> 把字典dict2的键/值对更新到dict里</td>
</tr>
<tr>
<td style="text-align:left">14</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-values.html" target="_blank" rel="noopener">dict.values()</a> 以列表返回字典中的所有值</td>
</tr>
<tr>
<td style="text-align:left">15</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/python-att-dictionary-pop.html" target="_blank" rel="noopener">pop(key[,default])</a> 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td>
</tr>
<tr>
<td style="text-align:left">16</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/python-att-dictionary-popitem.html" target="_blank" rel="noopener">popitem()</a> 返回并删除字典中的最后一对键和值。</td>
</tr>
</tbody>
</table>
</div>
<h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-常用的元组操作"><a href="#1-常用的元组操作" class="headerlink" title="1.常用的元组操作"></a>1.常用的元组操作</h5><ul>
<li>访问元组<br>元组可以使用下标索引来访问元组中的值，如下实例:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> )</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"tup1[0]: "</span>, tup1[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"tup2[1:5]: "</span>, tup2[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt;tup1[<span class="number">0</span>]:  physics</span><br><span class="line">tup2[<span class="number">1</span>:<span class="number">5</span>]:  (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>修改元组<br>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="number">12</span>, <span class="number">34.56</span>)</span><br><span class="line">tup2 = (<span class="string">'abc'</span>, <span class="string">'xyz'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 以下修改元组元素操作是非法的。</span></span><br><span class="line"><span class="comment"># tup1[0] = 100</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建一个新的元组</span></span><br><span class="line">tup3 = tup1 + tup2</span><br><span class="line">print(tup3)</span><br><span class="line"></span><br><span class="line">&gt;&gt;(<span class="number">12</span>, <span class="number">34.56</span>, <span class="string">'abc'</span>, <span class="string">'xyz'</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>删除元组<br>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup = (<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"> </span><br><span class="line">print(tup)</span><br><span class="line"><span class="keyword">del</span>(tup)</span><br><span class="line">print( <span class="string">"After deleting tup : "</span>)</span><br><span class="line">print(tup)</span><br></pre></td></tr></table></figure>
<p>以上实例元组被删除后，输出变量会有异常信息，输出如下所示：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">After deleting tup :</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"test.py"</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">print</span> tup</span><br><span class="line">NameError: name <span class="string">'tup'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p>
<h5 id="2-常用字典操作"><a href="#2-常用字典操作" class="headerlink" title="2.常用字典操作"></a>2.常用字典操作</h5><ul>
<li>访问字典操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">car = &#123;<span class="string">'name'</span>: <span class="string">'byd'</span>, <span class="string">'light'</span>: <span class="number">2</span>, <span class="string">'wheel'</span>: <span class="number">4</span>&#125;</span><br><span class="line">print(car[<span class="string">'name'</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt;byd</span><br></pre></td></tr></table></figure>
<ul>
<li>修改字典</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">car = &#123;<span class="string">'name'</span>: <span class="string">'byd'</span>, <span class="string">'light'</span>: <span class="number">2</span>, <span class="string">'wheel'</span>: <span class="number">4</span>&#125;</span><br><span class="line">car[<span class="string">'name'</span>] = <span class="string">'bmw'</span>        <span class="comment">#修改</span></span><br><span class="line">car[<span class="string">'owner'</span>] = <span class="string">'Metatron'</span>  <span class="comment">#添加</span></span><br><span class="line">print(car[<span class="string">'name'</span>], car[<span class="string">'owner'</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt;bmw Metatron</span><br></pre></td></tr></table></figure>
<ul>
<li>删除字典元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">car = &#123;<span class="string">'name'</span>: <span class="string">'byd'</span>, <span class="string">'light'</span>: <span class="number">2</span>, <span class="string">'wheel'</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">del</span> car[<span class="string">'name'</span>]  <span class="comment">#删除键是name的条目</span></span><br><span class="line">print(car)</span><br><span class="line">car.clear() <span class="comment">#清空字典所有条目</span></span><br><span class="line">print(car)</span><br><span class="line"><span class="keyword">del</span> car  <span class="comment">#删除字典</span></span><br><span class="line">print(car)</span><br></pre></td></tr></table></figure>
<p>输出报错：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"F:/Python/6/eg 6-6.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(car)</span><br><span class="line">NameError: name <span class="string">'car'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">&#123;<span class="string">'light'</span>: <span class="number">2</span>, <span class="string">'wheel'</span>: <span class="number">4</span>&#125;</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>查看某元素是否在字典中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">car = &#123;<span class="string">'name'</span>: <span class="string">'byd'</span>, <span class="string">'light'</span>: <span class="number">2</span>, <span class="string">'wheel'</span>: <span class="number">4</span>&#125;</span><br><span class="line">print(<span class="string">'bmw'</span> <span class="keyword">in</span> car)</span><br><span class="line"></span><br><span class="line">&gt;&gt;false</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>dict()</code>从包含键值对的元组中创建字典</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(dict(((<span class="string">'Indian'</span>, <span class="string">'Delhi'</span>), (<span class="string">'Bangladesh'</span>, <span class="string">'Dhaka'</span>))))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&#123;<span class="string">'Indian'</span>: <span class="string">'Delhi'</span>, <span class="string">'Bangladesh'</span>: <span class="string">'Dhaka'</span>&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>遍历字典<code>item()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">'Kushal'</span>: <span class="string">'Fedora'</span>, <span class="string">'Jace'</span>: <span class="string">'Mac'</span>, <span class="string">'kart_'</span>: <span class="string">'Debian'</span>, <span class="string">'parthan'</span>: <span class="string">'Ubuntu'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> data.items():</span><br><span class="line">    print(<span class="string">"&#123;&#125; uses &#123;&#125;"</span>.format(x, y))</span><br><span class="line"></span><br><span class="line">&gt;&gt;Kushal uses Fedora</span><br><span class="line">Jace uses Mac</span><br><span class="line">kart_ uses Debian</span><br><span class="line">parthan uses Ubuntu</span><br></pre></td></tr></table></figure>
<ul>
<li><code>dict.setdefault(key, default)</code></li>
</ul>
<p>许多时候我们需要往字典中的元素添加数据，我们首先要判断这个元素是否存在，不存在则创建一个默认值。如果在循环里执行这个操作，每次迭代都需要判断一次，降低程序性能。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;&#125;</span><br><span class="line">data.setdefault(<span class="string">'names'</span>, []).append(<span class="string">'Ruby'</span>)</span><br><span class="line">data.setdefault(<span class="string">'names'</span>, []).append(<span class="string">'Python'</span>)</span><br><span class="line">data.setdefault(<span class="string">'names'</span>, []).append(<span class="string">'C'</span>)</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line">&gt;&gt; &#123;<span class="string">'names'</span>: [<span class="string">'Ruby'</span>, <span class="string">'Python'</span>, <span class="string">'C'</span>]&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>dict.get(key, default)</code></li>
</ul>
<p>试图索引一个不存在的键将会抛出一个 keyError 错误。我们可以使用 dict.get(key, default) 来索引键，如果键不存在，那么返回指定的 default 值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'byd'</span>, <span class="string">'light'</span>: <span class="number">2</span>, <span class="string">'wheel'</span>: <span class="number">4</span>&#125;</span><br><span class="line">print(data.get(<span class="string">'foo'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt;<span class="number">0</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>enumerate()</code></li>
</ul>
<p>在遍历列表（或任何序列类型）的同时获得元素索引值<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'byd'</span>, <span class="string">'light'</span>: <span class="number">2</span>, <span class="string">'wheel'</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> enumerate(data.items()):</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">&gt;&gt;(<span class="number">0</span>, (<span class="string">'name'</span>, <span class="string">'byd'</span>))</span><br><span class="line">(<span class="number">1</span>, (<span class="string">'light'</span>, <span class="number">2</span>))</span><br><span class="line">(<span class="number">2</span>, (<span class="string">'wheel'</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>zip()</code></li>
</ul>
<p>遍历两个序列类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">'Pradeepto'</span>, <span class="string">'Kushal'</span>]</span><br><span class="line">b = [<span class="string">'OpenSUSE'</span>, <span class="string">'Fedora'</span>]</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(a, b):</span><br><span class="line">    print(<span class="string">"&#123;&#125; uses &#123;&#125;"</span>.format(x, y))</span><br><span class="line"></span><br><span class="line">&gt;&gt;Pradeepto uses OpenSUSE</span><br><span class="line">Kushal uses Fedora</span><br></pre></td></tr></table></figure>
<h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><h5 id="1-students-py"><a href="#1-students-py" class="headerlink" title="1.students.py"></a>1.students.py</h5><p>这是一个判断学生成绩是否达标的程序，要求输入学生数量，以及各个学生物理、数学、历史三科的成绩，如果总成绩小于 120，程序打印 “failed”，否则打印 “passed”。</p>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = int(input(<span class="string">"Enter the number of students: "</span>))</span><br><span class="line">data = &#123;&#125; <span class="comment"># 用来存储数据的字典变量</span></span><br><span class="line">Subjects = (<span class="string">'Physics'</span>, <span class="string">'Maths'</span>, <span class="string">'History'</span>) <span class="comment"># 所有科目</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">    name = input(<span class="string">'Enter the name of the student &#123;&#125;: '</span>.format(i + <span class="number">1</span>)) <span class="comment"># 获得学生名称</span></span><br><span class="line">    marks = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> Subjects:</span><br><span class="line">        marks.append(int(input(<span class="string">'Enter marks of &#123;&#125;: '</span>.format(x)))) <span class="comment"># 获得每一科的分数</span></span><br><span class="line">    data[name] = marks</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> data.items():</span><br><span class="line">    total =  sum(y)</span><br><span class="line">    print(<span class="string">"&#123;&#125;'s total marks &#123;&#125;"</span>.format(x, total))</span><br><span class="line">    <span class="keyword">if</span> total &lt; <span class="number">120</span>:</span><br><span class="line">        print(x, <span class="string">"failed :("</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(x, <span class="string">"passed :)"</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Enter the number of students: <span class="number">2</span></span><br><span class="line">Enter the name of the student <span class="number">1</span>: me</span><br><span class="line">Enter marks of Physics: <span class="number">123</span></span><br><span class="line">Enter marks of Maths: <span class="number">12</span></span><br><span class="line">Enter marks of History: <span class="number">31</span></span><br><span class="line">Enter the name of the student <span class="number">2</span>: you</span><br><span class="line">Enter marks of Physics: <span class="number">20</span></span><br><span class="line">Enter marks of Maths: <span class="number">20</span></span><br><span class="line">Enter marks of History: <span class="number">20</span></span><br><span class="line">me<span class="string">'s total marks 166</span></span><br><span class="line"><span class="string">me passed :)</span></span><br><span class="line"><span class="string">you'</span>s total marks <span class="number">60</span></span><br><span class="line">you failed :(</span><br></pre></td></tr></table></figure>
<ul>
<li>解释：</li>
</ul>
<p><code>name</code>和 <code>marks</code>是变量，<code>name</code>用来存储学生的名称，<code>marks</code> 是个列表，用来存储输入的学生的成绩数据。<code>data</code> 是个字典，字典的键值对中，键指的是 <code>name</code>的值，值指的是 <code>marks</code> 的值。因此会使用 <code>data[name] = marks</code>将学生数据存入到<code>data</code>字典。<br>最后通过<code>for</code>循环遍历字典，<code>x</code>为学生的<code>name</code>，<code>y</code>为学生成绩列表 <code>marks</code>，<code>sum()</code>函数会将传入的列表进行加和。</p>
<h5 id="2-matrixmul-py"><a href="#2-matrixmul-py" class="headerlink" title="2.matrixmul.py"></a>2.matrixmul.py</h5><p>这个例子里我们计算两个矩阵的 Hadamard 乘积。要求输入矩阵的行/列数（在这里假设我们使用的是 n × n 的矩阵）。</p>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = int(input(<span class="string">"Enter the value of n: "</span>))</span><br><span class="line">print(<span class="string">"Enter values for the Matrix A"</span>)</span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    a.append([int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split()])</span><br><span class="line">print(<span class="string">"Enter values for the Matrix B"</span>)</span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    b.append([int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split()])</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    c.append([a[i][j] * b[i][j] <span class="keyword">for</span> j <span class="keyword">in</span> range(n)])</span><br><span class="line">print(<span class="string">"After matrix multiplication"</span>)</span><br><span class="line">print(<span class="string">"-"</span> * <span class="number">7</span> * n)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> c:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> x:</span><br><span class="line">        print(str(y).rjust(<span class="number">5</span>), end=<span class="string">' '</span>)</span><br><span class="line">    print()</span><br><span class="line">print(<span class="string">"-"</span> * <span class="number">7</span> * n)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Enter the value of n: <span class="number">3</span></span><br><span class="line">Enter values <span class="keyword">for</span> the Matrix A</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">Enter values <span class="keyword">for</span> the Matrix B</span><br><span class="line"><span class="number">9</span> <span class="number">8</span> <span class="number">7</span></span><br><span class="line"><span class="number">6</span> <span class="number">5</span> <span class="number">4</span> </span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line">After matrix multiplication</span><br><span class="line">---------------------</span><br><span class="line">    <span class="number">9</span>    <span class="number">16</span>    <span class="number">21</span> </span><br><span class="line">   <span class="number">24</span>    <span class="number">25</span>    <span class="number">24</span> </span><br><span class="line">   <span class="number">21</span>    <span class="number">16</span>     <span class="number">9</span> </span><br><span class="line">---------------------</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<ul>
<li>解释：</li>
</ul>
<p>这里我们使用了几次列表推导式。<code>[int(x) for x in input().split()]</code> 首先通过 <code>input()</code> 获得用户输入的字符串，再使用<code>split()</code>分割字符串得到一系列的数字字符串，然后用<code>int()</code> 从每个数字字符串创建对应的整数值。我们也使用了 <code>[a[i][j] * b[i][j] for j in range(n)]</code> 来得到矩阵乘积的每一行数据。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的字符串切片</title>
    <url>/2020/03/07/Python%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E7%89%87/</url>
    <content><![CDATA[<div class="note info no-icon"><p>本文中将记录如何用python对字符串进行切片</p></div>
<a id="more"></a>
<p><a href="https://blog.csdn.net/qq_39448151/article/details/74839613" target="_blank" rel="noopener">https://blog.csdn.net/qq_39448151/article/details/74839613</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>5.循环</title>
    <url>/2020/03/07/5-%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<div class="note info no-icon"><p>有些时候我们需要多次执行相同的任务，我们使用一个计数器来检查代码需要执行的次数。这个技术被称为循环。</p></div>
<a id="more"></a>
<h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul>
<li>循环语句</li>
<li>循环控制</li>
<li>print() 函数的 end 参数</li>
<li>列表<ul>
<li>索引</li>
<li>切片</li>
</ul>
</li>
<li>元组</li>
</ul>
<h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><div id="flowchart-0" class="flow-chart"></div>

<h5 id="1-循环语句"><a href="#1-循环语句" class="headerlink" title="1.循环语句"></a>1.循环语句</h5><div class="table-container">
<table>
<thead>
<tr>
<th>循环类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>while 循环</td>
<td>在给定的判断条件为 true 时执行循环体，否则退出循环体。</td>
</tr>
<tr>
<td>for 循环</td>
<td>重复执行语句</td>
</tr>
<tr>
<td>嵌套循环</td>
<td>你可以在while循环体中嵌套for循环</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>while循环<br>while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。其基本形式为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件(condition)：</span><br><span class="line">    执行语句(statements)……</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在Python中也可以使用<code>while…else</code>进行循环，当循环条件为<code>false</code>时执行<code>else</code>语句块，而当程序进行无线循环时可输入<code>Ctrl+C</code>终止。</p>
</blockquote>
<ul>
<li>for循环<br>for循环可以遍历任何序列的项目，如一个列表或者一个字符串。语法格式为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> iterating_var <span class="keyword">in</span> sequence:</span><br><span class="line">   statements(s)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通常有如下三种形式：</p>
<ul>
<li>输出字符串中的每一个字符</li>
<li>通过序列索引迭代</li>
<li>循环使用 else 语句</li>
</ul>
</blockquote>
<h5 id="2-循环控制语句"><a href="#2-循环控制语句" class="headerlink" title="2.循环控制语句"></a>2.循环控制语句</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">控制语句</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">break 语句</td>
<td style="text-align:left">在语句块执行过程中终止循环，并且跳出整个循环</td>
</tr>
<tr>
<td style="text-align:left">continue 语句</td>
<td style="text-align:left">在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。</td>
</tr>
<tr>
<td style="text-align:left">pass 语句</td>
<td style="text-align:left">pass是空语句，是为了保持程序结构的完整性。</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>break是结束整个循环而continue是结束本次循环继续下次循环。</p>
</blockquote>
<h5 id="3-列表"><a href="#3-列表" class="headerlink" title="3.列表"></a>3.列表</h5><p>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。列表的数据项不需要具有相同的类型。创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">list3 = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</span><br></pre></td></tr></table></figure></p>
<p>3.1常用列表操作:</p>
<ul>
<li>访问列表中的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> ]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"list1[0]: "</span>, list1[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"list2[1:5]: "</span>, list2[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt;list1[<span class="number">0</span>]:  physics</span><br><span class="line">  list2[<span class="number">1</span>:<span class="number">5</span>]:  [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>更新列表(<code>append()</code>)：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = []          <span class="comment">## 空列表</span></span><br><span class="line">list.append(<span class="string">'Google'</span>)   <span class="comment">## 使用 append() 添加元素</span></span><br><span class="line">list.append(<span class="string">'Runoob'</span>)</span><br><span class="line"><span class="keyword">print</span> (list)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="string">'Google'</span>, <span class="string">'Runoob'</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>替换列表元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br><span class="line">letters[<span class="number">2</span>:<span class="number">5</span>] = [<span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>]</span><br><span class="line">print(letters)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br><span class="line"></span><br><span class="line">letters[<span class="number">2</span>:<span class="number">3</span>]=[]</span><br><span class="line">print(letters)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>删除列表元素(<code>del</code>)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> list1</span><br><span class="line"><span class="keyword">del</span> list1[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"After deleting value at index 2 : "</span>)</span><br><span class="line">print(list1）</span><br><span class="line">      </span><br><span class="line">&gt;&gt; [<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">    After deleting value at index <span class="number">2</span> :</span><br><span class="line">   [<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">2000</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>Python列表截取</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L=[<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>]</span><br><span class="line">print(L[<span class="number">2</span>],L[<span class="number">-2</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt;Taobao Runoob</span><br></pre></td></tr></table></figure>
<p>3.2 列表所涉及的方法</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-list-append.html" target="_blank" rel="noopener">list.append(obj)</a> 在列表末尾添加新的对象</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-list-count.html" target="_blank" rel="noopener">list.count(obj)</a> 统计某个元素在列表中出现的次数</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-list-extend.html" target="_blank" rel="noopener">list.extend(seq)</a> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-list-index.html" target="_blank" rel="noopener">list.index(obj)</a> 从列表中找出某个值第一个匹配项的索引位置</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-list-insert.html" target="_blank" rel="noopener">list.insert(index, obj)</a> 将对象插入列表</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-list-pop.html" target="_blank" rel="noopener">list.pop([index=-1])</a> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-list-remove.html" target="_blank" rel="noopener">list.remove(obj)</a> 移除列表中某个值的第一个匹配项</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-list-reverse.html" target="_blank" rel="noopener">list.reverse()</a> 反向列表中元素</td>
</tr>
<tr>
<td style="text-align:left">9</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-list-sort.html" target="_blank" rel="noopener">list.sort(cmp=None, key=None, reverse=False)</a> 对原列表进行排序</td>
</tr>
</tbody>
</table>
</div>
<p>3.3 列表脚本操作符</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">Python 表达式</th>
<th style="text-align:left">结果</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">len([1, 2, 3])</td>
<td style="text-align:left">3</td>
<td style="text-align:left">长度</td>
</tr>
<tr>
<td style="text-align:left">[1, 2, 3] + [4, 5, 6]</td>
<td style="text-align:left">[1, 2, 3, 4, 5, 6]</td>
<td style="text-align:left">组合</td>
</tr>
<tr>
<td style="text-align:left">[‘Hi!’] * 4</td>
<td style="text-align:left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>
<td style="text-align:left">重复</td>
</tr>
<tr>
<td style="text-align:left">3 in [1, 2, 3]</td>
<td style="text-align:left">True</td>
<td style="text-align:left">元素是否存在于列表中</td>
</tr>
<tr>
<td style="text-align:left">for x in [1, 2, 3]: print x,</td>
<td style="text-align:left">1 2 3</td>
<td style="text-align:left">迭代</td>
</tr>
</tbody>
</table>
</div>
<p>3.4 列表有关函数</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">函数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-list-cmp.html" target="_blank" rel="noopener">cmp(list1, list2)</a> 比较两个列表的元素</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-list-len.html" target="_blank" rel="noopener">len(list)</a> 列表元素个数</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-list-max.html" target="_blank" rel="noopener">max(list)</a> 返回列表元素最大值</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-list-min.html" target="_blank" rel="noopener">min(list)</a> 返回列表元素最小值</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left"><a href="https://www.runoob.com/python/att-list-list.html" target="_blank" rel="noopener">list(seq)</a> 将元组转换为列表</td>
</tr>
</tbody>
</table>
</div>
<h5 id="4-切片"><a href="#4-切片" class="headerlink" title="4.切片"></a>4.切片</h5><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200307-1583587828918" alt="切片"></p>
<p>有关切片问题先看一段代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">print(num[<span class="number">1</span>:<span class="number">8</span>:<span class="number">1</span>])  <span class="comment">#越界输出</span></span><br><span class="line">print(num[<span class="number">1</span>:<span class="number">6</span>:<span class="number">2</span>])  <span class="comment">#步长变化输出</span></span><br><span class="line">print(num[<span class="number">-1</span>:<span class="number">-6</span>:<span class="number">-1</span>])  <span class="comment">#逆序输出</span></span><br><span class="line">print(num[<span class="number">-6</span>:<span class="number">-1</span>])     <span class="comment">#正序输出</span></span><br><span class="line">print(num[<span class="number">1</span>:<span class="number">-1</span>])      <span class="comment">#混合输出</span></span><br><span class="line">print(num[<span class="number">1</span>:])        <span class="comment">#索引为1之后的所有元素</span></span><br><span class="line">print(num[:<span class="number">-1</span>])        <span class="comment">#索引为-1之前的所有元素</span></span><br></pre></td></tr></table></figure></p>
<p>结果为：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">[<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure></p>
<p>如上面的代码与图片，终点是分清n维列表中的第一个元素索引为<code>0</code>，最后一个元素索引为<code>n-1</code>或<code>-1</code>，而对于起点和终点需要记住包括起点而不包括终点。</p>
<h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-for循环的常用形式"><a href="#1-for循环的常用形式" class="headerlink" title="1.for循环的常用形式"></a>1.for循环的常用形式</h5><ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从字符串中提取</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'python'</span>:</span><br><span class="line">    print(<span class="string">"The letter is:"</span>, i)</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> colors:</span><br><span class="line">    print(<span class="string">"The color is:"</span>, color)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过序列索引迭代</span></span><br><span class="line">cups = [<span class="string">'MoreLarge'</span>, <span class="string">'Large'</span>, <span class="string">'Small'</span>]</span><br><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> range(len(cups)):</span><br><span class="line">    print(<span class="string">"The "</span>, count + <span class="number">1</span>, <span class="string">" cup is:"</span>, cups[count])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环用 else 语句</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">20</span>):  <span class="comment"># 迭代 10 到 20 之间的数字</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num):  <span class="comment"># 根据因子迭代</span></span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:  <span class="comment"># 确定第一个因子</span></span><br><span class="line">            j = num / i  <span class="comment"># 计算第二个因子</span></span><br><span class="line">            print(<span class="string">'%d 等于 %d * %d'</span> % (num, i, j))</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># 跳出当前循环</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 循环的 else 部分</span></span><br><span class="line">        print(num, <span class="string">'是一个质数'</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从字符串中提取</span></span><br><span class="line">The letter <span class="keyword">is</span>: p</span><br><span class="line">The letter <span class="keyword">is</span>: y</span><br><span class="line">The letter <span class="keyword">is</span>: t</span><br><span class="line">The letter <span class="keyword">is</span>: h</span><br><span class="line">The letter <span class="keyword">is</span>: o</span><br><span class="line">The letter <span class="keyword">is</span>: n</span><br><span class="line">The color <span class="keyword">is</span>: red</span><br><span class="line">The color <span class="keyword">is</span>: blue</span><br><span class="line">The color <span class="keyword">is</span>: green</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过序列索引迭代</span></span><br><span class="line">The  <span class="number">1</span>  cup <span class="keyword">is</span>: MoreLarge</span><br><span class="line">The  <span class="number">2</span>  cup <span class="keyword">is</span>: Large</span><br><span class="line">The  <span class="number">3</span>  cup <span class="keyword">is</span>: Small</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环使用 else 语句</span></span><br><span class="line"><span class="number">10</span> 等于 <span class="number">2</span> * <span class="number">5</span></span><br><span class="line"><span class="number">11</span> 是一个质数</span><br><span class="line"><span class="number">12</span> 等于 <span class="number">2</span> * <span class="number">6</span></span><br><span class="line"><span class="number">13</span> 是一个质数</span><br><span class="line"><span class="number">14</span> 等于 <span class="number">2</span> * <span class="number">7</span></span><br><span class="line"><span class="number">15</span> 等于 <span class="number">3</span> * <span class="number">5</span></span><br><span class="line"><span class="number">16</span> 等于 <span class="number">2</span> * <span class="number">8</span></span><br><span class="line"><span class="number">17</span> 是一个质数</span><br><span class="line"><span class="number">18</span> 等于 <span class="number">2</span> * <span class="number">9</span></span><br><span class="line"><span class="number">19</span> 是一个质数</span><br></pre></td></tr></table></figure>
<h5 id="2-break与continue的使用"><a href="#2-break与continue的使用" class="headerlink" title="2.break与continue的使用"></a>2.break与continue的使用</h5><ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"此时的i为偶数,输出i的值至控制台"</span>, end=<span class="string">" "</span>)</span><br><span class="line">        print(<span class="string">"i="</span>, i)</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">5</span>:</span><br><span class="line">        print(<span class="string">"此时i为5结束整个循环"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"此时i为奇数且不等于5，直接进行下一次循环"</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">        print(<span class="string">"i="</span>, i)</span><br><span class="line">print(<span class="string">"循环已结束，此时i="</span>, i)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">此时i为奇数且不等于<span class="number">5</span>，直接进行下一次循环</span><br><span class="line">此时的i为偶数,输出i的值至控制台 i= <span class="number">2</span></span><br><span class="line">此时i为奇数且不等于<span class="number">5</span>，直接进行下一次循环</span><br><span class="line">此时的i为偶数,输出i的值至控制台 i= <span class="number">4</span></span><br><span class="line">此时i为<span class="number">5</span>结束整个循环</span><br><span class="line">循环已结束，此时i= <span class="number">5</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>不难看出，<code>continue</code>后的<code>print(&quot;i=&quot;, i)</code>并没有执行，而当执行<code>break</code>时程序直接结束了本层循环</p>
</blockquote>
<h5 id="3-双层循环中的break"><a href="#3-双层循环中的break" class="headerlink" title="3.双层循环中的break"></a>3.双层循环中的break</h5><ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"第一次循环语句共执行了："</span>, n, <span class="string">"次"</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第一次循环语句共执行了： <span class="number">1</span> 次</span><br><span class="line">第一次循环语句共执行了： <span class="number">2</span> 次</span><br></pre></td></tr></table></figure>
<blockquote>
<p>break只会结束掉本层循环</p>
</blockquote>
<h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><div class="note info no-icon"><h5 id="1-去除字符串首尾的空格"><a href="#1-去除字符串首尾的空格" class="headerlink" title="1.去除字符串首尾的空格"></a>1.去除字符串首尾的空格</h5></div>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_1 = str(input(<span class="string">"Please input a string:"</span>))</span><br><span class="line"><span class="keyword">while</span> str_1[:<span class="number">1</span>] == <span class="string">' '</span>:</span><br><span class="line">    str_1 = str_1[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">while</span> str_1[<span class="number">-1</span>:] == <span class="string">' '</span>:</span><br><span class="line">    str_1 = str_1[:<span class="number">-1</span>]</span><br><span class="line">print(str_1)</span><br></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Please input a string:    hello world   </span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></p>
<h5 id="2-分别使用while、for计算如下问题："><a href="#2-分别使用while、for计算如下问题：" class="headerlink" title="2.分别使用while、for计算如下问题："></a>2.分别使用while、for计算如下问题：</h5><div class="note info no-icon"><p>计算幂级数：</p>
<script type="math/tex; mode=display">
e^{x}=1+x+\frac{x^{2}}{2!}+\frac{x^{3}}{3!}+…+\frac{x^{n}}{n!}(0<n<1)</script><p>用户进行输入x,当满足：</p>
<script type="math/tex; mode=display">
\frac{x^{n}}{n!}<0.00001</script><p>时，停止累加且输出多项式之和以及n的值。</p></div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#for</span></span><br><span class="line">x = float(input(<span class="string">"Please input an integer:"</span>))</span><br><span class="line">result = <span class="number">1.0</span></span><br><span class="line">n = log = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    log *= x / n</span><br><span class="line">    result += log</span><br><span class="line">    <span class="keyword">if</span> log &lt; <span class="number">0.0001</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">"No of Times= &#123;&#125; and Sum= &#123;&#125;"</span>.format(n+<span class="number">1</span>, result))</span><br><span class="line"></span><br><span class="line"><span class="comment">#while</span></span><br><span class="line">X = float(input(<span class="string">"Enter the value of x: "</span>))</span><br><span class="line">N = term = num = <span class="number">1</span></span><br><span class="line">Result = <span class="number">1.0</span></span><br><span class="line"><span class="keyword">while</span> N &lt;= <span class="number">100</span>:</span><br><span class="line">    term *= X / N</span><br><span class="line">    Result += term</span><br><span class="line">    N += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> term &lt; <span class="number">0.0001</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">"No of Times= &#123;&#125; and Sum= &#123;&#125;"</span>.format(N, Result))</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Please input an integer:<span class="number">0.5</span></span><br><span class="line">No of Times= <span class="number">7</span> <span class="keyword">and</span> Sum= <span class="number">1.6487196180555554</span></span><br><span class="line">Enter the value of x: <span class="number">0.5</span></span><br><span class="line">No of Times= <span class="number">7</span> <span class="keyword">and</span> Sum= <span class="number">1.6487196180555554</span></span><br></pre></td></tr></table></figure>
<h5 id="3-乘法表"><a href="#3-乘法表" class="headerlink" title="3.乘法表"></a>3.乘法表</h5><div class="note info no-icon"><p>分别使用for、while打印十以内的乘法表</p></div>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        print(<span class="string">"&#123;:5d&#125;"</span>.format(i*j), end=<span class="string">" "</span>)</span><br><span class="line">    print()</span><br><span class="line">print(<span class="string">"*"</span>*<span class="number">65</span>)</span><br><span class="line"><span class="comment"># while</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">11</span>:</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt;= <span class="number">10</span>:</span><br><span class="line">        print(<span class="string">"&#123;:5d&#125;"</span>.format(i * n), end=<span class="string">' '</span>)</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    print()</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span>     <span class="number">9</span>    <span class="number">10</span> </span><br><span class="line">    <span class="number">2</span>     <span class="number">4</span>     <span class="number">6</span>     <span class="number">8</span>    <span class="number">10</span>    <span class="number">12</span>    <span class="number">14</span>    <span class="number">16</span>    <span class="number">18</span>    <span class="number">20</span> </span><br><span class="line">    <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>    <span class="number">12</span>    <span class="number">15</span>    <span class="number">18</span>    <span class="number">21</span>    <span class="number">24</span>    <span class="number">27</span>    <span class="number">30</span> </span><br><span class="line">    <span class="number">4</span>     <span class="number">8</span>    <span class="number">12</span>    <span class="number">16</span>    <span class="number">20</span>    <span class="number">24</span>    <span class="number">28</span>    <span class="number">32</span>    <span class="number">36</span>    <span class="number">40</span> </span><br><span class="line">    <span class="number">5</span>    <span class="number">10</span>    <span class="number">15</span>    <span class="number">20</span>    <span class="number">25</span>    <span class="number">30</span>    <span class="number">35</span>    <span class="number">40</span>    <span class="number">45</span>    <span class="number">50</span> </span><br><span class="line">    <span class="number">6</span>    <span class="number">12</span>    <span class="number">18</span>    <span class="number">24</span>    <span class="number">30</span>    <span class="number">36</span>    <span class="number">42</span>    <span class="number">48</span>    <span class="number">54</span>    <span class="number">60</span> </span><br><span class="line">    <span class="number">7</span>    <span class="number">14</span>    <span class="number">21</span>    <span class="number">28</span>    <span class="number">35</span>    <span class="number">42</span>    <span class="number">49</span>    <span class="number">56</span>    <span class="number">63</span>    <span class="number">70</span> </span><br><span class="line">    <span class="number">8</span>    <span class="number">16</span>    <span class="number">24</span>    <span class="number">32</span>    <span class="number">40</span>    <span class="number">48</span>    <span class="number">56</span>    <span class="number">64</span>    <span class="number">72</span>    <span class="number">80</span> </span><br><span class="line">    <span class="number">9</span>    <span class="number">18</span>    <span class="number">27</span>    <span class="number">36</span>    <span class="number">45</span>    <span class="number">54</span>    <span class="number">63</span>    <span class="number">72</span>    <span class="number">81</span>    <span class="number">90</span> </span><br><span class="line">   <span class="number">10</span>    <span class="number">20</span>    <span class="number">30</span>    <span class="number">40</span>    <span class="number">50</span>    <span class="number">60</span>    <span class="number">70</span>    <span class="number">80</span>    <span class="number">90</span>   <span class="number">100</span> </span><br><span class="line">*****************************************************************</span><br><span class="line">    <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span>     <span class="number">9</span>    <span class="number">10</span> </span><br><span class="line">    <span class="number">2</span>     <span class="number">4</span>     <span class="number">6</span>     <span class="number">8</span>    <span class="number">10</span>    <span class="number">12</span>    <span class="number">14</span>    <span class="number">16</span>    <span class="number">18</span>    <span class="number">20</span> </span><br><span class="line">    <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>    <span class="number">12</span>    <span class="number">15</span>    <span class="number">18</span>    <span class="number">21</span>    <span class="number">24</span>    <span class="number">27</span>    <span class="number">30</span> </span><br><span class="line">    <span class="number">4</span>     <span class="number">8</span>    <span class="number">12</span>    <span class="number">16</span>    <span class="number">20</span>    <span class="number">24</span>    <span class="number">28</span>    <span class="number">32</span>    <span class="number">36</span>    <span class="number">40</span> </span><br><span class="line">    <span class="number">5</span>    <span class="number">10</span>    <span class="number">15</span>    <span class="number">20</span>    <span class="number">25</span>    <span class="number">30</span>    <span class="number">35</span>    <span class="number">40</span>    <span class="number">45</span>    <span class="number">50</span> </span><br><span class="line">    <span class="number">6</span>    <span class="number">12</span>    <span class="number">18</span>    <span class="number">24</span>    <span class="number">30</span>    <span class="number">36</span>    <span class="number">42</span>    <span class="number">48</span>    <span class="number">54</span>    <span class="number">60</span> </span><br><span class="line">    <span class="number">7</span>    <span class="number">14</span>    <span class="number">21</span>    <span class="number">28</span>    <span class="number">35</span>    <span class="number">42</span>    <span class="number">49</span>    <span class="number">56</span>    <span class="number">63</span>    <span class="number">70</span> </span><br><span class="line">    <span class="number">8</span>    <span class="number">16</span>    <span class="number">24</span>    <span class="number">32</span>    <span class="number">40</span>    <span class="number">48</span>    <span class="number">56</span>    <span class="number">64</span>    <span class="number">72</span>    <span class="number">80</span> </span><br><span class="line">    <span class="number">9</span>    <span class="number">18</span>    <span class="number">27</span>    <span class="number">36</span>    <span class="number">45</span>    <span class="number">54</span>    <span class="number">63</span>    <span class="number">72</span>    <span class="number">81</span>    <span class="number">90</span> </span><br><span class="line">   <span class="number">10</span>    <span class="number">20</span>    <span class="number">30</span>    <span class="number">40</span>    <span class="number">50</span>    <span class="number">60</span>    <span class="number">70</span>    <span class="number">80</span>    <span class="number">90</span>   <span class="number">100</span></span><br></pre></td></tr></table></figure>
<h4 id="4-斐波那契（Fibonacci）数列"><a href="#4-斐波那契（Fibonacci）数列" class="headerlink" title="4.斐波那契（Fibonacci）数列"></a>4.斐波那契（Fibonacci）数列</h4><div class="note info no-icon"><p>输入一个整数n,接下来输出斐波那契亚数列的前n项。<br><strong>注：斐波那契亚数列前两项都为1，第三项往后均为该项前两项之和。</strong></p></div>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Num_1 = int(input(<span class="string">"请输入一个整数:"</span>))</span><br><span class="line">a = b = <span class="number">1</span></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> Num_1 &lt; <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(Num_1):</span><br><span class="line">        print(<span class="string">"斐波那契亚数列第"</span>, j+<span class="number">1</span>, <span class="string">"项是:"</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> Num_1 &gt;= <span class="number">3</span> <span class="keyword">and</span> c &lt; <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">"斐波那契亚数列第"</span>, c, <span class="string">"项是:"</span>, <span class="number">1</span>)</span><br><span class="line">    c += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(Num_1 - <span class="number">2</span>):</span><br><span class="line">    a, b = b, a + b</span><br><span class="line">    print(<span class="string">"斐波那契亚数列第"</span>, i + <span class="number">3</span>, <span class="string">"项是:"</span>, b)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请输入一个整数:<span class="number">10</span></span><br><span class="line">斐波那契亚数列第 <span class="number">1</span> 项是: <span class="number">1</span></span><br><span class="line">斐波那契亚数列第 <span class="number">2</span> 项是: <span class="number">1</span></span><br><span class="line">斐波那契亚数列第 <span class="number">3</span> 项是: <span class="number">2</span></span><br><span class="line">斐波那契亚数列第 <span class="number">4</span> 项是: <span class="number">3</span></span><br><span class="line">斐波那契亚数列第 <span class="number">5</span> 项是: <span class="number">5</span></span><br><span class="line">斐波那契亚数列第 <span class="number">6</span> 项是: <span class="number">8</span></span><br><span class="line">斐波那契亚数列第 <span class="number">7</span> 项是: <span class="number">13</span></span><br><span class="line">斐波那契亚数列第 <span class="number">8</span> 项是: <span class="number">21</span></span><br><span class="line">斐波那契亚数列第 <span class="number">9</span> 项是: <span class="number">34</span></span><br><span class="line">斐波那契亚数列第 <span class="number">10</span> 项是: <span class="number">55</span></span><br></pre></td></tr></table></figure>
<h4 id="5-棍子游戏"><a href="#5-棍子游戏" class="headerlink" title="5.棍子游戏"></a>5.棍子游戏</h4><div class="note info no-icon"><p>这是一个非常简单的游戏。这里有 21 根棍子，首先用户选 1 到 4 根棍子，然后电脑选 1到 4 根棍子。谁选到最后一根棍子谁就输。判断一下用户有赢的机会吗？如果没有的话，如何修改游戏规则可以使用户有赢的机会呢？特别说明：用户和电脑一次选的棍子总数只能是5。</p></div>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sticks = <span class="number">21</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"There are 21 sticks, you can take 1-4 number of sticks at a time."</span>)</span><br><span class="line">print(<span class="string">"Whoever will take the last stick will loose"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">"Sticks left: "</span> , sticks)</span><br><span class="line">    <span class="keyword">if</span> sticks == <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">"You took the last stick, you loose"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    sticks_taken = int(input(<span class="string">"Take sticks(1-4):"</span>))</span><br><span class="line">    <span class="keyword">if</span> sticks_taken &gt;= <span class="number">5</span> <span class="keyword">or</span> sticks_taken &lt;= <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"Wrong choice"</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(<span class="string">"Computer took: "</span> , (<span class="number">5</span> - sticks_taken) , <span class="string">"\n"</span>)</span><br><span class="line">    sticks -= <span class="number">5</span></span><br></pre></td></tr></table></figure>
<ul>
<li>分析：<br>本题目中在题目中的条件下，先手的人必输，因为后手的人只需凑够（21-1）的因数5即可，最后1根一定是先手的人拿到。<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始语句
in=>inputoutput: 输入值
e=>end: 下一程序块
op=>operation: 条件代码
cond=>condition: 条件

st->in->cond
cond(yes)->op
cond(no)->e
op->in</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>在HEXO中部署流程图以及常用的流程图语法</title>
    <url>/2020/03/07/%E5%9C%A8HEXO%E4%B8%AD%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B%E5%9B%BE%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<div class="note info no-icon"><p>本文中将给出<code>mermaid</code>和<code>flowchart</code>在hexo上的配置以及基础语法<br>插件地址：<a href="https://github.com/mermaid-js/mermaid" target="_blank" rel="noopener">mermaid</a><br>参考文章：<br><a href="https://blog.csdn.net/qq_36347375/article/details/90478335" target="_blank" rel="noopener">Hexo引入Mermaid流程图和MathJax数学公式</a><br><a href="https://yelog.org/2019/11/12/3-hexo-support-mermaid/" target="_blank" rel="noopener">hexo支持mermaid图表</a><br><a href="https://blog.csdn.net/wzh0709zml/article/details/103310405" target="_blank" rel="noopener">hexo优化：Markdown语法引入Flowchart和Mermaid流程图</a><br>官方使用文档：<a href="http://mermaid-js.github.io/mermaid/#/flowchart" target="_blank" rel="noopener">使用文档</a></p></div>
<a id="more"></a>
<div id="flowchart-0" class="flow-chart"></div>





<pre class="mermaid">graph TD
A[Hard] -->|Text| B(Round)
B --> C{Decision}
C -->|One| D[Result 1]
C -->|Two| E[Result 2]</pre>

<pre class="mermaid">pie
    title Key elements in Product X
    "Calcium" : 42.96
    "Potassium" : 50.05
    "Magnesium" : 10.01
    "Iron" :  5</pre>

<pre class="mermaid">gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d</pre>

<pre class="mermaid">graph LR
    A-->B
    B-->C
    C-->D
    D-->E
    E-->F
    F-->M
    M-->AD
    AD-->Q
    Q-->T
    T-->R
    R-->S
    S-->Z</pre>

<pre class="mermaid">stateDiagram
[*] --> Still
Still --> [*]
Still --> Moving
Moving --> Still
Moving --> Crash
Crash --> [*]</pre>

<pre class="mermaid">pie
"Dogs" : 386
"Cats" : 85
"Rats" : 15</pre>

<p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start|past:>http://www.google.com[blank]
e=>end: End:>http://www.google.com
op1=>operation: My Operation|past
op2=>operation: Stuff|current
sub1=>subroutine: My Subroutine|invalid
cond=>condition: Yes
or No?|approved:>http://www.google.com
c2=>condition: Good idea|rejected
io=>inputoutput: catch something...|request

st->op1(right)->cond
cond(yes, right)->c2
cond(no)->sub1(left)->op1
c2(yes)->io->e
c2(no)->op2->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>4.控制流if-else</title>
    <url>/2020/03/06/4-%E6%8E%A7%E5%88%B6%E6%B5%81if-else/</url>
    <content><![CDATA[<div class="note info no-icon"><p>通过 <code>if-else</code> 语句来做决定程序运行的流程</p></div>
<a id="more"></a>
<h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul>
<li>if 语句</li>
<li>else 语句</li>
<li>真值检测</li>
</ul>
<h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><div id="flowchart-0" class="flow-chart"></div>

<h5 id="1-if-elif-else基本语法"><a href="#1-if-elif-else基本语法" class="headerlink" title="1.if-elif-else基本语法"></a>1.<code>if-elif-else</code>基本语法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">   执行语句<span class="number">1</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">2</span>:</span><br><span class="line">     执行语句<span class="number">2</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">3</span>:</span><br><span class="line">     执行语句<span class="number">3</span>……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     执行语句<span class="number">4</span>……</span><br></pre></td></tr></table></figure>
<h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-示例程序"><a href="#1-示例程序" class="headerlink" title="1.示例程序"></a>1.示例程序</h5><ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = int(input(<span class="string">"Please input an integer:"</span>))</span><br><span class="line">b = int(input(<span class="string">"Please input an integer:"</span>))</span><br><span class="line">c = int(input(<span class="string">"Please input an integer:"</span>))</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line">    print(<span class="string">"a is true"</span>)</span><br><span class="line"><span class="keyword">elif</span> b:</span><br><span class="line">    print(<span class="string">"b is true"</span>)</span><br><span class="line"><span class="keyword">elif</span> c:</span><br><span class="line">    print(<span class="string">"c is true"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"All false"</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>a</th>
<th>b</th>
<th>c</th>
<th>print</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td><strong>all false</strong></td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td><strong>c is ture</strong></td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
<td><strong>b is true</strong></td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
<td><strong>b is true</strong></td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td><strong>a is true</strong></td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td><strong>a is true</strong></td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td><strong>a is true</strong></td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td><strong>a is true</strong></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>可以看出，在控制流<code>if-else</code>中每块语句都是独立的，按照代码顺序执行，出现<code>true</code>程序块结束，出现<code>false</code>则继续进行下一条语句，如果一直是<code>false</code>到程序块末尾之后执行下一个程序块。（不为零的任何值都为真）</p>
</blockquote>
<h5 id="2-真值检测"><a href="#2-真值检测" class="headerlink" title="2.真值检测"></a>2.真值检测</h5><p>通常我们使用：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><br>而无需使用：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> x == <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p>
<h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><h5 id="1-员工工资问题"><a href="#1-员工工资问题" class="headerlink" title="1.员工工资问题"></a>1.员工工资问题</h5><div class="note info no-icon"><p>一企业进行年终奖发放，员工底薪5000元，员工年贡献利润在10000到20000之间的抽成10%，贡献利润在20000以上的抽成20%，其余情况不抽成，你需要输入员工利润X，程序计算应发年终奖并输出。（结果精确到分）</p></div>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = float(input(<span class="string">"Please input the profit:"</span>))</span><br><span class="line"><span class="keyword">if</span> X &gt; <span class="number">20000</span>:</span><br><span class="line">    print(<span class="string">"The awards is:"</span>, <span class="string">"&#123;:.2f&#125;"</span>.format(<span class="number">5000</span> + X * <span class="number">0.2</span>))</span><br><span class="line"><span class="keyword">elif</span> X &lt; <span class="number">1000</span>:</span><br><span class="line">    print(<span class="string">"The awards is:"</span>, <span class="string">"&#123;:.2f&#125;"</span>.format(<span class="number">5000</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"The awards is:"</span>, <span class="string">"&#123;:.2f&#125;"</span>.format(<span class="number">5000</span> + X * <span class="number">0.1</span>))</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Please input the profit:<span class="number">100000</span></span><br><span class="line">The awards <span class="keyword">is</span>: <span class="number">25000.00</span></span><br><span class="line"></span><br><span class="line">Please input the profit:<span class="number">12000</span></span><br><span class="line">The awards <span class="keyword">is</span>: <span class="number">6200.00</span></span><br><span class="line"></span><br><span class="line">Please input the profit:<span class="number">200</span></span><br><span class="line">The awards <span class="keyword">is</span>: <span class="number">5000.00</span></span><br></pre></td></tr></table></figure>
<p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始语句
e=>end: 下一程序块
op=>operation: 条件代码
cond=>condition: 条件

st->cond
cond(yes)->op
cond(no)->op
op->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中Math模块常用函数</title>
    <url>/2020/03/06/Python%E4%B8%ADMath%E6%A8%A1%E5%9D%97%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<div class="note info no-icon"><p>Python中Math模块的函数使用</p>
<p>来源：<a href="http://shouce.jb51.net/python3.8/library/math.html" target="_blank" rel="noopener">http://shouce.jb51.net/python3.8/library/math.html</a></p></div>
<a id="more"></a>
<div class="table-container">
<table>
<thead>
<tr>
<th>函数名</th>
<th>函数内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>math.ceil(x)</td>
<td>返回 x 的上限，即大于或者等于 x 的最小整数</td>
</tr>
<tr>
<td>math.comb(n, k)</td>
<td>返回不重复且无顺序地从 n 项中选择 k 项的方式总数</td>
</tr>
<tr>
<td>math.copysign(x, y)</td>
<td>返回一个基于 x 的绝对值和 y 的符号的浮点数</td>
</tr>
<tr>
<td>math.fabs(x)</td>
<td>返回 x 的绝对值</td>
</tr>
<tr>
<td>math.factorial(x)</td>
<td>以一个整数返回 x 的阶乘</td>
</tr>
<tr>
<td>math.floor(x)</td>
<td>返回 x 的向下取整，小于或等于 x 的最大整数</td>
</tr>
<tr>
<td>math.gcd(a, b)</td>
<td>返回整数 a 和 b 的最大公约数</td>
</tr>
<tr>
<td>math.isfinite(x)</td>
<td>如果 x 既不是无穷大也不是NaN，则返回 True ，否则返回 False</td>
</tr>
<tr>
<td>math.isinf(x)</td>
<td>如果 x 是正或负无穷大，则返回 True ，否则返回 False</td>
</tr>
<tr>
<td>math.isnan(x)</td>
<td>如果 x 是 NaN（不是数字），则返回 True ，否则返回 False</td>
</tr>
<tr>
<td>math.isqrt(n)</td>
<td>返回非负整数 n 的整数平方根</td>
</tr>
<tr>
<td>math.modf(x)</td>
<td>返回 x 的小数和整数部分，以数组的形式储存</td>
</tr>
<tr>
<td>math.perm(n, k)</td>
<td>返回不重复且无顺序地从 n 项中选择 k 项的方式总数</td>
</tr>
<tr>
<td>math.prod(iterable, *, start=1)</td>
<td>计算输入的 iterable 中所有元素的积， 积的默认 start 值为 1</td>
</tr>
<tr>
<td>math.exp(x)</td>
<td>返回 e 次 x 幂</td>
</tr>
<tr>
<td>math.expm1(x)</td>
<td>返回 e 的 x 次幂，减1</td>
</tr>
<tr>
<td>math.log(x[, base])</td>
<td>使用一个参数，返回 x 的自然对数（底为 e ） ，使用两个参数，返回给定的 base 的对数 x ，计算为 log(x)/log(base)</td>
</tr>
<tr>
<td>math.log1p(x)</td>
<td>返回 1+x (base e) 的自然对数</td>
</tr>
<tr>
<td>math.log2(x)</td>
<td>返回 x 以2为底的对数，这通常比 log(x, 2) 更准确</td>
</tr>
<tr>
<td>math.pow(x, y)</td>
<td>返回 x 的 y 次幂</td>
</tr>
<tr>
<td>math.sqrt(x)</td>
<td>返回 x 的平方根</td>
</tr>
<tr>
<td>math.acos(x)</td>
<td>以弧度为单位返回 x 的反余弦值</td>
</tr>
<tr>
<td>math.asin(x)</td>
<td>以弧度为单位返回 x 的反正弦值</td>
</tr>
<tr>
<td>math.atan(x)</td>
<td>以弧度为单位返回 x 的反正切值</td>
</tr>
<tr>
<td>math.atan2(y, x)</td>
<td>以弧度为单位返回 atan(y / x)</td>
</tr>
<tr>
<td>math.cos(x)</td>
<td>返回 x 弧度的余弦值</td>
</tr>
<tr>
<td>math.dist(p, q)</td>
<td>返回 p 与 q 两点之间的欧几里得距离，以一个坐标序列（或可迭代对象）的形式给出。 两个点必须具有相同的维度</td>
</tr>
<tr>
<td>math.sin(x)</td>
<td>返回 x 弧度的正弦值</td>
</tr>
<tr>
<td>math.tan(x)</td>
<td>返回 x 弧度的正切值</td>
</tr>
<tr>
<td>math.degrees(x)</td>
<td>将角度 x 从弧度转换为度数</td>
</tr>
<tr>
<td>math.radians(x)</td>
<td>将角度 x 从度数转换为弧度</td>
</tr>
<tr>
<td>math.acosh(x)</td>
<td>返回 x 的反双曲余弦值</td>
</tr>
<tr>
<td>math.asinh(x)</td>
<td>返回 x 的反双曲正弦值</td>
</tr>
<tr>
<td>math.atanh(x)</td>
<td>返回 x 的反双曲正切值</td>
</tr>
<tr>
<td>math.cosh(x)</td>
<td>返回 x 的双曲余弦值</td>
</tr>
<tr>
<td>math.sinh(x)</td>
<td>返回 x 的双曲正弦值</td>
</tr>
<tr>
<td>math.tanh(x)</td>
<td>返回 x 的双曲正切值</td>
</tr>
<tr>
<td>math.gamma(x)</td>
<td>返回 x 处的 伽马函数 值。</td>
</tr>
<tr>
<td>math.lgamma(x)</td>
<td>返回Gamma函数在 x 绝对值的自然对数。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="常数"><a href="#常数" class="headerlink" title="常数"></a>常数</h2><div class="table-container">
<table>
<thead>
<tr>
<th>代码</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>math.pi</td>
<td>数学常数 π = 3.141592…，精确到可用精度。</td>
</tr>
<tr>
<td>math.e</td>
<td>数学常数 e = 2.718281…，精确到可用精度。</td>
</tr>
<tr>
<td>math.tau</td>
<td>数学常数 τ = 6.283185…，精确到可用精度。Tau 是一个圆周常数，等于 2π，圆的周长与半径之比。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><div class="table-container">
<table>
<thead>
<tr>
<th>代码</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>math.inf</td>
<td>浮点正无穷大。</td>
</tr>
<tr>
<td>math.nan</td>
<td>浮点“非数字”（NaN）值。</td>
</tr>
</tbody>
</table>
</div>
<p>来源：<a href="http://shouce.jb51.net/python3.8/library/math.html" target="_blank" rel="noopener">http://shouce.jb51.net/python3.8/library/math.html</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>博客中Latex的使用</title>
    <url>/2020/03/06/%E5%8D%9A%E5%AE%A2%E4%B8%ADLatex%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<div class="note info no-icon"><p>本文内容为：如何在Hexo中渲染公式、Latex基本语法</p></div>
<a id="more"></a>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>3.运算符和表达式</title>
    <url>/2020/02/29/3-%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<div class="note info no-icon"><p>本节实验中将学习运算符和表达式的基本用法。</p></div>
<a id="more"></a>
<h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul>
<li>关系/逻辑运算</li>
<li>表达式</li>
<li>类型转换</li>
</ul>
<h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><h5 id="1-算术运算"><a href="#1-算术运算" class="headerlink" title="1.算术运算"></a>1.算术运算</h5><ul>
<li><p>算术运算符包括<code>+</code>（加）,<code>-</code>（减）,<code>*</code>（乘）,<code>/</code>（除）,<code>%</code>（取余）,<code>**</code>（求幂）,<code>//</code>（向下取整）</p>
</li>
<li><p>例如：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="number">2</span>, <span class="number">9</span></span><br><span class="line">print(<span class="string">"a + b ="</span>, a + b)</span><br><span class="line">print(<span class="string">"a - b ="</span>, a - b)</span><br><span class="line">print(<span class="string">"a * b ="</span>, a * b)</span><br><span class="line">print(<span class="string">"b / a ="</span>, b / a)</span><br><span class="line">print(<span class="string">"b % a ="</span>, b % a)</span><br><span class="line">print(<span class="string">"b ** a ="</span>, b ** a)</span><br><span class="line">print(<span class="string">"b // a ="</span>, b // a)</span><br><span class="line">print(<span class="string">"-b // a ="</span>, -b // a)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a + b = <span class="number">11</span></span><br><span class="line">a - b = <span class="number">-7</span></span><br><span class="line">a * b = <span class="number">18</span></span><br><span class="line">b / a = <span class="number">4.5</span></span><br><span class="line">b % a = <span class="number">1</span></span><br><span class="line">b ** a = <span class="number">81</span></span><br><span class="line">b // a = <span class="number">4</span></span><br><span class="line">-b // a = <span class="number">-5</span></span><br></pre></td></tr></table></figure>
<ul>
<li>有关解释如下表：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>操作</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>求幂</strong></td>
<td><code>b**a</code>即求<code>b</code>的<code>a</code>次方即<code>9</code>的<code>2</code>次方为81</td>
</tr>
<tr>
<td><strong>取余</strong></td>
<td>整除之后得到的余数，例如<code>9/2=4···1</code>则取余的结果即为1</td>
</tr>
<tr>
<td><strong>向下取整</strong></td>
<td>即选取比进行除法运算得到的数字小且最接近该数字的整数，代码中<code>9/2=4.5</code>因此选择4，而<code>-9/2=-4.5</code>因此选择-5</td>
</tr>
</tbody>
</table>
</div>
<h5 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2.比较运算符"></a>2.比较运算符</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>==</code></td>
<td style="text-align:left">等于 - 比较对象是否相等</td>
<td style="text-align:left">(a == b) 返回 False。</td>
</tr>
<tr>
<td style="text-align:left"><code>!=</code></td>
<td style="text-align:left">不等于 - 比较两个对象是否不相等</td>
<td style="text-align:left">(a != b) 返回 true.</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;</code></td>
<td style="text-align:left">大于 - 返回x是否大于y</td>
<td style="text-align:left">(a &gt; b) 返回 False。</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;</code></td>
<td style="text-align:left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</td>
<td style="text-align:left">(a &lt; b) 返回 true。</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;=</code></td>
<td style="text-align:left">大于等于 - 返回x是否大于等于y。</td>
<td style="text-align:left">(a &gt;= b) 返回 False。</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;=</code></td>
<td style="text-align:left">小于等于 - 返回x是否小于等于y。</td>
<td style="text-align:left">(a &lt;= b) 返回 true。</td>
</tr>
</tbody>
</table>
</div>
<h5 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3.赋值运算符"></a>3.赋值运算符</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>=</code></td>
<td style="text-align:left">简单的赋值运算符</td>
<td style="text-align:left">c = a + b 将 a + b 的运算结果赋值为 c</td>
</tr>
<tr>
<td style="text-align:left"><code>+=</code></td>
<td style="text-align:left">加法赋值运算符</td>
<td style="text-align:left">c += a 等效于 c = c + a</td>
</tr>
<tr>
<td style="text-align:left"><code>-=</code></td>
<td style="text-align:left">减法赋值运算符</td>
<td style="text-align:left">c -= a 等效于 c = c - a</td>
</tr>
<tr>
<td style="text-align:left"><code>*=</code></td>
<td style="text-align:left">乘法赋值运算符</td>
<td style="text-align:left">c <em>= a 等效于 c = c </em> a</td>
</tr>
<tr>
<td style="text-align:left"><code>/=</code></td>
<td style="text-align:left">除法赋值运算符</td>
<td style="text-align:left">c /= a 等效于 c = c / a</td>
</tr>
<tr>
<td style="text-align:left"><code>%=</code></td>
<td style="text-align:left">取模赋值运算符</td>
<td style="text-align:left">c %= a 等效于 c = c % a</td>
</tr>
<tr>
<td style="text-align:left"><code>**=</code></td>
<td style="text-align:left">幂赋值运算符</td>
<td style="text-align:left">c <code>**=</code> a 等效于 c = c <code>**</code> a</td>
</tr>
<tr>
<td style="text-align:left"><code>//=</code></td>
<td style="text-align:left">取整除赋值运算符</td>
<td style="text-align:left">c //= a 等效于 c = c // a</td>
</tr>
</tbody>
</table>
</div>
<h5 id="4-位运算符"><a href="#4-位运算符" class="headerlink" title="4.位运算符"></a>4.位运算符</h5><div class="table-container">
<table>
<thead>
<tr>
<th>操作</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>按位与运算符<code>&amp;</code></strong></td>
<td>参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>
</tr>
<tr>
<td><strong>按位或运算符<code>｜</code></strong></td>
<td>只要对应的二个二进位有一个为1时，结果位就为1。</td>
</tr>
<tr>
<td><strong>按位异或运算符<code>^</code></strong></td>
<td>当两对应的二进位相异时，结果为1</td>
</tr>
<tr>
<td><strong>按位取反运算符<code>~</code></strong></td>
<td>对数据的每个二进制位取反,即把1变为0,把0变为1 。<strong><code>~x</code></strong> 类似于 <strong><code>-x-1</code></strong></td>
</tr>
<tr>
<td><strong>左移动运算符<code>&lt;&lt;</code></strong></td>
<td>运算数的各二进位全部左移若干位，由 <strong><code>&lt;&lt;</code></strong> 右边的数字指定了移动的位数，高位丢弃，低位补0</td>
</tr>
<tr>
<td><strong>右移动运算符<code>&gt;&gt;</code></strong></td>
<td>把<code>&gt;&gt;</code>左边的运算数的各二进位全部右移若干位，<strong><code>&gt;&gt;</code></strong> 右边的数字指定了移动的位数</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>例如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span>         <span class="comment"># 10 = 0000 1010</span></span><br><span class="line">b = <span class="number">80</span>          <span class="comment"># 80 = 0101 0000</span></span><br><span class="line">c = a &amp; b       <span class="comment"># 00 = 0000 0000</span></span><br><span class="line">print(<span class="string">"a&amp;b value is :"</span>, c)</span><br><span class="line">d = a | b       <span class="comment"># 90 = 0101 1010</span></span><br><span class="line">print(<span class="string">"a|b value is :"</span>, d)</span><br><span class="line">e = a ^ b       <span class="comment"># 90 = 0101 1010</span></span><br><span class="line">print(<span class="string">"a^b value is :"</span>, e)</span><br><span class="line">f = ~ a         <span class="comment"># -11 = 1000 1011</span></span><br><span class="line">print(<span class="string">"~a value is :"</span>, f)</span><br><span class="line">g = a &lt;&lt; <span class="number">2</span>      <span class="comment"># 40 = 0010 1000</span></span><br><span class="line">print(<span class="string">"a&lt;&lt;2 value is :"</span>, g)</span><br><span class="line">h = a &gt;&gt; <span class="number">2</span>      <span class="comment"># 2 = 0000 0010</span></span><br><span class="line">print(<span class="string">"a&gt;&gt;2 value is :"</span>, h)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a&amp;b value <span class="keyword">is</span> : <span class="number">0</span></span><br><span class="line">a|b value <span class="keyword">is</span> : <span class="number">90</span></span><br><span class="line">a^b value <span class="keyword">is</span> : <span class="number">90</span></span><br><span class="line">~a value <span class="keyword">is</span> : <span class="number">-11</span></span><br><span class="line">a&lt;&lt;<span class="number">2</span> value <span class="keyword">is</span> : <span class="number">40</span></span><br><span class="line">a&gt;&gt;<span class="number">2</span> value <span class="keyword">is</span> : <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h5 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">逻辑表达式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>x and y</strong></td>
<td style="text-align:left">布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td>
</tr>
<tr>
<td style="text-align:left"><strong>x or y</strong></td>
<td style="text-align:left">布尔”或” - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。</td>
</tr>
<tr>
<td style="text-align:left"><strong>not x</strong></td>
<td style="text-align:left">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>例如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"a and b ="</span>, a <span class="keyword">and</span> b)</span><br><span class="line">print(<span class="string">"c and b ="</span>, c <span class="keyword">and</span> b)</span><br><span class="line">print(<span class="string">"a or b ="</span>, a <span class="keyword">or</span> b)</span><br><span class="line">print(<span class="string">"c or b ="</span>, c <span class="keyword">or</span> b)</span><br><span class="line">print(<span class="string">"not a ="</span>, <span class="keyword">not</span> a)</span><br><span class="line">print(<span class="string">"not c ="</span>, <span class="keyword">not</span> c)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a <span class="keyword">and</span> b = <span class="number">20</span></span><br><span class="line">c <span class="keyword">and</span> b = <span class="number">0</span></span><br><span class="line">a <span class="keyword">or</span> b = <span class="number">10</span></span><br><span class="line">c <span class="keyword">or</span> b = <span class="number">20</span></span><br><span class="line"><span class="keyword">not</span> a = <span class="literal">False</span></span><br><span class="line"><span class="keyword">not</span> c = <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h5 id="6-成员运算符"><a href="#6-成员运算符" class="headerlink" title="6.成员运算符"></a>6.成员运算符</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"><strong>运算符</strong></th>
<th style="text-align:left"><strong>描述</strong></th>
<th style="text-align:left"><strong>实例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>in</strong></td>
<td style="text-align:left">如果在指定的序列中找到值返回 True，否则返回 False。</td>
<td style="text-align:left">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td>
</tr>
<tr>
<td style="text-align:left"><strong>not in</strong></td>
<td style="text-align:left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td>
<td style="text-align:left">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>例如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">"hello world"</span></span><br><span class="line">b = <span class="string">"llo"</span></span><br><span class="line">c = <span class="string">"oll"</span></span><br><span class="line">print(<span class="string">"b in a is :"</span>, b <span class="keyword">in</span> a)</span><br><span class="line">print(<span class="string">"b not in a is :"</span>, b <span class="keyword">not</span> <span class="keyword">in</span> a)</span><br><span class="line">print(<span class="string">"c in a is :"</span>, c <span class="keyword">in</span> a)</span><br><span class="line">print(<span class="string">"c not in a is :"</span>, c <span class="keyword">not</span> <span class="keyword">in</span> a)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b <span class="keyword">in</span> a <span class="keyword">is</span> : <span class="literal">True</span></span><br><span class="line">b <span class="keyword">not</span> <span class="keyword">in</span> a <span class="keyword">is</span> : <span class="literal">False</span></span><br><span class="line">c <span class="keyword">in</span> a <span class="keyword">is</span> : <span class="literal">False</span></span><br><span class="line">c <span class="keyword">not</span> <span class="keyword">in</span> a <span class="keyword">is</span> : <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h5 id="7-身份运算符"><a href="#7-身份运算符" class="headerlink" title="7.身份运算符"></a>7.身份运算符</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>is</strong></td>
<td style="text-align:left">is 是判断两个标识符是不是引用自一个对象</td>
<td style="text-align:left"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td>
</tr>
<tr>
<td style="text-align:left"><strong>is not</strong></td>
<td style="text-align:left">is not 是判断两个标识符是不是引用自不同对象</td>
<td style="text-align:left"><strong>x is not y</strong> ， 类似 <strong>id(a) != id(b)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>例如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">list2 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">list3 = list1</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Please judge the following proposition:"</span>)</span><br><span class="line">print(<span class="string">"list1 is list2 :"</span>, list2 <span class="keyword">is</span> list1)</span><br><span class="line">print(<span class="string">"list3 is list1 :"</span>, list3 <span class="keyword">is</span> list1)</span><br><span class="line">print(<span class="string">"list1 is not list2 :"</span>, list2 <span class="keyword">is</span> <span class="keyword">not</span> list1)</span><br><span class="line">print(<span class="string">"list3 is not list1 :"</span>, list3 <span class="keyword">is</span> <span class="keyword">not</span> list1)</span><br><span class="line">print(<span class="string">"list1 == list2 :"</span>, list2 == list1)</span><br><span class="line">print(<span class="string">"list3 == list1 :"</span>, list3 == list1)</span><br><span class="line">print(<span class="string">"list1 != list2 :"</span>, list2 != list1)</span><br><span class="line">print(<span class="string">"list3 != list1 :"</span>, list3 != list1)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果是：<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Please judge the following proposition:</span></span><br><span class="line"><span class="attr">list1 is list2 :</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">list3 is list1 :</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">list1 is not list2 :</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">list3 is not list1 :</span> <span class="literal">False</span></span><br><span class="line"><span class="string">list1</span> <span class="string">==</span> <span class="attr">list2 :</span> <span class="literal">True</span></span><br><span class="line"><span class="string">list3</span> <span class="string">==</span> <span class="attr">list1 :</span> <span class="literal">True</span></span><br><span class="line"><span class="string">list1</span> <span class="string">!=</span> <span class="attr">list2 :</span> <span class="literal">False</span></span><br><span class="line"><span class="string">list3</span> <span class="string">!=</span> <span class="attr">list1 :</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><strong>is 与 == 区别:</strong>is 用于判断两个变量引用对象是否为同一个(同一块内存空间)， == 用于判断引用变量的值是否相等。</p>
</blockquote>
<h5 id="8-运算符优先级"><a href="#8-运算符优先级" class="headerlink" title="8.运算符优先级"></a>8.运算符优先级</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>**</strong></td>
<td style="text-align:left">指数 (最高优先级)</td>
</tr>
<tr>
<td style="text-align:left"><strong>~ + -</strong></td>
<td style="text-align:left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>
</tr>
<tr>
<td style="text-align:left"><strong>* / % //</strong></td>
<td style="text-align:left">乘，除，取模和取整除</td>
</tr>
<tr>
<td style="text-align:left"><strong>+ -</strong></td>
<td style="text-align:left">加法减法</td>
</tr>
<tr>
<td style="text-align:left"><strong>&gt;&gt; &lt;&lt;</strong></td>
<td style="text-align:left">右移，左移运算符</td>
</tr>
<tr>
<td style="text-align:left"><strong>&amp;</strong></td>
<td style="text-align:left">位 ‘AND’</td>
</tr>
<tr>
<td style="text-align:left"><strong>^ ｜</strong></td>
<td style="text-align:left">位运算符</td>
</tr>
<tr>
<td style="text-align:left"><strong>&lt;= &lt; &gt; &gt;=</strong></td>
<td style="text-align:left">比较运算符</td>
</tr>
<tr>
<td style="text-align:left"><strong>&lt;&gt; == !=</strong></td>
<td style="text-align:left">等于运算符</td>
</tr>
<tr>
<td style="text-align:left"><strong>= %= /= //= -= += *= </strong>=**</td>
<td style="text-align:left">赋值运算符</td>
</tr>
<tr>
<td style="text-align:left"><strong>is 、is not</strong></td>
<td style="text-align:left">身份运算符</td>
</tr>
<tr>
<td style="text-align:left"><strong>in 、not in</strong></td>
<td style="text-align:left">成员运算符</td>
</tr>
<tr>
<td style="text-align:left"><strong>not and or</strong></td>
<td style="text-align:left">逻辑运算符</td>
</tr>
</tbody>
</table>
</div>
<h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-书写表达式"><a href="#1-书写表达式" class="headerlink" title="1.书写表达式"></a>1.书写表达式</h5><blockquote>
<p>通常我们书写表达式的时候，会在每一个运算符左右都放一个空格，这样使代码更可读，如：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">234</span> * (<span class="number">45</span> - <span class="number">56</span> / <span class="number">34</span>)</span><br></pre></td></tr></table></figure>
<h5 id="2-类型转换"><a href="#2-类型转换" class="headerlink" title="2.类型转换"></a>2.类型转换</h5><div class="table-container">
<table>
<thead>
<tr>
<th>类型转换函数</th>
<th>转换路径</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>float(string)</code></td>
<td>字符串 -&gt; 浮点值</td>
</tr>
<tr>
<td><code>int(string)</code></td>
<td>字符串 -&gt; 整数值</td>
</tr>
<tr>
<td><code>str(integer)</code></td>
<td>整数值 -&gt; 字符串</td>
</tr>
<tr>
<td><code>str(float)</code></td>
<td>浮点值 -&gt; 字符串</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>例如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">print(<span class="string">"type a is :"</span>, type(a))</span><br><span class="line">a = float(a)</span><br><span class="line">print(<span class="string">"after float(a) type a is :"</span>, type(a))</span><br><span class="line">b = <span class="number">2.0</span></span><br><span class="line">print(<span class="string">"type b is :"</span>, type(b))</span><br><span class="line">b = int(b)</span><br><span class="line">print(<span class="string">"after int(b) type b is :"</span>, type(b))</span><br><span class="line">c = <span class="string">"1"</span></span><br><span class="line">print(<span class="string">"type c is :"</span>, type(c))</span><br><span class="line">c = int(c)</span><br><span class="line">print(<span class="string">"after int(c) type c is :"</span>, type(c))</span><br></pre></td></tr></table></figure>
<ul>
<li>结果为：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">type a <span class="keyword">is</span> : &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">after</span> <span class="title">float</span><span class="params">(a)</span> <span class="title">type</span> <span class="title">a</span> <span class="title">is</span> :</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">float</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">type</span> <span class="title">b</span> <span class="title">is</span> :</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">float</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">after</span> <span class="title">int</span><span class="params">(b)</span> <span class="title">type</span> <span class="title">b</span> <span class="title">is</span> :</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">type</span> <span class="title">c</span> <span class="title">is</span> :</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">after</span> <span class="title">int</span><span class="params">(c)</span> <span class="title">type</span> <span class="title">c</span> <span class="title">is</span> :</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong><code>type()</code>函数：</strong>传入一个参数时，返回 object 的类型，返回值是一个 type 对象。</p>
</blockquote>
<h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><h5 id="1-evaluateequ-py"><a href="#1-evaluateequ-py" class="headerlink" title="1.evaluateequ.py"></a>1.evaluateequ.py</h5><div class="note info no-icon"><p>使用Python编辑一个程序用于计算如下表达式结果：</p>
<script type="math/tex; mode=display">
\frac{1}{x}+\frac{1}{x+1}+\frac{1}{x+2}+…+\frac{1}{n}</script><p>其中<code>x</code>，<code>n</code>的值为整型且需要用户输入,输出结果保留四位小数。</p></div>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = int(input(<span class="string">"Please input an integer X :"</span>))</span><br><span class="line">N = int(input(<span class="string">"Please input an integer N :"</span>))</span><br><span class="line">SUM = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> X <span class="keyword">in</span> range(<span class="number">1</span>, N + <span class="number">1</span>):</span><br><span class="line">    SUM += <span class="number">1</span> / X</span><br><span class="line">print(<span class="string">"The SUM is :"</span>, <span class="string">"&#123;:.4f&#125;"</span>.format(SUM))</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Please input an integer X :<span class="number">1</span></span><br><span class="line">Please input an integer N :<span class="number">10</span></span><br><span class="line">The SUM <span class="keyword">is</span> : <span class="number">2.9290</span></span><br></pre></td></tr></table></figure>
<ul>
<li>函数说明：</li>
</ul>
<blockquote>
<p><strong>range()函数</strong>返回的是一个可迭代对象（类型是对象），而不是列表类型， 所以打印的时候不会打印列表。例如：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">range(stop)</span><br><span class="line">range(start, stop[, step])</span><br></pre></td></tr></table></figure><br>其中:</p>
<ul>
<li><code>start:</code> 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</li>
<li><code>stop:</code>计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</li>
<li><code>step：</code>步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)<br>拓展用法：<br><strong>list() 函数</strong>是对象迭代器，可以把range()返回的可迭代对象转为一个列表，返回的变量类型为列表。例如：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = list(range(<span class="number">0</span>, <span class="number">30</span>, <span class="number">5</span>))</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
输出结果为：[0, 5, 10, 15, 20, 25]</li>
</ul>
</blockquote>
<h5 id="2-quadraticequation-py"><a href="#2-quadraticequation-py" class="headerlink" title="2.quadraticequation.py"></a>2.quadraticequation.py</h5><div class="note info no-icon"><p>用户输入<code>a</code>,<code>b</code>,<code>c</code>后输出二次方根<code>root1</code>,<code>root2</code></p></div>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">a = int(input(<span class="string">"Please input a :"</span>))</span><br><span class="line">b = int(input(<span class="string">"Please input b :"</span>))</span><br><span class="line">c = int(input(<span class="string">"Please input c :"</span>))</span><br><span class="line">D = b * b - <span class="number">4</span> * a * c</span><br><span class="line"><span class="keyword">if</span> D &lt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"ROOTS are imaginary"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"root1="</span>, (-b + math.sqrt(D)) / (<span class="number">2</span> * a))</span><br><span class="line">    print(<span class="string">"root2="</span>, (-b - math.sqrt(D)) / (<span class="number">2</span> * a))</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Please input a :<span class="number">5</span></span><br><span class="line">Please input b :<span class="number">-4</span></span><br><span class="line">Please input c :<span class="number">0</span></span><br><span class="line">root1= <span class="number">0.8</span></span><br><span class="line">root2= <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">Please input a :<span class="number">5</span></span><br><span class="line">Please input b :<span class="number">4</span></span><br><span class="line">Please input c :<span class="number">1</span></span><br><span class="line">ROOTS are imaginary</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Math模块常用函数：<a href="https://www.jianshu.com/p/7183e0516b25" target="_blank" rel="noopener">简书</a></p>
</blockquote>
<h5 id="3-salesmansalary-py"><a href="#3-salesmansalary-py" class="headerlink" title="3.salesmansalary.py"></a>3.salesmansalary.py</h5><div class="note info no-icon"><p>这个程序计算一位数码相机销售人员的工资。他的基本工资是 1500，每售出一台相机他可以得到 200 并且获得 2% 的抽成。程序要求输入相机数量及单价。</p></div>
<ul>
<li>代码:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = int(input(<span class="string">"Please input the number of cameras:"</span>))</span><br><span class="line">price = float(input(<span class="string">"Please input the price of cameras:"</span>))</span><br><span class="line">print(<span class="string">"The salary is:"</span>, <span class="number">1500</span>+<span class="number">200</span>*count + <span class="number">0.02</span>*count*price)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Please input the number of cameras:<span class="number">5</span></span><br><span class="line">Please input the price of cameras:<span class="number">2000</span></span><br><span class="line">The salary <span class="keyword">is</span>: <span class="number">2700.0</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="4-areaofacircle-py"><a href="#4-areaofacircle-py" class="headerlink" title="4.areaofacircle.py"></a>4.areaofacircle.py</h5><div class="note info no-icon"><p>输入圆的半径R，输出圆的面积</p></div>
<ul>
<li>代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">R = float(input(<span class="string">"Please input the radius:"</span>))</span><br><span class="line">print(<span class="string">"The area of the circle is:"</span>, <span class="string">"&#123;:.10f&#125;"</span>.format(math.pi*R*R))</span><br></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Please input the radius:<span class="number">2</span></span><br><span class="line">The area of the circle <span class="keyword">is</span>: <span class="number">12.5663706144</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>format()函数格式化数字</title>
    <url>/2020/02/29/format-%E5%87%BD%E6%95%B0%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<div class="note info no-icon"><p>此文中将解释format()函数格式化数字的多种方法</p>
<p>原文链接：<a href="https://www.runoob.com/python/att-string-format.html" target="_blank" rel="noopener">Python format 格式化函数</a></p></div>
<a id="more"></a>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">数字</th>
<th style="text-align:left">格式</th>
<th style="text-align:left">输出</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">3.1415926</td>
<td style="text-align:left">{:.2f}</td>
<td style="text-align:left">3.14</td>
<td style="text-align:left">保留小数点后两位</td>
</tr>
<tr>
<td style="text-align:left">3.1415926</td>
<td style="text-align:left">{:+.2f}</td>
<td style="text-align:left">+3.14</td>
<td style="text-align:left">带符号保留小数点后两位</td>
</tr>
<tr>
<td style="text-align:left">-1</td>
<td style="text-align:left">{:+.2f}</td>
<td style="text-align:left">-1.00</td>
<td style="text-align:left">带符号保留小数点后两位</td>
</tr>
<tr>
<td style="text-align:left">2.71828</td>
<td style="text-align:left">{:.0f}</td>
<td style="text-align:left">3</td>
<td style="text-align:left">不带小数</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">{:0&gt;2d}</td>
<td style="text-align:left">05</td>
<td style="text-align:left">数字补零 (填充左边, 宽度为2)</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">{:x&lt;4d}</td>
<td style="text-align:left">5xxx</td>
<td style="text-align:left">数字补x (填充右边, 宽度为4)</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left">{:x&lt;4d}</td>
<td style="text-align:left">10xx</td>
<td style="text-align:left">数字补x (填充右边, 宽度为4)</td>
</tr>
<tr>
<td style="text-align:left">1000000</td>
<td style="text-align:left">{:,}</td>
<td style="text-align:left">1,000,000</td>
<td style="text-align:left">以逗号分隔的数字格式</td>
</tr>
<tr>
<td style="text-align:left">0.25</td>
<td style="text-align:left">{:.2%}</td>
<td style="text-align:left">25.00%</td>
<td style="text-align:left">百分比格式</td>
</tr>
<tr>
<td style="text-align:left">1000000000</td>
<td style="text-align:left">{:.2e}</td>
<td style="text-align:left">1.00e+09</td>
<td style="text-align:left">指数记法</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left">{:&gt;10d}</td>
<td style="text-align:left">13</td>
<td style="text-align:left">右对齐 (默认, 宽度为10)</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left">{:&lt;10d}</td>
<td style="text-align:left">13</td>
<td style="text-align:left">左对齐 (宽度为10)</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left">{:^10d}</td>
<td style="text-align:left">13</td>
<td style="text-align:left">中间对齐 (宽度为10)</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left">{:b}</td>
<td style="text-align:left">1011</td>
<td style="text-align:left">二进制</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left">{:d}</td>
<td style="text-align:left">11</td>
<td style="text-align:left">十进制</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left">{:o}</td>
<td style="text-align:left">13</td>
<td style="text-align:left">八进制</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left">{:x}</td>
<td style="text-align:left">b</td>
<td style="text-align:left">十六进制</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left">{:#x}</td>
<td style="text-align:left">0xb</td>
<td style="text-align:left">十六进制</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left">{:#X}</td>
<td style="text-align:left">0Xb</td>
<td style="text-align:left">十六进制</td>
</tr>
</tbody>
</table>
</div>
<p><strong><code>^</code></strong>, <strong><code>&lt;</code></strong>, <strong><code>&gt;</code></strong> 分别是居中、左对齐、右对齐，后面带宽度， <strong><code>:</code></strong> 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</p>
<p><strong><code>+</code></strong> 表示在正数前显示 <strong><code>+</code></strong>，负数前显示 <strong><code>-</code></strong>； （空格）表示在正数前加空格</p>
<hr>
<p>目录：<a href="http://vxiaozhe1998.cn/2020/02/28/Python学习/" target="_blank" rel="noopener">Python学习</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>2.变量和数据类型</title>
    <url>/2020/02/29/2-%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<div class="note info no-icon"><p>在本文中将给出Python中的变量和数据类型的一些解释</p></div>
<a id="more"></a>
<h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul>
<li>python 关键字</li>
<li>变量的定义与赋值</li>
<li>input() 函数</li>
<li>字符串的格式化</li>
</ul>
<h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><h5 id="1-Python常用的关键词可通过在Python控制台中依次输入help-gt-keywords来获取"><a href="#1-Python常用的关键词可通过在Python控制台中依次输入help-gt-keywords来获取" class="headerlink" title="1. Python常用的关键词可通过在Python控制台中依次输入help()-&gt;keywords来获取"></a>1. Python常用的关键词可通过在Python控制台中依次输入<code>help()</code>-&gt;<code>keywords</code>来获取</h5><blockquote>
<p>Python3关键字及含义见链接：<a href="http://vxiaozhe1998.cn/2020/02/29/Python保留字/" target="_blank" rel="noopener">Python保留字</a></p>
</blockquote>
<h5 id="2-Python中的变量"><a href="#2-Python中的变量" class="headerlink" title="2.Python中的变量"></a>2.Python中的变量</h5><ul>
<li>通过使用代码直接赋值来赋予变量类型，例如，我们输入<code>abc = 1</code>则变量<code>abc</code>就是整型，如果输入<code>abc = 1.0</code>那么变量<code>abc</code>就是浮点型，在Python中<strong>我们只需要输入变量名以及值即可完成变量的定义与赋值</strong></li>
<li>通过使用双引号、单引号来对字符串进行操作，例如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'XiaoZhe'</span></span><br><span class="line"><span class="string">'XiaoZhe'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'XiaoZhe\'s blog'</span> </span><br><span class="line"><span class="string">"XiaoZhe's blog"</span></span><br></pre></td></tr></table></figure>
<p>代码中的<code>\&#39;</code>是<code>&#39;</code>的转义字符，目的是为了在控制台中输出<code>&#39;</code> 符号。</p>
<ul>
<li>可以通过函数<code>input()</code>来读取键盘输入</li>
</ul>
<h5 id="3-Python中的单行多元素赋值"><a href="#3-Python中的单行多元素赋值" class="headerlink" title="3.Python中的单行多元素赋值"></a>3.Python中的单行多元素赋值</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a , b = <span class="number">45</span>, <span class="number">54</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">45</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">54</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = b , a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">54</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">45</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = ( <span class="string">"China"</span>, <span class="string">"Python"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>country, language = data</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>country</span><br><span class="line"><span class="string">'China'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language</span><br><span class="line"><span class="string">'Python'</span></span><br></pre></td></tr></table></figure>
<h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-使用Pycharm获取关键字"><a href="#1-使用Pycharm获取关键字" class="headerlink" title="1.使用Pycharm获取关键字"></a>1.使用Pycharm获取关键字</h5><ul>
<li>通过在编辑器中输入<code>help()</code>并点击运行，在控制台中输入<code>keywords</code>就可以得到所有关键字了</li>
</ul>
<p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200229-1582964843955" alt="Python关键字"></p>
<ul>
<li>我们也可以在控制台输入<code>modules</code>, <code>symbols</code> 或者 <code>topics</code>来分别获取<code>模块</code>、<code>运算符</code>和<code>文档</code></li>
</ul>
<h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><h5 id="1-求-N-个数字的平均值"><a href="#1-求-N-个数字的平均值" class="headerlink" title="1.求 N 个数字的平均值"></a>1.求 N 个数字的平均值</h5><div class="note info no-icon"><p>输入一个整数N，在接下来你将输入N个数，程序将计算这N个数的平均值</p></div>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Calculate the average of N numbers</span></span><br><span class="line"><span class="comment"># Define a variable N and get the value from the keyboard</span></span><br><span class="line">print(<span class="string">"Please enter an integer N, the program will enter N integers and calculate their average"</span>)</span><br><span class="line">N = int(input(<span class="string">"Enter an integer: "</span>))</span><br><span class="line">count = <span class="number">1</span></span><br><span class="line">sum_my = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= N:</span><br><span class="line">    print(<span class="string">"Please enter the "</span>, count, <span class="string">" number: "</span>, end=<span class="string">' '</span>)</span><br><span class="line">    number = float(input())</span><br><span class="line">    sum_my = sum_my + number</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">average_my = sum_my / N</span><br><span class="line">print(<span class="string">"The average of N number is:"</span>, <span class="string">"&#123;:.2f&#125;"</span>.format(average_my))</span><br></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Enter an integer: <span class="number">5</span></span><br><span class="line">Please enter the  <span class="number">1</span>  number:  <span class="number">1</span></span><br><span class="line">Please enter the  <span class="number">2</span>  number:  <span class="number">2</span></span><br><span class="line">Please enter the  <span class="number">3</span>  number:  <span class="number">3</span></span><br><span class="line">Please enter the  <span class="number">4</span>  number:  <span class="number">4</span></span><br><span class="line">Please enter the  <span class="number">5</span>  number:  <span class="number">5</span></span><br><span class="line">The average of N number <span class="keyword">is</span>: <span class="number">3.00</span></span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<ul>
<li>函数说明：</li>
</ul>
<blockquote>
<p><strong>print()函数</strong><br>输出信息，不同类型的变量用<code>,</code>连接，即：<code>print(&quot;string&quot;,int)</code>，也可以在函数中添加函数，如<code>print(&quot;{:.2f}.format(value)&quot;)</code>-&gt;<code>打印value保留两位小数的值</code>，如果需要输出后不换行，添加参数<code>end=&#39; &#39;</code>即<code>print(&quot;不换行&quot;,end=&#39; &#39;)</code></p>
<p><strong>input()函数</strong><br>从键盘读取信息，参数中添加字符串可输出至控制台，即：<code>input(&quot;请输入字符： &quot;)</code>，由于<code>input()</code>函数默认读取的是字符型，如果需要整型需要进行转码即：<code>int(input())</code>,例：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = int(input(<span class="string">"请输入数字："</span>))</span><br><span class="line">请输入字符：<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<h5 id="2-华氏温度到摄氏温度转换程序"><a href="#2-华氏温度到摄氏温度转换程序" class="headerlink" title="2.华氏温度到摄氏温度转换程序"></a>2.华氏温度到摄氏温度转换程序</h5><div class="note info no-icon"><p>使用公式 C = (F - 32) / 1.8 将华氏温度转为摄氏温度。</p></div>
<ul>
<li>代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Enter a Fahrenheit temperature F and convert it to Celsius C. The formula is: C = (F-32) / 1.8</span></span><br><span class="line">fahrenheit = int(input(<span class="string">"Please enter the fahrenheit: "</span>))</span><br><span class="line">celsius = (fahrenheit - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line">print(<span class="string">"The "</span>, fahrenheit, <span class="string">"°F is "</span>, <span class="string">"&#123;:.2f&#125;"</span>.format(celsius), <span class="string">"°C"</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>结果：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Please enter the fahrenheit: <span class="number">25</span></span><br><span class="line">The  <span class="number">25</span> °F <span class="keyword">is</span>  <span class="number">-3.89</span> °C</span><br></pre></td></tr></table></figure>
<ul>
<li>函数说明:</li>
</ul>
<blockquote>
<p><strong>format()</strong>函数<br>通常使用规范为<code>&quot;文本{变量}&quot;.format(变量限制)</code>，例如下面几个例子</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"&#123;1&#125; &#123;0&#125; &#123;1&#125;"</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line"><span class="string">'world hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"&#123;:.2f&#125;"</span>.format(<span class="number">3.1415926</span>));</span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其他说明</li>
</ul>
<blockquote>
<p>对于format()函数中格式化数字的部分详见链接：<a href="http://vxiaozhe1998.cn/2020/02/29/format-函数格式化数字/" target="_blank" rel="noopener">format()函数格式化数字</a></p>
</blockquote>
<hr>
<p>上一篇：<a href="http://vxiaozhe1998.cn/2020/02/28/1.开始Python之旅/" target="_blank" rel="noopener">1.开始Python之旅</a><br>目    录：<a href="http://vxiaozhe1998.cn/2020/02/28/Python学习/" target="_blank" rel="noopener">Python学习</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python保留字</title>
    <url>/2020/02/29/Python%E4%BF%9D%E7%95%99%E5%AD%97/</url>
    <content><![CDATA[<div class="note info no-icon"><p>本文将给出Python3的35个保留字<br>原文链接：<a href="https://www.jianshu.com/p/fb63b295bf64" target="_blank" rel="noopener">https://www.jianshu.com/p/fb63b295bf64</a><br>原文作者：大白python（简书）</p></div>
<a id="more"></a>
<h3 id="关键字就是程序发明者规定的有特殊含义的单词，又叫保留字-。"><a href="#关键字就是程序发明者规定的有特殊含义的单词，又叫保留字-。" class="headerlink" title="关键字就是程序发明者规定的有特殊含义的单词，又叫保留字 。"></a>关键字就是程序发明者规定的有特殊含义的单词，又叫保留字 。</h3><div class="table-container">
<table>
<thead>
<tr>
<th>关键字</th>
<th>说     明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>一、</strong></td>
<td><strong>运算 ：（10个）</strong></td>
</tr>
<tr>
<td>and</td>
<td>用于表达式运算，逻辑与操作</td>
</tr>
<tr>
<td>as</td>
<td>用于类型转换</td>
</tr>
<tr>
<td>assert</td>
<td>断言，用于判断变量或条件表达式的值是否为真</td>
</tr>
<tr>
<td>del</td>
<td>删除变量或序列的值</td>
</tr>
<tr>
<td>in</td>
<td>判断变量是否在序列中</td>
</tr>
<tr>
<td>is</td>
<td>判断变量是否为某个类的实例</td>
</tr>
<tr>
<td>not</td>
<td>用于表达式运算，逻辑非操作</td>
</tr>
<tr>
<td>or</td>
<td>用于表达式运算，逻辑或操作</td>
</tr>
<tr>
<td>None</td>
<td>表示该值是一个空对象，空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</td>
</tr>
<tr>
<td>false</td>
<td>错误</td>
</tr>
<tr>
<td>true</td>
<td>正确</td>
</tr>
<tr>
<td><strong>二、</strong></td>
<td><strong>条件与循环语句：（7个）</strong></td>
</tr>
<tr>
<td>if</td>
<td>条件语句，与else，elif结合使用</td>
</tr>
<tr>
<td>elif</td>
<td>条件语句，与if,else结合使用</td>
</tr>
<tr>
<td>else</td>
<td>条件语句，与if,elif结合使用，也可用于异常和循环语句</td>
</tr>
<tr>
<td>for</td>
<td>for循环语句</td>
</tr>
<tr>
<td>while</td>
<td>while的循环语句</td>
</tr>
<tr>
<td>break</td>
<td>中断循环语句的执行</td>
</tr>
<tr>
<td>continue</td>
<td>继续执行下一次循环</td>
</tr>
<tr>
<td><strong>三、</strong></td>
<td><strong>定义对象或函数：（7个）</strong></td>
</tr>
<tr>
<td>class</td>
<td>用于定义类</td>
</tr>
<tr>
<td>def</td>
<td>用于定义函数或方法</td>
</tr>
<tr>
<td>return</td>
<td>用于从函数返回计算结果</td>
</tr>
<tr>
<td>yield</td>
<td>用于从函数依此返回值</td>
</tr>
<tr>
<td>globe</td>
<td>定义全局变量</td>
</tr>
<tr>
<td>lambda</td>
<td>定义匿名变量</td>
</tr>
<tr>
<td>nonlocal</td>
<td>非局部变量</td>
</tr>
<tr>
<td><strong>四、</strong></td>
<td><strong>python功能语句：（6个）</strong></td>
</tr>
<tr>
<td>from</td>
<td>用于导入模块，与import结合使用</td>
</tr>
<tr>
<td>import</td>
<td>用于导入模块，与from结合使用</td>
</tr>
<tr>
<td>print</td>
<td>打印语句</td>
</tr>
<tr>
<td>exec</td>
<td>用于执行python 语句</td>
</tr>
<tr>
<td>pass</td>
<td>空的类，方法，函数的占位符</td>
</tr>
<tr>
<td>with</td>
<td>简化python的语句</td>
</tr>
<tr>
<td><strong>五、</strong></td>
<td><strong>有关异常的操作：（4个）</strong></td>
</tr>
<tr>
<td>try</td>
<td>try包含可能会出现异常的语句，与except，finally结合使用</td>
</tr>
<tr>
<td>except</td>
<td>except包含捕获异常后的操作代码块，与try,finally结合使用</td>
</tr>
<tr>
<td>finally</td>
<td>用于异常语句，出现异常后，始终要执行finally，包含的代码块，与try，except结合使用</td>
</tr>
<tr>
<td>raise</td>
<td>异常抛出操作</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>目录：<a href="http://vxiaozhe1998.cn/2020/02/28/Python学习/" target="_blank" rel="noopener">Python学习</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows端常用的cmd指令</title>
    <url>/2020/02/28/Windows%E7%AB%AF%E5%B8%B8%E7%94%A8%E7%9A%84cmd%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<div class="note info no-icon"><p>本文中将提供一些常用指令</p></div>
<a id="more"></a>
<div class="table-container">
<table>
<thead>
<tr>
<th>操作</th>
<th>指令</th>
</tr>
</thead>
<tbody>
<tr>
<td>切换到X盘</td>
<td>X:</td>
</tr>
<tr>
<td>打开某盘符的某个文件夹</td>
<td>cd folder</td>
</tr>
<tr>
<td>返回上一级目录</td>
<td>cd..</td>
</tr>
<tr>
<td>回到根目录</td>
<td>cd\</td>
</tr>
<tr>
<td>查看目录内容</td>
<td>dir</td>
</tr>
<tr>
<td>创建名为”fold”的文件夹</td>
<td>mkdir fold/md fold</td>
</tr>
<tr>
<td>创建名为”text.txt”空文件</td>
<td>type nul&gt;text.txt</td>
</tr>
<tr>
<td>创建名为”text.txt”内容为”content”的文件</td>
<td>echo content&gt;text.txt</td>
</tr>
<tr>
<td>复制目录中text.txt并以text1.txt的名称粘贴在本目录中</td>
<td>copy text.txt text1.txt</td>
</tr>
<tr>
<td>删除名为text.txt的文件</td>
<td>del text.txt</td>
</tr>
<tr>
<td>重命名text.txt文件为text1.txt</td>
<td>ren text.txt text1.txt</td>
</tr>
<tr>
<td>查看text.txt内容</td>
<td>type text.txt</td>
</tr>
<tr>
<td>清屏</td>
<td>cls</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows上配置Python以及部分编译器的推荐</title>
    <url>/2020/02/28/%E5%9C%A8Windows%E4%B8%8A%E9%85%8D%E7%BD%AEPython%E4%BB%A5%E5%8F%8A%E9%83%A8%E5%88%86%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<div class="note info no-icon"><p>在本文中将详细介绍如何在Windows上配置Python以及几种编译器的推荐。</p></div>
<a id="more"></a>
<h3 id="一、什么是Python"><a href="#一、什么是Python" class="headerlink" title="一、什么是Python"></a>一、什么是Python</h3><p>Python是一种跨平台的计算机程序设计语言。是一种面向对象的动态类型语言，最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越多被用于独立的、大型项目的开发。</p>
<h3 id="二、如何配置Python环境"><a href="#二、如何配置Python环境" class="headerlink" title="二、如何配置Python环境"></a>二、如何配置Python环境</h3><h4 id="1-打开Python官网"><a href="#1-打开Python官网" class="headerlink" title="1.打开Python官网"></a>1.打开Python官网</h4><p><a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a></p>
<p>按照图示先移动到<code>Downloads</code>处并点击<code>Windows</code></p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-419fc022eefbe044.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Python官网"></p>
<h4 id="2-点击最近的版本跳转到新页面"><a href="#2-点击最近的版本跳转到新页面" class="headerlink" title="2.点击最近的版本跳转到新页面"></a>2.点击最近的版本跳转到新页面</h4><p><img src="https://upload-images.jianshu.io/upload_images/10646648-0b2a3cb1bf4a6a7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最近的版本"></p>
<h4 id="3-滑动到底部如下图所示"><a href="#3-滑动到底部如下图所示" class="headerlink" title="3.滑动到底部如下图所示"></a>3.滑动到底部如下图所示</h4><p><img src="https://upload-images.jianshu.io/upload_images/10646648-dd9ce518f21bb417.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Python版本"></p>
<blockquote>
<p><strong>有关Windows版本的介绍</strong></p>
<ul>
<li>Windows x86-64 web-based installer 需要通过联网完成安装(64位）</li>
<li>Windows x86-64 executable installer 是可执行文件(*.exe)方式安装（64位）</li>
<li>Windows x86-64 embeddable zip file 嵌入式版本，可以集成到其它应用中（64位）</li>
<li>Windows x86 web-based installer 需要通过联网完成安装(32位）</li>
<li>Windows x86 executable installer 是可执行文件(*.exe)方式安装（32位）</li>
<li>Windows x86 embeddable zip file 嵌入式版本，可以集成到其它应用中（32位）</li>
</ul>
</blockquote>
<p>我们选择下图所示版本点击下载<br><img src="https://upload-images.jianshu.io/upload_images/10646648-9f092f560e706469.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="64位可执行文件"><br><strong>注意：</strong>如果你是32位电脑系统就下载32位的即Windows x86 executable installer</p>
<blockquote>
<p><strong>如何查看自己电脑系统的位数？</strong><br>1.按快捷键<code>Win+R</code>,在运行框中输入<code>cmd</code><br><img src="https://upload-images.jianshu.io/upload_images/10646648-8b7e768def92a341.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行"><br>2.在弹出的窗口中输入<code>systeminfo</code><br><img src="https://upload-images.jianshu.io/upload_images/10646648-7dfe3d2057253af7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="系统类型"><br><strong>系统类型处是x64就是64位系统，如果是x86就是32位系统</strong></p>
</blockquote>
<h4 id="4-打开下载好的Python"><a href="#4-打开下载好的Python" class="headerlink" title="4.打开下载好的Python"></a>4.打开下载好的Python</h4><p><img src="https://upload-images.jianshu.io/upload_images/10646648-0e7c828c38467609.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="界面及翻译"></p>
<blockquote>
<p><strong>有关名词解释：</strong></p>
<ul>
<li>IDLE:（ 集成开发环境或集成开发和学习环境）是Python的集成开发环境</li>
<li>pip:一个现代的，通用的 Python 包管理工具。提供了对 Python 包的查找、下载、安装、卸载的功能。</li>
</ul>
</blockquote>
<h4 id="5-勾选Add-Python-3-8-to-PATH并点击Install-Now"><a href="#5-勾选Add-Python-3-8-to-PATH并点击Install-Now" class="headerlink" title="5.勾选Add Python 3.8 to PATH并点击Install Now"></a>5.勾选<code>Add Python 3.8 to PATH</code>并点击<code>Install Now</code></h4><p><img src="https://upload-images.jianshu.io/upload_images/10646648-8ff530604b2ac804.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装成功"></p>
<p><strong>安装成功后点击<code>Disable path length limit</code>之后点击<code>Close</code></strong></p>
<h4 id="6-运行cmd输入python得到Python的版本信息即配置成功"><a href="#6-运行cmd输入python得到Python的版本信息即配置成功" class="headerlink" title="6.运行cmd输入python得到Python的版本信息即配置成功"></a>6.运行<code>cmd</code>输入<code>python</code>得到Python的版本信息即配置成功</h4><p><img src="https://upload-images.jianshu.io/upload_images/10646648-fdc005d459bf0e88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="版本信息"></p>
<h4 id="7-按下Win键就是键盘上唯一一个全部都是图形的按键，直接输入python-点击推荐选项运行"><a href="#7-按下Win键就是键盘上唯一一个全部都是图形的按键，直接输入python-点击推荐选项运行" class="headerlink" title="7.按下Win键就是键盘上唯一一个全部都是图形的按键，直接输入python,点击推荐选项运行"></a>7.按下<code>Win</code>键就是键盘上唯一一个全部都是图形的按键，直接输入<code>python</code>,点击推荐选项运行</h4><p><img src="https://upload-images.jianshu.io/upload_images/10646648-d927540357444f6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行python"></p>
<h4 id="8-在其中输入下列代码并敲击enter："><a href="#8-在其中输入下列代码并敲击enter：" class="headerlink" title="8.在其中输入下列代码并敲击enter："></a>8.在其中输入下列代码并敲击<code>enter</code>：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-7431423a92e2e9dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><strong>至此，python环境安装完成</strong></p>
<h3 id="三、编译器"><a href="#三、编译器" class="headerlink" title="三、编译器"></a>三、编译器</h3><h4 id="1-IDLE"><a href="#1-IDLE" class="headerlink" title="1.IDLE"></a>1.IDLE</h4><blockquote>
<p>这是安装Python自带的编译器，通过按下<code>Win</code>键并直接键入Idle选择搜索结果启动</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-ec8238c63859bbdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IDLE"></p>
<h5 id="1-1-通过键入如下代码并按enter来运行"><a href="#1-1-通过键入如下代码并按enter来运行" class="headerlink" title="1.1 通过键入如下代码并按enter来运行"></a>1.1 通过键入如下代码并按<code>enter</code>来运行</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-2fb01aeb240cf0b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IDLE"></p>
<h5 id="1-2-通过IDLE创建脚本"><a href="#1-2-通过IDLE创建脚本" class="headerlink" title="1.2 通过IDLE创建脚本"></a>1.2 通过IDLE创建脚本</h5><p>1.2.1 依次点击右上角<code>File</code>-&gt;<code>New File</code>创建脚本文档<br><img src="https://upload-images.jianshu.io/upload_images/10646648-3f2715de5f86f40b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建脚本文档"></p>
<p>1.2.2 输入快捷键<code>ctrl+s</code>命名为<code>helloworld.py</code>，一定要记住路径<br><img src="https://upload-images.jianshu.io/upload_images/10646648-85d66276ea7f9477.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="保存脚本"></p>
<p>1.2.3 在脚本文档中输入如下代码并保存<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><br><img src="https://upload-images.jianshu.io/upload_images/10646648-2857826b9cf1fd31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="脚本"></p>
<p>1.2.3 打开windows的cmd</p>
<blockquote>
<p>通过快捷键<code>win+R</code>在运行中输入<code>cmd</code>运行</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-a1fe6e072afc20de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开cmd"></p>
<p>1.2.4 切换到之前保存的盘符，并定位到保存的脚本的路径<br><img src="https://upload-images.jianshu.io/upload_images/10646648-02876b9ebd64d412.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="定位路径"></p>
<p> <strong>常用指令：<a href="http://vxiaozhe1998.cn/2020/02/28/Windows%E7%AB%AF%E5%B8%B8%E7%94%A8%E7%9A%84cmd%E6%8C%87%E4%BB%A4/" target="_blank" rel="noopener">Windows下cmd常用指令</a></strong></p>
<p>1.2.5 在该目录下输入<code>python helloworld.py</code><br><img src="https://upload-images.jianshu.io/upload_images/10646648-14b51b508dcb3276.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行"></p>
<p><strong>以上就是IDLE的基础使用</strong></p>
<h4 id="2-Pycharm"><a href="#2-Pycharm" class="headerlink" title="2.Pycharm"></a>2.Pycharm</h4><h5 id="2-1-下载Toolbox-App"><a href="#2-1-下载Toolbox-App" class="headerlink" title="2.1 下载Toolbox App"></a>2.1 下载Toolbox App</h5><p><a href="https://www.jetbrains.com/toolbox-app/" target="_blank" rel="noopener">下载地址</a><br><img src="https://upload-images.jianshu.io/upload_images/10646648-541e6abbca0c5e27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Toolbox App"></p>
<h5 id="2-2-安装之后打开软件注册登录之后下载Pycharm-Community"><a href="#2-2-安装之后打开软件注册登录之后下载Pycharm-Community" class="headerlink" title="2.2 安装之后打开软件注册登录之后下载Pycharm Community"></a>2.2 安装之后打开软件注册登录之后下载Pycharm Community</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-083d77a32f42de96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Pycharm Community"></p>
<h5 id="2-3-安装完成点击打开"><a href="#2-3-安装完成点击打开" class="headerlink" title="2.3 安装完成点击打开"></a>2.3 安装完成点击打开</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-60a4fa12926f02bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点击"></p>
<h5 id="2-4-选择不搬运后点击ok"><a href="#2-4-选择不搬运后点击ok" class="headerlink" title="2.4 选择不搬运后点击ok"></a>2.4 选择不搬运后点击ok</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-a6f2e0642bbd14da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择"></p>
<h5 id="2-5-选择主题之后点击Next-Featured-plugins-下一步：精选插件）"><a href="#2-5-选择主题之后点击Next-Featured-plugins-下一步：精选插件）" class="headerlink" title="2.5 选择主题之后点击Next:Featured plugins(下一步：精选插件）"></a>2.5 选择主题之后点击<code>Next:Featured plugins</code>(下一步：精选插件）</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-b8907c216ab8649a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主题页"></p>
<h5 id="2-6-建议安装Markdown语言支持，如果对Vim或R语言熟悉可选择安装推荐的其他插件，安装之后点击Start-using-Pycharm-开始使用Pycharm）"><a href="#2-6-建议安装Markdown语言支持，如果对Vim或R语言熟悉可选择安装推荐的其他插件，安装之后点击Start-using-Pycharm-开始使用Pycharm）" class="headerlink" title="2.6 建议安装Markdown语言支持，如果对Vim或R语言熟悉可选择安装推荐的其他插件，安装之后点击Start using Pycharm(开始使用Pycharm）"></a>2.6 建议安装Markdown语言支持，如果对Vim或R语言熟悉可选择安装推荐的其他插件，安装之后点击<code>Start using Pycharm</code>(开始使用Pycharm）</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-7bc08657b9c612fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插件"></p>
<h5 id="2-7-点击Create-New-Project（创建新项目）"><a href="#2-7-点击Create-New-Project（创建新项目）" class="headerlink" title="2.7 点击Create New Project（创建新项目）"></a>2.7 点击<code>Create New Project</code>（创建新项目）</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-451aa52251a36fcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建新项目"></p>
<h5 id="2-8-更改项目位置"><a href="#2-8-更改项目位置" class="headerlink" title="2.8 更改项目位置"></a>2.8 更改项目位置</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-fb9daf028d8833df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目位置"></p>
<p><strong>注意，我们选择的路径需要为空，不然无法创建，第二个Location不用动它，是自动默认的，其余不用点，然后点击Create。</strong></p>
<h5 id="2-9-等待片刻进入软件"><a href="#2-9-等待片刻进入软件" class="headerlink" title="2.9 等待片刻进入软件"></a>2.9 等待片刻进入软件</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-c16c34d4addd97af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="软件界面"></p>
<h5 id="2-10-创建-py脚本"><a href="#2-10-创建-py脚本" class="headerlink" title="2.10 创建.py脚本"></a>2.10 创建<code>.py</code>脚本</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-d8134bfe83ed3c41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建脚本"><br><img src="https://upload-images.jianshu.io/upload_images/10646648-799dede7c34ed199.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建文件名"></p>
<h5 id="2-11-软件的一些设置"><a href="#2-11-软件的一些设置" class="headerlink" title="2.11 软件的一些设置"></a>2.11 软件的一些设置</h5><p>2.11.1 在按住<code>ctrl</code>时鼠标滑轮可以控制字符大小</p>
<ul>
<li>依次点击<code>File</code>-&gt;<code>Settings</code><br><img src="https://upload-images.jianshu.io/upload_images/10646648-4a65ccaa1c837988.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置"></li>
<li>点击<code>Editor</code>下三角之后单击<code>General</code>勾选<code>Change font size(Zoom) with Ctrl+Mouse Wheel</code>单击Apply<br><img src="https://upload-images.jianshu.io/upload_images/10646648-69987df0cfcd3c93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置"></li>
</ul>
<p>2.11.2 安装插件（本插件用于美化界面，不安装对编程没影响）</p>
<ul>
<li>在上图中点击<code>Plugins</code>搜索<code>Mate</code>并安装<br><img src="https://upload-images.jianshu.io/upload_images/10646648-910919d9e99ced15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Material Theme UI"></li>
<li>点击<code>accept</code><br><img src="https://upload-images.jianshu.io/upload_images/10646648-d6cff6cda4fdacf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="accept"></li>
<li>点击<code>Restart IDE</code>(重启IDE）<br><img src="https://upload-images.jianshu.io/upload_images/10646648-161bcc030f0af366.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Restart IDE"></li>
<li>点击<code>Restart</code>使插件生效<br><img src="https://upload-images.jianshu.io/upload_images/10646648-76ebfb9765cf1ef2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Restart"></li>
<li>点击<code>NEXT:THEMES</code>(主题）<br><img src="https://upload-images.jianshu.io/upload_images/10646648-c99d022f5e490ba4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主题"></li>
<li>选择一款你喜欢的主题并点击<code>NEXT:CONTRAST</code>(对比）<br><img src="https://upload-images.jianshu.io/upload_images/10646648-9eea966d2ee2511b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主题"></li>
<li>选择一款你喜欢的样式并点击<code>NEXT:ACCENT</code><br><img src="https://upload-images.jianshu.io/upload_images/10646648-ed0997c21f5cfe1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对比"></li>
<li>后面的设置按照自己喜好来，如果不需要改动默认点击<code>NEXT</code>即可</li>
</ul>
<h5 id="2-12-在输入框输入内容点击运行即可。"><a href="#2-12-在输入框输入内容点击运行即可。" class="headerlink" title="2.12 在输入框输入内容点击运行即可。"></a>2.12 在输入框输入内容点击运行即可。</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-7e614efada51576e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Hello world"></p>
<p><strong>至此，有关Pycharm的有关设置和使用就完成了</strong></p>
<hr>
<p>目录：<a href="http://vxiaozhe1998.cn/2020/02/28/Python学习/" target="_blank" rel="noopener">Python学习</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>1.开始Python之旅</title>
    <url>/2020/02/28/1.%E5%BC%80%E5%A7%8BPython%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<div class="note info no-icon"><p>在本文中记录了linux环境下交互模式的python3解释器的使用以及如何编写<code>.py</code>程序，简略解释了python3的代码风格、注释以及模块</p></div>
<a id="more"></a>
<h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><ul>
<li>了解什么是Python</li>
<li>认识交互模式的Python3解释器的使用</li>
<li>学习如何使用gedit编写Python3脚本</li>
<li>学习在终端模式下如程序何执行Python3脚本</li>
<li>认识python3的代码风格</li>
<li>学习Python3的注释</li>
<li>认识Python3的模块</li>
</ul>
<h3 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h3><ul>
<li>Python3 代码风格建议使用空格或Tab使用缩进符不可混用</li>
<li>Python3 中使用注释符号”#“</li>
<li>Python3 模块可以被别的程序引入，以使用该模块中的函数等功能。</li>
</ul>
<h3 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h3><h4 id="Xfce"><a href="#Xfce" class="headerlink" title="Xfce"></a>Xfce</h4><blockquote>
<p>Xfce是一个自由软件，运行在类Unix操作系统 （如Linux、FreeBSD 和 Solaris）上，提供轻量级桌面环境。</p>
</blockquote>
<p><strong>1.通过在该终端中输入Python3打开Python3的解释器：</strong><br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582864079247" alt="打开Python3解释器"><br><strong>2.在该终端中输入如下代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure>
<p><strong>之后敲击<code>enter</code>键即可输出：</strong><br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582864361522" alt="输出第一个程序"></p>
<h4 id="gedit"><a href="#gedit" class="headerlink" title="gedit"></a>gedit</h4><blockquote>
<p>gedit是一个GNOME桌面环境下兼容UTF-8的文本编辑器。它使用GTK+编写而成，因此它十分的简单易用，有良好的语法高亮，对中文支持很好，支持包括gb2312、gbk在内的多种字符编码。gedit是一个自由软件。</p>
</blockquote>
<p><strong>1.打开桌面的gedit软件，默认创建一个<code>无标题文档1</code>，输入快捷键<code>ctrl+s</code>，将<code>无标题文档1</code>命名为<code>helloworld.py</code>保存在<code>/home/shiyanlou</code>下</strong><br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582864805374" alt="gedit软件"></p>
<p><strong>2.在该文档中输入代码：</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><br><strong>保存之后关闭:</strong><br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582864956839" alt="输入第一个程序"></p>
<p><strong>3.执行：通过terminal中输入以下指令：</strong><br><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>chmod +x helloworld.py</span><br></pre></td></tr></table></figure><br><strong>添加可执行权限</strong><br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582865372437" alt="添加可执行权限"></p>
<p><strong>再通过输入：</strong><br><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python3</span> helloworld.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><br><strong>执行文件</strong><br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582865441805" alt="执行文件"></p>
<h4 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h4><blockquote>
<p>在 Python 中，空格很重要，我们使用空格将标识符区分开，行开始处的空格我们称之为缩进，如果你的缩进是错误的，Python 解释器会抛出错误。<br>建议遵守以下约定：</p>
</blockquote>
<ul>
<li>使用 4 个空格来缩进</li>
<li>永远不要混用空格和制表符</li>
<li>在函数之间空一行</li>
<li>在类之间空两行</li>
<li>字典，列表，元组以及参数列表中，在<code>,</code> 后添加一个空格。对于字典，<code>:</code> 后面也添加一个空格</li>
<li>在赋值运算符和比较运算符周围要有空格（参数列表中除外），但是括号里则不加空格：<code>a = f(1, 2) + g(3, 4)</code></li>
</ul>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><blockquote>
<p>Python 的注释以 <code>#</code>字符开始的，在 <code>#</code>字符到行尾之间的所有东西都被程序忽略为注释，也就说对程序没有任何影响。<strong>应该总是在 <code>#</code>后跟一个空格，然后再写注释。</strong></p>
</blockquote>
<p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582865867374" alt="注释"></p>
<h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><blockquote>
<p>模块是包含了我们能复用的代码的文件，包含了不同的函数定义，变量。模块文件通常以 .py 为扩展名。</p>
</blockquote>
<p><strong>例如：</strong><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math    <span class="comment"># 导入math模块</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(math.e)</span><br><span class="line"><span class="number">2.71828182846</span></span><br></pre></td></tr></table></figure></p>
<h3 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h3><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582864361522" alt="通过解释器运行Python3"></p>
<p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582865441805" alt="通过可执行文件运行Python3"></p>
<p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582865867374" alt="注释的使用"></p>
<hr>
<div class="note danger"><h4>在之后的记录中我将使用Windows端的Pycharm进行实验</h4></div>
<p>有关Window端的软件配置请参考文章：<a href="http://vxiaozhe1998.cn/2020/02/28/%E5%9C%A8Windows%E4%B8%8A%E9%85%8D%E7%BD%AEPython%E4%BB%A5%E5%8F%8A%E9%83%A8%E5%88%86%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E6%8E%A8%E8%8D%90/" target="_blank" rel="noopener">在Windows上配置Python以及部分编译器的推荐</a></p>
<hr>
<p>目    录：<a href="http://vxiaozhe1998.cn/2020/02/28/Python学习/" target="_blank" rel="noopener">Python学习</a><br>下一篇：<a href="http://vxiaozhe1998.cn/2020/02/29/2-变量和数据类型/" target="_blank" rel="noopener">2.变量和数据类型</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习</title>
    <url>/2020/02/28/Python%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<div class="note info no-icon"><p>Python学习目录</p></div>
<a id="more"></a>
<div class="note primary no-icon"><p><strong>每一篇将分为四个模块</strong><br><strong>一、实验目的：</strong>通过本实验能够学会掌握什么<br><strong>二、知识要点：</strong>本节实验的重点是什么<br><strong>三、实验内容：</strong>本节实验中牵扯到的代码<br><strong>四、实验结果：</strong>由本节实验所衍生出的题目</p></div>
<div class="note info no-icon"><h5>1.开始Python之旅</h5>

<p><a href="http://vxiaozhe1998.cn/2020/02/28/1.%E5%BC%80%E5%A7%8BPython%E4%B9%8B%E6%97%85/" target="_blank" rel="noopener">点击跳转</a></p></div>
<p><strong>拓展：</strong><br><a href="http://vxiaozhe1998.cn/2020/02/28/%E5%9C%A8Windows%E4%B8%8A%E9%85%8D%E7%BD%AEPython%E4%BB%A5%E5%8F%8A%E9%83%A8%E5%88%86%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E6%8E%A8%E8%8D%90/" target="_blank" rel="noopener">在Windows上配置Python以及部分编译器的推荐</a></p>
<div class="note info no-icon"><h5>2.变量和数据类型</h5>

<p><a href="http://vxiaozhe1998.cn/2020/02/29/2-变量和数据类型/" target="_blank" rel="noopener">点击跳转</a></p></div>
<p><strong>拓展：</strong><br><a href="http://vxiaozhe1998.cn/2020/02/29/Python保留字/" target="_blank" rel="noopener">Python保留字</a><br><a href="http://vxiaozhe1998.cn/2020/02/29/format-函数格式化数字/" target="_blank" rel="noopener">format()函数格式化数字</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows端非常好用的小工具</title>
    <url>/2020/02/27/Windows%E7%AB%AF%E9%9D%9E%E5%B8%B8%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<div class="note info no-icon"><p>Window端有什么好用的软件一起来看看吧<br>原文链接：<a href="https://www.jianshu.com/p/c7819abd3a84" target="_blank" rel="noopener">https://www.jianshu.com/p/c7819abd3a84</a></p></div>
<a id="more"></a>
<p>计算机，作为提高生产力的一个工具，人们用他来进行工作学习创作，随着计算机的发展，各种优秀的软件也被逐步的开发出来，本文将从生产力、娱乐、学习、美化四部分来推荐一些小编较为喜欢的软件，对于这四个方面，是小编自己的定义，如果读者对推荐软件的定位与小编不同还请谅解，先上思维导图：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-a67501c7f63e9c68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="思维导图"></p>
<h1 id="生产力"><a href="#生产力" class="headerlink" title="生产力"></a>生产力</h1><p>对于本模块，小编的定义就是能够提高我们处理工作的速度，快捷的实现更多操作的方法。（推荐的软件无排名先后）</p>
<h2 id="No-1-ZoomIt"><a href="#No-1-ZoomIt" class="headerlink" title="No.1 ZoomIt"></a>No.1 ZoomIt</h2><p>下载链接：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/zoomit" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/sysinternals/downloads/zoomit</a></p>
<hr>
<p>软件介绍：演示必备辅助软件 ZoomIt是一款非常实用的投影演示辅助软件。它源自Sysinternals公司，后来此公司被微软收购，因此，有些网友也称ZoomIt为微软放大镜。ZoomIt体积小巧（只有一个exe文件，0.2MB）、完全免费、易于使用。通过快捷键可以很方便地调用ZoomIt三项功能：屏幕放大、屏幕标注、定时提醒。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-991d714863a59efa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Zoomit"></p>
<p>这款轻便的软件很方便的实现屏幕放大，屏幕标注，倒计时等辅助功能的基本操作。具体的操作演示如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-aa37527cec13aa7c.gif?imageMogr2/auto-orient/strip" alt="软件演示"></p>
<h1 id="No-2-QuickLook"><a href="#No-2-QuickLook" class="headerlink" title="No.2 QuickLook"></a>No.2 QuickLook</h1><p>下载地址：<a href="https://www.microsoft.com/zh-cn/p/quicklook/9nv4bs3l1h4s?activetab=pivot:overviewtab" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/p/quicklook/9nv4bs3l1h4s?activetab=pivot:overviewtab</a></p>
<hr>
<p>有没有曾经被大文件所困扰，在我们使用计算机的时候难免会碰到找文件的是时候，但是大量的文件一个一个打开查看内容会占用大量时间，虽然在Windows系统中可以通过打开导航窗格来实现文件的快速预览，如下图：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-b3cf3a8d90d64bf8.gif?imageMogr2/auto-orient/strip" alt="文件预览"></p>
<p>但是Windows自带的预览可以查看的文件类型极少，而QuickLook软件就解决了这个问题，用户可以通过敲击“空格键”来快速预览软件，下面我将为读者们演示一下这款小软件究竟多么强大：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-44ef53e0310ee4f2.gif?imageMogr2/auto-orient/strip" alt="QuickLook演示"></p>
<h1 id="No-3-Utools"><a href="#No-3-Utools" class="headerlink" title="No.3 Utools"></a>No.3 Utools</h1><p>下载地址：<a href="https://www.u.tools/" target="_blank" rel="noopener">https://www.u.tools/</a></p>
<hr>
<p>相信很多读者对文件的管理都十分头大，有没有想过一个小小的软件能够同时实现<strong>搜索、文件管理、翻译、网页快开、多网站图片搜索、配色、编程</strong>等大量功能，现在我要给你推荐的这款软件可以说是极其符合我的描述了。先上软件截图：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-6fcb47d3ad71059e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Utools"></p>
<p>那这款软件能干吗呢？上文中所有的图片您会发现都是有阴影的，那我们是不是一定要使用ps来添加呢，当然不是，这款软件即可实现，上演示：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-8bae778a85b2e808.gif?imageMogr2/auto-orient/strip" alt="图片一键生成阴影"></p>
<p>除了这个功能比较常用的还有：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-242cce910473e6ab.gif?imageMogr2/auto-orient/strip" alt="文件搜索"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-f08c5864f3a46c35.gif?imageMogr2/auto-orient/strip" alt="实时翻译"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-09e09089693be4c5.gif?imageMogr2/auto-orient/strip" alt="图床"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-e47d769ec25f5ff0.gif?imageMogr2/auto-orient/strip" alt="编程文档"></p>
<p>当然，以上演示的仅仅是这款软件的一小部分，这款软件内部共6个模块，包括：<strong>精选、通用、图片、开发、文档、其他</strong>共93款小工具（截止到2020年1月17日），最让人开心的是，作为开发者你可以开发自己的小插件。你只需掌握HTML、CSS、JS基础即可，如果你了解nodejs开发起来会更加顺手。</p>
<p>开发文档链接如下：<a href="https://www.u.tools/docs/developer/welcome.html" target="_blank" rel="noopener">https://www.u.tools/docs/developer/welcome.html</a></p>
<h1 id="NO-4-Snipaste"><a href="#NO-4-Snipaste" class="headerlink" title="NO.4 Snipaste"></a>NO.4 Snipaste</h1><p>下载地址：<a href="https://www.snipaste.com/" target="_blank" rel="noopener">https://www.snipaste.com/</a></p>
<hr>
<p>这是一款截图软件，部分功能需要付费，由于小编只用了免费的功能，因此只能给读者们演示他的免费功能，为什么市面如此多的截图软件我偏偏要推荐这款呢，上演示：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-d5f3365952bda2df.gif?imageMogr2/auto-orient/strip" alt="强大的贴图功能"></p>
<p>这款软件总体来说截图十分便捷，截图快捷键“F1”，贴图快捷键“F3”，不占用常用快捷键，当然了，截图之后的编辑功能也较为丰富，如果对编辑功能需求比较大，新版本的QQ自带的截图也是较为不错的选择，新版本的QQ自带的截图可以一键添加序号、批注，对于教育类的用户帮助较大，如下图所示：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-13ccc4bf13121b84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图"></p>
<h1 id="NO-5-格式工厂"><a href="#NO-5-格式工厂" class="headerlink" title="NO.5 格式工厂"></a>NO.5 格式工厂</h1><p>下载地址：<a href="http://www.pcfreetime.com/" target="_blank" rel="noopener">http://www.pcfreetime.com/</a></p>
<hr>
<p>一款老牌的软件，很有名气，功能就如名字所示，可以转换各种格式，不再担心格式不兼容。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-079ad1732d934104.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="界面截图"></p>
<p>非常全能，各种格式都可以转换，并且现版本还加入去除水印，快速剪辑等新功能，但是安装过程中的广告比较多，读者一定要注意：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-21accbe8d5534468.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装过程中的捆绑"></p>
<h1 id="NO-6-密码键盘"><a href="#NO-6-密码键盘" class="headerlink" title="NO.6 密码键盘"></a>NO.6 密码键盘</h1><p>下载地址：<a href="http://www.passwordkeyboard.com/#home" target="_blank" rel="noopener">http://www.passwordkeyboard.com/#home</a></p>
<hr>
<p>相信读者们现在也会使用很多的网站，不同的网站对不同的密码要求也不同，导致用户很容易忘记自己设定的网站，小编推荐的这款软件是移动端的一款软件，在手机端十分好用，下面是官方的项目视频：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-51493a3e7df0443c.gif?imageMogr2/auto-orient/strip" alt="密码键盘"></p>
<p>这款软件一年仅需15元可解锁无限量的账号密码，不开会员可以使用部分功能可以满足日常所需，但是在PC端必须需要手机辅助才能使用，因此PC端本工具不太实用，移动端可以尝试本款软件，使用较为流畅。</p>
<h1 id="NO-7-TeamViewer"><a href="#NO-7-TeamViewer" class="headerlink" title="NO.7 TeamViewer"></a>NO.7 TeamViewer</h1><p>下载地址：<a href="https://www.teamviewer.cn/cn/download/windows/" target="_blank" rel="noopener">https://www.teamviewer.cn/cn/download/windows/</a></p>
<hr>
<p>这是一款比较有名气的远程协助软件功能不需要多说，就是别人远程帮助你完成你不懂的操作，这款软件使用起来极其流畅：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-ff4a8281ea874e16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TeamViewer"></p>
<p>使用时只需双方同时开着这款软件，输入ID与密码即可连接，设置轻松访问可以在机主未在的时候直接访问，这个适用于在家庭/公司的时候访问别的工作地点的个人电脑。</p>
<h1 id="NO-8-ScreenToGif"><a href="#NO-8-ScreenToGif" class="headerlink" title="NO.8 ScreenToGif"></a>NO.8 ScreenToGif</h1><p>下载地址：<a href="https://www.screentogif.com/" target="_blank" rel="noopener">https://www.screentogif.com/</a></p>
<hr>
<p>上文中所使用的GIF图就是通过本软件生成的，使用流程很方便，点击录制，调整区域之后点击右下角的录制即可进行屏幕录制，生成的画质很好，软件也是免费的。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-db2ad2d90f397f58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ScreenToGif"></p>
<h1 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h1><p>本模块推荐的软件用于用户平时观看视频、图片等娱乐类的项目。（以下排名无先后）</p>
<h1 id="NO-1-完美解码"><a href="#NO-1-完美解码" class="headerlink" title="NO.1 完美解码"></a>NO.1 完美解码</h1><p>下载地址：<a href="http://jm.wmzhe.com/" target="_blank" rel="noopener">http://jm.wmzhe.com/</a></p>
<hr>
<p>这款软件可以基本解决所有的视频、音频格式问题（腾讯、爱奇艺等特有格式除外），再也不用担心视频格式不兼容了。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-2daa8139df517eec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="完美解码"></p>
<h1 id="NO-2-zoommy"><a href="#NO-2-zoommy" class="headerlink" title="NO.2 zoommy"></a>NO.2 zoommy</h1><p>下载地址：<a href="https://zoommyapp.com/" target="_blank" rel="noopener">https://zoommyapp.com/</a></p>
<hr>
<p>一个可免费商用图片的网站聚合软件，由于本软件大部分网页为外国网站，所以需要科学上网才能使用。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-9ff04dda0cb526e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="zoommy"></p>
<h1 id="NO-3-ApowerMirror"><a href="#NO-3-ApowerMirror" class="headerlink" title="NO.3 ApowerMirror"></a>NO.3 ApowerMirror</h1><p>下载地址：<a href="https://www.apowersoft.cn/phone-mirror" target="_blank" rel="noopener">https://www.apowersoft.cn/phone-mirror</a></p>
<hr>
<p>这款软件可以将你的手机投到你的电脑上，有WIFI和USB两种模式，满足各种人群的使用，小编测试这款软件手机屏幕玩游戏投到电脑上的延迟并不太高，产品介绍如下图所示：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-781c39abbfd54620.gif?imageMogr2/auto-orient/strip" alt="ApowerMirror"></p>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>在本模块中小编将为大家推荐一些提高学习效率的神器，小编也在一直使用，接下来开始吧。</p>
<h3 id="No-1-Chrome"><a href="#No-1-Chrome" class="headerlink" title="No.1 Chrome"></a>No.1 Chrome</h3><p>下载地址：<a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">https://www.google.cn/intl/zh-CN/chrome/</a></p>
<hr>
<p>软件介绍：Chrome是一款浏览器，他的开发商是大家所熟知的谷歌，如果大家没听说过谷歌，那么你手机上所用的安卓操作系统就是谷歌家的软件，Chrome不止一个版本，小编总结了谷歌官网的所有Chrome版本如下图所示：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-dede21610ca7b87d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Chrome"></p>
<p>不同版本的Chrome网站链接如下：</p>
<blockquote>
<p>稳定版：<a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">https://www.google.cn/intl/zh-CN/chrome/</a><br>开发版：<a href="https://www.google.cn/intl/zh-CN/chrome/dev/" target="_blank" rel="noopener">https://www.google.cn/intl/zh-CN/chrome/dev/</a><br>测试版：<a href="https://www.google.cn/intl/zh-CN/chrome/beta/" target="_blank" rel="noopener">https://www.google.cn/intl/zh-CN/chrome/beta/</a><br>Canary版：<a href="https://www.google.cn/intl/zh-CN/chrome/canary/" target="_blank" rel="noopener">https://www.google.cn/intl/zh-CN/chrome/canary/</a></p>
</blockquote>
<p>一般上网使用Chrome就足够了，运行快而且安全系数高。如下图所示，Chrome启动速度极快。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-ee7e1aa89577eda6.gif?imageMogr2/auto-orient/strip" alt="极快的启动速度"></p>
<p>如果你能够科学上网，你可以使用Chrome的网上商店来获取海量的插件，</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-0441f8abfacedb85.gif?imageMogr2/auto-orient/strip" alt="海量插件.gif"></p>
<p>为什么我会推荐Chrome浏览器，因为面向普通用户、开发者、以及极客都有对应的版本，但是如果你只想好好地用一个浏览器，我会推荐你下面这款浏览器：</p>
<h3 id="Edge（Chromium版"><a href="#Edge（Chromium版" class="headerlink" title="Edge（Chromium版)"></a>Edge（Chromium版)</h3><p>下载地址：<a href="https://www.microsoftedgeinsider.com/zh-cn/download/" target="_blank" rel="noopener">https://www.microsoftedgeinsider.com/zh-cn/download/</a></p>
<hr>
<p>它有三个版本可供选择每个版本同样的支持<code>Windows 10/8.1/8/7</code>和<code>MacOS</code>，但是稳定版却一直没有发布。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-3de08d3b7a18c14d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Edge"></p>
<p>自这款浏览器发布小编就开始使用<code>Beta</code>版，没有出现过任何问题，这个测试版的稳定性还是不错的，但是这款浏览器刚刚发布没多久，插件相对来说较少，但是由于国内能够使用微软的所有产品，因此同步性完全没有问题，你完全可以一个账号走天下，Edge（Chromium）的使用与Chrome基本一致，最优秀的一点是<strong>你甚至可以将你以前在Chrome的使用习惯、书签以及账号密码一键同步</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-5814b85f14b2033d.gif?imageMogr2/auto-orient/strip" alt="一键导入"></p>
<p>Edge提供了一个创新性的快速访问，他将网页封装成一个应用程序，可以独立运行。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-f823917529c1e694.gif?imageMogr2/auto-orient/strip" alt="edge安装应用"></p>
<h3 id="AxMath和AxGlyph"><a href="#AxMath和AxGlyph" class="headerlink" title="AxMath和AxGlyph"></a>AxMath和AxGlyph</h3><p>下载地址：<a href="http://www.amyxun.com/" target="_blank" rel="noopener">http://www.amyxun.com/</a></p>
<hr>
<p>相信读者听说过MathType这款软件，下图为MathType的售价，MathType这款软件比较好看，界面也比较美观整洁，但是价格稍微高了一些。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-867a6714a01206ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MathType"></p>
<p>我接下来推荐的这款软件和MathType是同等类型的：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-43a9d419b88d138c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Ax"><br><img src="https://upload-images.jianshu.io/upload_images/10646648-e571c59ace6628b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AxMath"><br><img src="https://upload-images.jianshu.io/upload_images/10646648-8c93001b712bd8a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AxGlyph"></p>
<p>两款软件加起来的价格还不及MathType的三分之一，同样的这两款软件和MathType一样，同样可以随Office套件而启动：<br><img src="https://upload-images.jianshu.io/upload_images/10646648-7bb8680ac4851495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Office套件"></p>
<p>软件内部的功能也极其丰富：<br><img src="https://upload-images.jianshu.io/upload_images/10646648-91c536d9cd8dd794.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="软件功能"></p>
<p>无需购买即可使用大量的基础功能。算是写论文的利器之一。</p>
<h3 id="Office365"><a href="#Office365" class="headerlink" title="Office365"></a>Office365</h3><p>下载地址：<a href="https://www.office.com/" target="_blank" rel="noopener">https://www.office.com/</a></p>
<hr>
<p>这是微软的办公套件，相比于WPS我更推荐这一款软件。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-69c21b2d07b31a49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="office365"></p>
<p>这款软件涵盖领域较为广泛，凡是办公所需要的软件，他通通都有。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-4f87c3d626fe0b53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="office365"></p>
<p>这款软件一年300余元，但是可以安装6台终端，相当于每个人一年才不到50元，50元的年费能够获得永久更新的服务也是比较实惠的。</p>
<p>当然了，如果真的是不想要花这么多钱，可以去<a href="https://otp.landian.vip/zh-cn/" target="_blank" rel="noopener">https://otp.landian.vip/zh-cn/</a>找一下解决方案。</p>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><p>下载地址：<a href="https://todo.microsoft.com/tasks/" target="_blank" rel="noopener">https://todo.microsoft.com/tasks/</a></p>
<hr>
<p>这是一款日程管理软件，相对于滴答清单等同类的产品，他完全免费，并且多终端同步。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-71cf86a17f0c98fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TODO"></p>
<p>简洁的界面，优秀的使用逻辑都使得这款软件成为一款极其出色的软件。</p>
<h3 id="Xmind"><a href="#Xmind" class="headerlink" title="Xmind"></a>Xmind</h3><p>下载地址：<a href="https://www.xmind.cn/" target="_blank" rel="noopener">https://www.xmind.cn/</a></p>
<hr>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-496a75817c4fcf2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Xmind"></p>
<p>作为一款老牌的思维导图软件，Xmind是非常出色的，头脑风暴、高效整理、激发创意这些创新的思维方式在这款软件上体现的淋漓尽致。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-08653dc61217de18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="定价"></p>
<p>每年388元可在5台设备上安装，价格稍微有点儿昂贵，但是相对于MindManager还是比较实惠的。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-95bba90bf5e1363d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MindManager"></p>
<h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><p>如何让你的电脑变得更好看。</p>
<h3 id="TranslucentTB"><a href="#TranslucentTB" class="headerlink" title="TranslucentTB"></a>TranslucentTB</h3><p>下载地址：<a href="https://www.microsoft.com/zh-cn/p/translucenttb-%e6%b1%89%e5%8c%96-by-tpxxn/9n5w18jc9bg2#activetab=pivot:overviewtab" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/p/translucenttb-%e6%b1%89%e5%8c%96-by-tpxxn/9n5w18jc9bg2#activetab=pivot:overviewtab</a></p>
<hr>
<p>演示网站：<a href="https://translucenttb.github.io/tips" target="_blank" rel="noopener">https://translucenttb.github.io/tips</a></p>
<p>这是一款Win10任务栏透明化的一款软件，我在很久之前在B站投过一个视频，感兴趣的读者可以去看一下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-b024fb22a0f3a82e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="视频截图"></p>
<p>视频链接：<a href="https://www.bilibili.com/video/av28705280" target="_blank" rel="noopener">B站-小软件打造炫酷桌面</a></p>
<h3 id="Groupy"><a href="#Groupy" class="headerlink" title="Groupy"></a>Groupy</h3><p>下载地址：<a href="https://www.stardock.com/products/groupy/" target="_blank" rel="noopener">https://www.stardock.com/products/groupy/</a></p>
<hr>
<p>这是一款多窗口管理软件，他可以将你的应用像浏览器一样一个窗口上有很多标签，每个标签对应着一款软件，避免了很多软件重叠在一起显得桌面很乱</p>
<p><img src="https://upload-images.jianshu.io/upload_images/10646648-238da4452627b8dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多窗口管理软件"><br>图片来源：<a href="https://www.lizhi.io/product/groupy" target="_blank" rel="noopener">https://www.lizhi.io/product/groupy</a></p>
<hr>
<p>文章到这里就结束了！<br>Windows端好用的软件确确实实有人整理过，<br><img src="https://upload-images.jianshu.io/upload_images/10646648-69cbf60dc9adf466.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Windows绝妙的项目"><br>直达链接：<a href="https://amazing-apps.gitbook.io/windows-apps-that-amaze-us/zh-cn" target="_blank" rel="noopener">Windows绝妙的项目</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Neumorphism——新拟态设计</title>
    <url>/2020/02/20/Neumorphism%E2%80%94%E2%80%94%E6%96%B0%E6%8B%9F%E6%80%81%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<div class="note info no-icon"><p>我阅读了现有的几篇有关<strong>Neumorphism</strong>的文章，个人的见解随手记一下</p></div>
<a id="more"></a>
<p>最近迷上了一种风格——<strong>Neumorphism</strong>风，那这种风格长什么样子呢，先通过一张图片来了解一下：<br><img src="https://upload-images.jianshu.io/upload_images/10646648-d7d7598c990a87c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="来自Dribbble的 MazePixel作品Freebie Neumorphic UX UI Elements"></p>
<p>这是一种新的设计风格，可能有的读者会说这不就是扁平风嘛，其实不然，这种风格相对于扁平风增加了高度，何为高度，我们可以从上图中感知到组件的突出与凹陷，有的读者会想到，这很类似于桌面上的一张张的卡片，实际上缺失如此，它是一种新型的拟物化设计，如下图所示：<br><img src="https://upload-images.jianshu.io/upload_images/10646648-8eed41ea921b79a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="来自Dribbble的Timotius Muliawan作品Banking App Neumorphism Exploration"></p>
<p>何为拟物化设计，如名称所示，就是模拟物体状态的设计，根据前人的经验，拟物化设计由三部分组成：</p>
<ul>
<li>主体</li>
<li>高光</li>
<li>阴影</li>
</ul>
<p>而高光阴影的位置表现出主体的状态，使用外阴影来表现主体突出也就暗示这个按钮未选中，而当按钮按下，外阴影改变为内阴影，如下图所示：<br><img src="https://upload-images.jianshu.io/upload_images/10646648-cf318a1f578cefa6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="来自Dribbble的OTAKOYI作品Neumorphism UI Trend 2020"></p>
<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul>
<li><a href="https://www.zcool.com.cn/article/ZMTEwMTA5Mg==.html" target="_blank" rel="noopener">设计趋势 Neumorphism 是什么？</a>  </li>
<li><a href="https://www.zcool.com.cn/article/ZMTA5ODAwNA==.html" target="_blank" rel="noopener">Neumorphism（新拟态）UI设计趋势吗？</a>  </li>
<li><a href="http://www.woshipm.com/pd/3386232.html" target="_blank" rel="noopener">新拟态——国外设计师分析的全新UI趋势</a>  </li>
<li><a href="https://uxdesign.cc/neumorphism-in-user-interfaces-b47cef3bf3a6" target="_blank" rel="noopener">Neumorphism in user interfaces</a> </li>
<li><a href="https://uxdesign.cc/neumorphism-will-not-be-a-huge-trend-in-2020-67a8c35e52cc" target="_blank" rel="noopener">Neumorphism will NOT be a huge trend in 2020</a>  </li>
<li><a href="https://neumorphism.io/#55b9f3" target="_blank" rel="noopener">拟态生成工具</a> </li>
<li><a href="https://www.uisdc.com/2020-neumorphism" target="_blank" rel="noopener">2020 年最火的设计趋势Neumorphism，快来了解下！</a>  </li>
<li><a href="https://www.uisdc.com/2020-ui-neumorphism" target="_blank" rel="noopener">新拟物化会是2020年的UI设计趋势吗？</a></li>
</ul>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>设计趋势</tag>
        <tag>Neumorphism</tag>
      </tags>
  </entry>
  <entry>
    <title>武汉疫情大事记</title>
    <url>/2020/02/05/%E6%AD%A6%E6%B1%89%E7%96%AB%E6%83%85%E5%A4%A7%E4%BA%8B%E8%AE%B0/</url>
    <content><![CDATA[<p>  <strong>1月20日   腊月二十六</strong><br>  ●中共中央总书记、国家主席、中央军委主席习近平作出重要指示，要求各级党委和政府及有关部门要把人民群众生命安全和身体健康放在第一位，制订周密方案，组织各方力量开展防控，采取切实有效措施，坚决遏制疫情蔓延势头。<br><a id="more"></a>  ●中共中央政治局常委、国务院总理李克强作出批示，各相关部门和地方要以对人民群众健康高度负责的态度，完善应对方案，全力以赴做好防控工作。当天，李克强主持召开国务院常务会议，进一步部署新型冠状病毒感染的肺炎疫情防控工作。<br>  ●中共中央政治局委员、国务院副总理孙春兰召开国务院应对新型冠状病毒感染的肺炎疫情联防联控工作机制会议，部署落实疫情防控各项工作。<br>  ●国家卫生健康委成立新型冠状病毒感染的肺炎应对处置工作领导小组，发布公告，将新型冠状病毒感染的肺炎纳入《传染病防治法》规定的乙类传染病，并采取甲类传染病的预防、控制措施。<br>  ●国家卫生健康委召开媒体发布会，邀请钟南山、高福、曾光、李兰娟、袁国勇5位国家卫生健康委高级别专家组成员，就武汉肺炎疫情相关情况回答媒体提问。专家表示，新型冠状病毒传染已确认存在人传人和医务人员感染。<br>  ●武汉市成立新型冠状病毒感染的肺炎疫情防控指挥部。</p>
<p>  <strong>1月21日   腊月二十七</strong><br>  ●国家卫生健康委牵头成立应对新型冠状病毒感染的肺炎疫情联防联控工作机制，成员单位共32个部门。联防联控工作机制下设多个工作组，分别由相关部委负责同志任组长。<br>  ●国家医保局要求全国医保系统确保患者不因费用问题得不到及时救治，确保定点医疗机构不因医保总额预算管理规定影响救治。<br>  ●武汉市安排3家定点医院800张床位用于收治病人，还将在最短时间内腾出1200张床位，所有确诊病人均可享受免费救治。<br>  ●世界卫生组织派出专家组赴武汉市实地考察，赞赏中方主动通报疫情信息和分享病毒基因序列以及愿进一步分享防控、诊疗等技术方案和诊断试剂、引物等。</p>
<p>  <strong>1月22日   腊月二十八</strong><br>  ●《新型冠状病毒感染的肺炎防控方案（第二版）》发布，国家卫生健康委组织制订了新型冠状病毒感染的肺炎病例监测方案、流行病学调查方案、可疑暴露者和密切接触者管理方案以及实验室检测技术指南。<br>  ●国家医保局决定对确诊新型冠状病毒感染肺炎患者采取特殊报销政策，相关诊疗药品和医疗服务项目全部纳入医保基金支付范围，患者医疗费用不再纳入医院总额预算控制指标。</p>
<p>  <strong>1月23日   腊月二十九</strong><br>  ●武汉市新型冠状病毒感染的肺炎疫情防控指挥部发布消息，自1月23日10时起，武汉全市城市公交、地铁、轮渡、长途客运暂停运营；机场、火车站离汉通道暂时关闭。<br>  ●中共中央政治局委员、国务院副总理孙春兰召开国务院应对新型冠状病毒感染的肺炎疫情联防联控工作机制会议。<br>  ●国家卫生健康委发布《关于加强新型冠状病毒感染的肺炎重症病例医疗救治工作的通知》，要求严格落实“集中患者、集中专家、集中资源、集中救治”原则，安排最强有力的医疗力量和医疗机构进行医疗救治。<br>  ●武汉蔡甸火神山医院开始建设，计划于2月3日前建成投入使用，计划容纳700张~1000张床位。</p>
<p>  <strong>1月24日   除夕</strong><br>  ●中共中央政治局委员、国务院副总理孙春兰召开国务院应对新型冠状病毒感染的肺炎疫情联防联控工作机制会议。<br>  ●科技部组织召开新型冠状病毒联防联控工作机制科研攻关组第一次会议，成立以钟南山院士为组长、14位专家组成的疫情联防联控工作机制科研攻关专家组。<br>  ●湖北省启动重大突发公共卫生事件一级响应。<br>  ●在国家层面的统一协调指挥下，海军军医大学、空军军医大学、陆军军医大学医疗队，各省各地援鄂医疗队，国家卫生健康委组织委属委管医院组织国家医疗队，中国中医科学院组织国家中医医疗队，各级各类医疗队纷纷紧急驰援湖北。</p>
<p>  <strong>1月25日   正月初一</strong><br>  ●中共中央政治局常务委员会召开会议，专门听取新型冠状病毒感染的肺炎疫情防控工作汇报，对疫情防控特别是患者治疗工作进行再研究、再部署、再动员。中共中央总书记习近平主持会议并发表重要讲话。<br>  ●浙江、四川、山东、湖南等省份组织医疗队，驰援武汉。第一批国家中医医疗队也赶赴武汉防疫一线。<br>  ●武汉市决定建造武汉雷神山医院，集中收治新型冠状病毒肺炎患者。<br>  ●全国已有30个省（区、市）宣布启动重大突发公共卫生事件一级响应。</p>
<p>  <strong>1月26日  正月初二</strong><br>  ●中共中央政治局常委、国务院总理、中央应对新型冠状病毒感染肺炎疫情工作领导小组组长李克强主持召开领导小组会议。会议指出，各级党委政府要把疫情防控作为当前最重要的工作来抓，采取更果断、更有力有序、更科学周密举措，有效遏制疫情蔓延。<br>  ●国家卫生健康委办公厅发布通知，要求各地社区卫生服务中心（站）和乡镇卫生院、村卫生室充分发挥在肺炎疫情防控中的网底作用，配合居委会、村委会做好社区防控工作。<br>  ●由北京医院、北京协和医院、中日友好医院、北京大学第一医院、北京大学人民医院、北京大学第三医院的121名医务人员组成的国家援鄂抗疫医疗队，山西省从35家医院抽调137人组成的援鄂医疗队，河南省从5家医院抽调人员组成的首批援鄂医疗队，吉林省组建135人的医疗队，赴鄂开展医疗援助工作。<br>  ●国家发展改革委紧急下达3亿元，专项补助收治新型冠状病毒感染肺炎患者的武汉火神山医院和武汉雷神山医院项目建设。<br>  ●国家药监局应急审批通过4家企业4个新型冠状病毒检测产品，进一步扩大新型冠状病毒核酸检测试剂供给能力。</p>
<p>  <strong>1月27日  正月初三</strong><br>  ●中共中央总书记、国家主席、中央军委主席习近平作出重要指示强调，在当前防控新型冠状病毒感染肺炎的严峻斗争中，各级党组织和广大党员干部必须牢记人民利益高于一切，不忘初心、牢记使命，团结带领广大人民群众坚决贯彻落实党中央决策部署，全面贯彻坚定信心、同舟共济、科学防治、精准施策的要求，让党旗在防控疫情斗争第一线高高飘扬。<br>  ●中共中央政治局常委、国务院总理、中央应对新型冠状病毒感染肺炎疫情工作领导小组组长李克强赴武汉考察指导疫情防控工作，代表党中央、国务院慰问疫情防控一线的医务人员。他强调，各地各部门要全面落实党中央、国务院决策部署，把人民群众生命安全和身体健康放在第一位，同舟共济、齐心协力做好疫情防控工作。<br>  ●《新型冠状病毒感染的肺炎诊疗方案（试行第四版）》发布。诊疗方案特别指出，各有关医疗机构要在医疗救治工作中加强中西医结合，建立中西医联合会诊制度，促进医疗救治取得良好效果。<br>  ●国家医疗保障局、财政部、国家卫生健康委发布通知，要求保障疑似患者医疗费用，确保确诊或疑似异地就医患者先行救治；动态调整报销范围、及时更新信息系统，并协同做好疫情防控相关药品和耗材采购与价格监测监管。<br>  ●重庆、云南、黑龙江、安徽、福建援鄂医疗队抵达湖北省孝感市。北京市属医院医疗队出发驰援武汉。上海市再次紧急组建以护理人员为主的50人医疗队赶赴武汉。</p>
<p>  <strong>1月28日  正月初四</strong><br>  ●国家主席习近平在人民大会堂会见世界卫生组织总干事谭德塞。习近平强调，在中国共产党的坚强领导下，充分发挥中国特色社会主义制度优势，紧紧依靠人民群众，坚定信心、同舟共济、科学防治、精准施策，我们完全有信心、有能力打赢这场疫情防控阻击战。<br>  ●中共中央政治局委员、国务院副总理孙春兰率领中央指导组在湖北开展疫情防控指导工作。指导组连续召开会议听取湖北省疫情防控工作情况汇报，研究指导进一步做好疫情防控、病患救治、流行病学调查、宣传舆论引导等工作。<br>  ●中共中央印发《关于加强党的领导、为打赢疫情防控阻击战提供坚强政治保证的通知》。<br>  ●国家卫生健康委发布《新型冠状病毒感染的肺炎病例转运工作方案（试行）》《新型冠状病毒感染的肺炎防控方案（第三版）》《关于进一步加强县域新型冠状病毒感染的肺炎医疗救治工作的通知》等。<br>  ●新疆、青海、甘肃、内蒙古、贵州派出医疗队驰援湖北。浙江、广东、四川、江苏、上海、山东、天津、湖南第二批医疗队纷纷赶往湖北。</p>
<p>  <strong>1月29日  正月初五</strong><br>  ●中共中央总书记、国家主席、中央军委主席习近平对军队做好新型冠状病毒感染的肺炎疫情防控工作作出重要指示，强调全军要在党中央和中央军委统一指挥下，牢记人民军队宗旨，闻令而动，勇挑重担，敢打硬仗，积极支援地方疫情防控。<br>  ●中共中央政治局常委、国务院总理、中央应对新型冠状病毒感染肺炎疫情工作领导小组组长李克强主持召开领导小组会议。会议强调，全力做好医疗防控物资保障，科学优化重点物资配置和使用范围，切实做好节后人员返程疫情防控工作。<br>  ●中共中央政治局委员、国务院副总理孙春兰强调，要着重解决医用物资生产企业面临的各种实际困难，推动企业尽快复产达产；在确保安全的前提下，坚持分级分类使用防护服等紧缺物资，把有限的资源用在最需要的地方和人员身上。<br>  ●国家卫生健康委、国家中医药管理局发布通知，要求二级及以上医疗机构制订应对春节假期后群众就诊高峰的具体工作方案，加强医务人员和医用物资调配储备。<br>  ●来自26个省（区、市）及解放军的52支医疗队、6097名医务人员抵达湖北展开支援。31个省（区、市）全部启动重大突发公共卫生事件一级响应。</p>
<p>  <strong>1月30日  正月初六</strong><br>  ●中共中央政治局常委、国务院总理、中央应对新型冠状病毒感染肺炎疫情工作领导小组组长李克强赴中国疾控中心考察疫情防控科研攻关情况，并主持召开专家座谈会。李克强说，当前疫情形势复杂严峻，希望专家们加强对疫情走势的研判，及时发现新情况，为更有针对性地控制疫情传播提供专业支撑。<br>  ●中共中央政治局委员、国务院副总理孙春兰率中央指导组在武汉市看望慰问奋战在一线的医护人员。孙春兰强调，要落实中央应对疫情领导小组的部署，加强对医务人员的防护和保障工作，医护人员作为这场攻坚战的主力军，医护人员的安全保障就是广大患者的生命保证。<br>  ●民政部、国家卫生健康委发布《关于进一步动员城乡社区组织开展新型冠状病毒感染的肺炎疫情防控工作的紧急通知》。要求按照“追踪到人、登记在册、社区管理、上门观察、规范运转、异常就医”的原则对来自疫情发生地区的人员、外地返回居住地的人员进行有效管理。<br>  ●交通运输部印发通知，要求应急运输始发地和目的地收费站开通防疫物资运输绿色通道，免收全程车辆通行费，保障应急运输车辆优先通行。<br>  ●西藏自治区卫生健康委发布消息称，西藏确诊首例新型冠状病毒感染的肺炎病例。全国各省（区、市）均有确诊病例报告。<br>  ●世界卫生组织总干事谭德塞结束对中国的访问回到日内瓦。他在当晚的记者会上表示，中国应对新型冠状病毒感染肺炎疫情的努力值得“感激和尊重”，同时称赞中国以团结、合作的原则与世卫组织和其他国家开展合作。<br>  ●国家卫生健康委发布《关于进一步做好农村地区新型冠状病毒感染的肺炎疫情防控工作的通知》。<br>  ●经中央领导同志同意，中央组织部从代中央管理党费中给31个省区市、中央有关部门（系统）划拨专项资金10800万元，用于支持各地区各有关部门（系统）开展新型冠状病毒感染的肺炎疫情防控工作。<br>   ●为协助滞留外地的旅客返回武汉，民航局批复部分航空公司申请境外至武汉的包机运行，要求各航空公司不能拒绝通过健康检测的武汉旅客登机，并做好机组成员和旅客信息的留存工作。同时，民航湖北监管局也对航空公司飞行安全工作进行了强调，要求要安排政治性强、飞行作风好、技术能力突出的飞行机组执行航班，确保旅客安全回家。</p>
<p>  <strong>1月31日 正月初七</strong><br>  ●当地时间1月30日晚，世界卫生组织总干事谭德塞在日内瓦举行新闻发布会，说明新型冠状病毒感染的肺炎疫情已构成国际关注的突发公共卫生事件。谭德塞强调，世卫组织不赞成甚至反对对中国采取旅行或贸易禁令。<br>  ●中国政府派出的首批民航包机先后从泰国曼谷、马来西亚哥打基纳巴卢抵达武汉天河国际机场，接回199名滞留在当地的湖北籍公民。<br>  <br>  <strong>2月1日 正月初八</strong><br>  ●记者从中国国家铁路集团有限公司获悉，根据有关部门要求，为加强新型冠状病毒感染的肺炎疫情防控工作，便于在需要时及时联系乘车旅客，自2月1日起，购票人须提供每一名乘车旅客本人使用的手机号码，方可购票。<br>  <br>  <strong>2月2日 正月初九</strong><br>  ●下午2时，武汉市金银潭医院有37名确诊新型冠状病毒肺炎患者出院，是迄今为止该院出院人数最多的一天。<br>  ●上午，武汉火神山医院举行交付仪式，武汉市市长周先旺和联勤保障部队白忠斌副司令员在武汉火神山医院签署互换交接文件，标志着火神山医院正式交付人民军队医务工作者。<br>  <br>  <strong>2月3日 正月初十</strong><br>  ●中共中央政治局常务委员会召开会议，听取中央应对新型冠状病毒感染肺炎疫情工作领导小组和有关部门关于疫情防控工作情况的汇报，研究下一步疫情防控工作。中共中央总书记习近平主持会议并发表重要讲话。<br>  <br>  <strong>2月4日 正月十一</strong><br>  ●2月4日，民航局要求国内各航空公司在考虑市场需求取消部分航班的同时，除对方国家实施航行限制措施外，要确保通航国家不断航。<br>  ●2月4日，经过军队支援湖北医疗队扎实细致、紧张有序的准备工作，武汉火神山医院今天开始正式接诊新型冠状病毒感染的肺炎确诊患者，9时30分许收治首批患者。</p>
]]></content>
      <categories>
        <category>大事记</category>
      </categories>
      <tags>
        <tag>武汉</tag>
        <tag>冠状病毒</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo设置每页文章显示数</title>
    <url>/2020/02/04/hexo%E8%AE%BE%E7%BD%AE%E6%AF%8F%E9%A1%B5%E6%96%87%E7%AB%A0%E6%98%BE%E7%A4%BA%E6%95%B0/</url>
    <content><![CDATA[<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><a id="more"></a>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br></pre></td></tr></table></figure>
<div class="note primary no-icon"><p>这个标签中的<code>per_page</code>可以设置归档页面显示的条目</p></div>
<hr>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure>
<div class="note primary no-icon"><p>这个标签中的<code>per_page</code>可以每页显示文章的数目</p></div>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>有关文章优先级的设定：<br><a class="btnc" href="http://www.iamlj.com/2016/07/add-set-top-function-for-hexo/" target="_blank" rel="noopener">文章优先级</a></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>向NEXT内置样式note中添加剪贴板</title>
    <url>/2020/01/31/%E5%90%91NEXT%E5%86%85%E7%BD%AE%E6%A0%B7%E5%BC%8Fnote%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%89%AA%E8%B4%B4%E6%9D%BF/</url>
    <content><![CDATA[<p>最近在奋斗PAT，想把做出来的题目以及过程放到个人博客上，我希望能够实现像PAT网站中那样输入样例和输出样例能够复制粘贴的同时代码也要能够复制粘贴<a id="more"></a>，一开始通过将输入样例与输出样例放到代码块中，但是，出现了前面带序号的问题。<br>我的需求是：<strong>代码能够复制但是需要显示序号，便于查看。输入输出能够复制，但是不需要显示序号。</strong><br>做到如图的效果分为以下三步：</p>
<ul>
<li>代码前添加序号</li>
<li>代码区域添加剪贴板</li>
<li>note区域添加剪贴板</li>
</ul>
<h3 id="代码前添加序号"><a href="#代码前添加序号" class="headerlink" title="代码前添加序号"></a>代码前添加序号</h3><p>在<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">HEXO官方文档</a>中：<br><img src="http://free-cn-01.cdn.bilnn.com/ddimg/jfs/t1/105265/26/11532/52211/5e38ff4bEa1927732/91416dbeef78ab38.png" alt=""></p>
<p>存在代码高亮和序号的设置，我们通过根目录打开站点配置文件<code>_config.yml</code>,在约47行左右会找到如下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>将<code>line_number</code>设置为<code>ture</code>即可。</p>
<h3 id="代码区域添加剪贴板"><a href="#代码区域添加剪贴板" class="headerlink" title="代码区域添加剪贴板"></a>代码区域添加剪贴板</h3><p>参考<strong>Felix</strong>大佬的文章：Hexo-Next搭建个人博客（代码块复制功能）<a class="btnc" href="https://yfzhou.coding.me/2018/08/27/Hexo-Next搭建个人博客（代码块复制功能）/" target="_blank" rel="noopener">直达按钮</a></p>
<h3 id="note区域添加剪贴板"><a href="#note区域添加剪贴板" class="headerlink" title="note区域添加剪贴板"></a>note区域添加剪贴板</h3><p>假设已经看完了<strong>代码区域添加剪贴板</strong>，还需要了解一下Next的内置标签有关<strong>note标签</strong>的部分<a class="btnc" href="https://yfzhou.coding.me/2018/08/27/Hexo-Next搭建个人博客（代码块复制功能）/" target="_blank" rel="noopener">直达按钮</a><br>接下来进行最后一步，在note中添加剪贴板，具体操作如下：<br>由于note区域与代码区域的样式不同，因此需要设定note部分的css，在<code>.\themes\next\source\css\_custom\custom.styl</code>后添加CSS代码：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.note-copy</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">background-color</span>: transparent;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-ms-user-select</span>: none;</span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">    <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#222</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">-o-transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.note-copy</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.note</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.note-copy</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>之后在<code>.\themes\next\source\js\src\clipboard-use.js</code>中替换为如下代码：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*页面载入完成后，创建复制按钮*/</span></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">    <span class="keyword">var</span> initCopyCode = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> copyHtml = <span class="string">''</span>;</span><br><span class="line">        copyHtml += <span class="string">'&lt;button class="btn-copy" data-clipboard-snippet=""&gt;'</span>;</span><br><span class="line">        <span class="comment">//fa fa-globe可以去字体库替换自己想要的图标</span></span><br><span class="line">        copyHtml += <span class="string">'  &lt;i class="fa fa-clipboard"&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;'</span>;</span><br><span class="line">        copyHtml += <span class="string">'&lt;/button&gt;'</span>;</span><br><span class="line">        $(<span class="string">".highlight .code pre"</span>).before(copyHtml);</span><br><span class="line">        <span class="keyword">new</span> ClipboardJS(<span class="string">'.btn-copy'</span>, &#123;</span><br><span class="line">            target: <span class="function"><span class="keyword">function</span> (<span class="params">trigger</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> trigger.nextElementSibling;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">var</span> notecopy = <span class="string">''</span>;</span><br><span class="line">        notecopy += <span class="string">'&lt;button class="note-copy" data-clipboard-snippet=""&gt;'</span>;</span><br><span class="line">        <span class="comment">//fa fa-globe可以去字体库替换自己想要的图标</span></span><br><span class="line">        notecopy += <span class="string">'  &lt;i class="fa fa-clipboard"&gt;&lt;/i&gt;&lt;span&gt;复制&lt;/span&gt;'</span>;</span><br><span class="line">        notecopy += <span class="string">'&lt;/button&gt;'</span>;</span><br><span class="line">        </span><br><span class="line">        $(<span class="string">".note"</span>).prepend(notecopy);</span><br><span class="line">        <span class="keyword">new</span> ClipboardJS(<span class="string">'.note-copy'</span>, &#123;</span><br><span class="line">            target: <span class="function"><span class="keyword">function</span> (<span class="params">trigger</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> trigger.nextElementSibling;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    initCopyCode();</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><br>通过修改这两部分即可实现所需要的效果。<br>如果markdown文件中存在多种标签，那么需要将这些标签放入<code>&lt;div&gt;</code>中。<br>即：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% note primary %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>b<span class="tag">&lt;/<span class="name">b</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>NEXT</tag>
      </tags>
  </entry>
  <entry>
    <title>next内置标签</title>
    <url>/2020/01/31/next%E5%86%85%E7%BD%AE%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h2 id="本文内容参考NEXT主题官方博客以及Next主题自带部分标签使用教程"><a href="#本文内容参考NEXT主题官方博客以及Next主题自带部分标签使用教程" class="headerlink" title="本文内容参考NEXT主题官方博客以及Next主题自带部分标签使用教程"></a>本文内容参考<a href="http://theme-next.iissnan.com/tag-plugins.html" target="_blank" rel="noopener">NEXT主题官方</a>博客以及<a href="https://www.dazhuanlan.com/2019/12/16/5df665b4abb05/" target="_blank" rel="noopener">Next主题自带部分标签使用教程</a></h2><a id="more"></a>
<h2 id="居中标签"><a href="#居中标签" class="headerlink" title="居中标签"></a>居中标签</h2><p><blockquote class="blockquote-center">这是便签</blockquote><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 其中 class="blockquote-center" 是必须的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span>这是便签<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><br><blockquote class="blockquote-center"><p>这是便签</p>
</blockquote><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span></span><br><span class="line">&#123;% centerquote %&#125;这是便签&#123;% endcenterquote %&#125;</span><br></pre></td></tr></table></figure><br><blockquote class="blockquote-center"><p>这是便签 </p>
</blockquote><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标签别名 --&gt;</span></span><br><span class="line">&#123;% cq %&#125;这是便签&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Note标签"><a href="#Note标签" class="headerlink" title="Note标签"></a>Note标签</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line">&#123;% note class icon %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">#参数解释</span><br><span class="line">class可选项   : default | primary | success | info | warning | danger.</span><br><span class="line">icon可选项 : on-icon | 不填</span><br></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><div class="note default"><p>这个是默认的带图标的标签</p></div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">这个是默认的带图标的标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note default no-icon"><p>这个是默认的不带图标的标签</p></div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% note default no-icon %&#125;</span><br><span class="line">这个是默认的不带图标的标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note primary"><p>这个是primary的带图标的标签</p></div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% note primary %&#125;</span><br><span class="line">这个是primary的带图标的标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note primary no-icon"><p>这个是primary的不带图标的标签</p></div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% note primary no-icon %&#125;</span><br><span class="line">这个是primary的不带图标的标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note success"><p>这个是success的带图标的标签</p></div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% note success %&#125;</span><br><span class="line">这个是success的带图标的标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note success no-icon"><p>这个是success的不带图标的标签</p></div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% note success no-icon %&#125;</span><br><span class="line">这个是success的不带图标的标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note info"><p>这个是info的带图标的标签</p></div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% note info %&#125;</span><br><span class="line">这个是info的带图标的标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note info no-icon"><p>这个是info的不带图标的标签</p></div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% note info no-icon %&#125;</span><br><span class="line">这个是info的不带图标的标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note warning"><p>这个是warning的带图标的标签</p></div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% note waring %&#125;</span><br><span class="line">这个是waring的带图标的标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note warning no-icon"><p>这个是waring的不带图标的标签</p></div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% note warning no-icon %&#125;</span><br><span class="line">这个是waring的不带图标的标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note danger"><p>这个是danger的带图标的标签</p></div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% note danger %&#125;</span><br><span class="line">这个是danger的带图标的标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note danger no-icon"><p>这个是danger的不带图标的标签</p></div>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% note danger no-icon %&#125;</span><br><span class="line">这个是danger的不带图标的标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note info"><div><h4>Next为note提供了四种样式，可以通过主题配置文件<b>_config.yml</b>中的633行左右的note.style进行切换</h4></div></div>
<p><strong>原始代码如下</strong>：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># Note tag (bs-callout).</span><br><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: true</span><br><span class="line">  border_radius: 3</span><br><span class="line">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="line">  light_bg_offset: 0</span><br></pre></td></tr></table></figure></p>
<h2 id="HEXO内置）引用标签源文档"><a href="#HEXO内置）引用标签源文档" class="headerlink" title="(HEXO内置）引用标签源文档"></a>(HEXO内置）引用标签<a class="btnc" href="https://hexo.io/zh-cn/docs/tag-plugins#代码块" target="_blank" rel="noopener">源文档</a></h2><ul>
<li>普通引用块（没有提供参数）<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
在markdown中可以直接通过：<blockquote>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span></span><br></pre></td></tr></table></figure>
<p>实现。</p>
</blockquote>
</li>
<li>引用书上的句子<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure></li>
<li>引用Twitter<blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="noopener">http://devdocs.io</a></p>
<footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="noopener">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;</span><br><span class="line">NEW: DevDocs now comes with syntax highlighting. http://devdocs.io</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure></li>
<li>引用网络上的文章<blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="noopener">Welcome to Island Marketing</a></cite></footer></blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class="line">Every interaction is both precious and an opportunity to delight.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="HEXO内置）代码块源文档"><a href="#HEXO内置）代码块源文档" class="headerlink" title="(HEXO内置）代码块源文档"></a>(HEXO内置）代码块<a class="btnc" href="https://hexo.io/zh-cn/docs/tag-plugins#代码块" target="_blank" rel="noopener">源文档</a></h2><h3 id="默认参数说明"><a href="#默认参数说明" class="headerlink" title="默认参数说明"></a>默认参数说明</h3><div class="table-container">
<table>
<thead>
<tr>
<th>字段名</th>
<th>描述</th>
<th>默认参数</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>line_number</code></td>
<td>显示行标</td>
<td>true</td>
</tr>
<tr>
<td><code>highlight</code></td>
<td>是否高亮</td>
<td>true</td>
</tr>
<tr>
<td><code>first_line</code></td>
<td>首行</td>
<td>1</td>
</tr>
<tr>
<td><code>mark</code></td>
<td>行突出显示特定行，每个值用逗号分隔。使用短划线指定数字范围。示例：标记：1,4-7,10将标记第1、4至7和10行。</td>
<td></td>
</tr>
<tr>
<td><code>wrap</code></td>
<td>将代码放入表格中</td>
<td>true</td>
</tr>
</tbody>
</table>
</div>
<h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h4 id="格式中的参数说明"><a href="#格式中的参数说明" class="headerlink" title="格式中的参数说明"></a>格式中的参数说明</h4><div class="table-container">
<table>
<thead>
<tr>
<th>字段名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>title</code></td>
<td>标题</td>
</tr>
<tr>
<td><code>lang:language</code></td>
<td>语言</td>
</tr>
<tr>
<td><code>url</code></td>
<td>网址</td>
</tr>
<tr>
<td><code>link text</code></td>
<td>网页简介</td>
</tr>
<tr>
<td><code>additiona options</code></td>
<td>其他设置</td>
</tr>
</tbody>
</table>
</div>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight c"><figcaption><span>第一个程序</span><a href="https://baike.baidu.com/item/c语言/105958?fr=aladdin" target="_blank" rel="noopener">C语言简介</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>源代码</strong><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock  第一个程序 lang:c  https://baike.baidu.com/item/c语言/105958?fr=aladdin C语言简介 %&#125;</span><br><span class="line">#include<span class="tag">&lt;<span class="name">stdio.h</span>&gt;</span></span><br><span class="line">int main()&#123;</span><br><span class="line">printf("hello world");</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label [class]@Text %&#125;</span><br><span class="line"></span><br><span class="line">[class] : 可选项default | primary | success | info | warning | danger.</span><br><span class="line">          &#39;@Text&#39; @后添加文本</span><br><span class="line">          如果没设置class的话，默认以default用法</span><br></pre></td></tr></table></figure>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><span class="label default">行内标签</span>其实就是用各种<span class="label primary">不同的颜色</span>来标记文本，例如这是<span class="label primary">primary标签</span>，这是<span class="label default">default标签</span>，这是<span class="label success">success标签</span>，这是<span class="label info">info标签</span>，这是<span class="label warning">warning标签</span>,这是<span class="label danger">danger标签</span>,文本上可以加空格。这是<span class="label success">不加空格的</span>，这是<span class="label success">加了 空格的</span>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% label @行内标签 %&#125;其实就是用各种&#123;% label primary@不同的颜色 %&#125;来标记文本，例如这是&#123;% label primary@primary标签 %&#125;，这是&#123;% label default@default标签 %&#125;，这是&#123;% label success@success标签 %&#125;，这是&#123;% label info@info标签 %&#125;，这是&#123;% label warning@warning标签 %&#125;,这是&#123;% label danger@danger标签 %&#125;,文本上可以加空格。这是&#123;% label success@不加空格的 %&#125;，这是&#123;% label success@加了    空格的 %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p><a class="btnc">这是自定义的按钮</a><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btnc"</span>&gt;</span>这是自定义的按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>NEXT</tag>
      </tags>
  </entry>
  <entry>
    <title>综合素质大题答题技巧</title>
    <url>/2020/01/31/%E7%BB%BC%E5%90%88%E7%B4%A0%E8%B4%A8%E5%A4%A7%E9%A2%98%E7%AD%94%E9%A2%98%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="综合素质答题技巧（大题-作文）"><a href="#综合素质答题技巧（大题-作文）" class="headerlink" title="综合素质答题技巧（大题+作文）"></a>综合素质答题技巧（大题+作文）</h1><h2 id="30-答题套路"><a href="#30-答题套路" class="headerlink" title="30.答题套路"></a>30.答题套路</h2><p>题目：请从教师观/教育观/学生观的角度，评价xx老师的行为（如果不点明哪个观，三观都写上）<a id="more"></a><br>（教师观、教育观、学生观）</p>
<blockquote>
<p><strong>答题总模板：</strong></p>
<blockquote>
<p>总述：该老师的行为符合XXX/践行了xxx/违背了xxx（错误），主要表现在：<br>内容：教育观、教师观、学生观（分开写）<br>总结：充分体现了XX教师XXXXXX<br>例：该老师的行为符合素质教育观，主要表现在<br>1.主动与偏科同学谈话，为其提供其他学科的学习方法，充分体现了他注重学生全面发展。<br>2.与内向的同学谈心，充分体现了他促进学生生动活泼，主动发展。<br>因此，xx老师的行为符合职业道德规范的要求值得我们学习。/因此，xx老师的行为违背了…..，我们应当引以为鉴。</p>
</blockquote>
</blockquote>
<p><strong>教师观答题</strong><br>总述：该老师的教育行为符合新课改背景下的教师观，主要表现在：<br>内容：（扒材料，答理论依据，同总模板）<br><div class="note default no-icon"><p>教师是学生学习的促进者。促进以学习能力为重心的学生整个个性的和谐健康发展。<br>教师是教育教学的研究者。以研究着的心态置身于教学情境中。以研究者的眼光审视和分析教学理论与教学实践中的各种问题。<br>教师是课程结构的建设者和开发者，教师要形成强烈的课程意识和参与意识，改变以往学科本论的观念和消极被动的做法；教师要了解和掌握各个层次的课程知识，不断提高和增强课程建设能力。<br>对待师生关系上，新课改强调尊重、赞赏。<br>对待教学上，新课改强调帮助、引导。<br>对待自我上，新课改强调反思。<br>对待与其他教育者的关系上，新课改强调合作。</p></div></p>
<blockquote>
<p>注：</p>
<ul>
<li>当材料中能体现教师不是课堂的主导者，辅助学生学习可以用第一条。</li>
<li>当材料中能体现教师终生学习（例如写日记、写反思、发表论文、向学生学习）可以用第二条。</li>
<li>当材料中体现教师改变课堂模式（例如小组讨论、学生动手）可以用第三条。</li>
<li>当材料中出现尊重、赞赏、帮助、引导、反思、合作等关键字可以用4-7条。<br>总结：因此，xx老师的行为符合新课改背景下的教师观，值得我们学习。/因此，xx老师的行为违背了….,我们应当引以为鉴。</li>
</ul>
</blockquote>
<p><strong>学生观答题</strong><br>总述：该老师的行为符合”以人为本“的学生观，教育活动中的”以人为本“，是以学生为本，以全体学生全面发展为本，主要表现在：<br>内容：（扒材料，答理论依据，同总模板）<br><div class="note default no-icon"><p>学生是发展中的人，学生是处于发展过程中的人，具有巨大的发展潜能。<br>学生是具有独立意义的人，学生是发展的主体，在教育活动中具有主体地位，充分发挥学生在学习过程中的主动性和创造性。<br>学生是独特的人，具有自身的个性和差异性。每个学生都有自身的独特性。学生与学生之间存在巨大的差异。教师应当珍视学生的独特性和培养具有独特个性的人，做到因材施教。<br>教育公平和面向全体学生。</p></div></p>
<blockquote>
<p>注：</p>
<ul>
<li>当材料中体现老师基础油长远目光，对偏科的同学能发现他们的闪光点可以用第一条。</li>
<li>当材料中体现老师对所有学生平等对待，不歧视/体罚学生可以用第二条。</li>
<li>当材料体现老师因材施教可以用第三条。<br>总结：因此，xx老师的行为符合“以人为本”的学生观，值得我们学习。/因此，xx老师的行为违背了….,我们应当引以为鉴。</li>
</ul>
</blockquote>
<p><strong>教育观答题</strong><br>总述：该老师的行为符合素质教育观，主要表现在：<br>内容：（扒材料，答理论依据，同总模板）<br><div class="note default no-icon"><p>面向全体学生。<br>促进学生全面发展。<br>促进学生个性发展。素质教育是促进学生个性发展的教育。<br>培养学生的创新精神和实践能力，创新教育是素质教育的核心和灵魂。<br>促进学生生动活泼，主动发展。<br>采用多元评价，发展性评价等评价方式促进学生发展。</p></div><br>总结：因此，xx老师的教育行为符合职业道德规范的要求，值得我们学习。/因此，xx老师的行为违背了….,我们应当引以为鉴。</p>
<h2 id="31-答题套路"><a href="#31-答题套路" class="headerlink" title="31.答题套路"></a>31.答题套路</h2><p>题目：请从职业道德的角度……<br>总述：该老师行为……<br>内容：材料中老师的做法：<br><div class="note default no-icon"><p>爱国守法：热爱祖国，热爱人民，拥护中国共产党领导，拥护社会主义。全面贯彻国家教育方针，自觉遵守教育法律法规，依法履行教师职责权利。不得有违背党和国家方针政策的言行。<br>爱岗敬业：忠诚于人民教育事业，志存高远，勤恳敬业，甘为人梯，乐于奉献。对工作高度负责，认真备课上课，认真批改作业，认真辅导学生。不得敷衍塞责。<br>关爱学生：关心爱护全体学生，尊重学生人格，平等公正对待学生。对学生严慈相济，做学生良师益友。保护学生安全，关心学生健康，维护学生权益。不讽刺、挖苦、歧视学生，不体罚或变相体罚学生。<br>教书育人：遵循教育规律，实施素质教育。循循善诱，诲人不倦，因材施教。培养学生良好品行，激发学生创新精神，促进学生全面发展。不以分数作为评价学生的唯一标准。<br>为人师表：坚守高尚情操，知荣明耻，严于律己，以身作则。衣着得体，语言规范，举止文明。关心集体，团结协作，尊重同事，尊重家长。作风正派，廉洁奉公。自觉抵制有偿家教，不利用职务之便谋取私利。<br>终身学习：崇尚科学精神，树立终身学习理念，拓宽知识视野，更新知识结构。潜心钻研业务，勇于探索创新，不断提高专业素养和教育教学水平。</p></div><br>总结：总之，该老师的做法践行了xxxx、xxxx的职业道德。</p>
<h2 id="作文答题"><a href="#作文答题" class="headerlink" title="作文答题"></a>作文答题</h2><p>第一段：通过排比句/名人名言/诗句引出主题。<br>正文：结合教师三观举例子套理论依据。<br>结尾：作为一个教师，我应当，写论点。</p>
]]></content>
      <categories>
        <category>教师资格证</category>
      </categories>
      <tags>
        <tag>综合素质</tag>
      </tags>
  </entry>
  <entry>
    <title>教育知识与能力</title>
    <url>/2020/01/31/%E6%95%99%E8%82%B2%E7%9F%A5%E8%AF%86%E4%B8%8E%E8%83%BD%E5%8A%9B/</url>
    <content><![CDATA[<h1 id="标签说明"><a href="#标签说明" class="headerlink" title="标签说明"></a>标签说明</h1><div class="note info"><p>要点</p></div>
<div class="note danger no-icon"><p><strong>考法</strong><br><strong>重点</strong></p></div>
<a id="more"></a>
<div class="note success no-icon"><p><strong>例：</strong></p></div>
<div class="note primary no-icon"><p><strong>辨析题</strong><br><span class="label danger">错误</span>    <span class="label success">正确</span></p></div>
<div class="note default no-icon"><p><strong>部分解析</strong></p></div>
<h1 id="1-教育基础知识-※"><a href="#1-教育基础知识-※" class="headerlink" title="1 教育基础知识 ※"></a>1 教育基础知识 ※</h1><h2 id="1-1-教育的产生与发展-※"><a href="#1-1-教育的产生与发展-※" class="headerlink" title="1.1 教育的产生与发展 ※"></a>1.1 教育的产生与发展 ※</h2><h3 id="1-1-1-教育的含义"><a href="#1-1-1-教育的含义" class="headerlink" title="1.1.1 教育的含义"></a>1.1.1 教育的含义</h3><p><strong>1.教育一词的由来</strong><br>  <div class="note info"><p>一人一书一句话</p></div></p>
<blockquote>
<p>教育一词最早见于《<strong>孟子</strong>·尽心上》<br><strong>“得天下英才而教育之，三乐也”</strong></p>
</blockquote>
<p><strong>2.教育的概念</strong></p>
<blockquote>
<p><u>广义的教育：</u><br>泛指一切<strong>增进</strong>人的知识和技能、发展人的智力和体力、影响人的思想和品德的活动。它包括<strong>社会教育、家庭教育和家庭教育</strong><br><u>狭义的教育：</u><br><strong>学校教育</strong>是教育者根据一定的社会要求，<strong>有目的、有计划、有组织</strong>地对受教育施加影响，把他们培养成一定社会所需要的人的活动。</p>
</blockquote>
<h3 id="1-1-2-教育的基本要素"><a href="#1-1-2-教育的基本要素" class="headerlink" title="1.1.2 教育的基本要素"></a>1.1.2 教育的基本要素</h3><p><strong>1.教育者（主导）</strong><br>  教师是最直接的教育者<br><strong>2.受教育者（主体）</strong><br>  受教育者是教育的对象<br><strong>3.教育影响（纽带、中介）</strong></p>
<div class="note info"><p>中介：教育内容（<strong>教啥</strong>）+教育手段（<strong>用啥教</strong>）</p></div>
<div class="note danger no-icon"><p><strong>考法：</strong><br>1.教育最基本的两个要素是<strong>教育者和受教育者</strong><br>2.在教育者中最直接的教育者是<strong>教师</strong><br>3.起到主导作用的是<strong>教育者</strong><br>4.起到主体作用的是<strong>受教育者</strong><br>5.起到纽带和中介作用的是<strong>教育影响</strong><br>6.教育影响包括<strong>教育内容和教育手段</strong></p></div>
<h3 id="1-1-3-教育的属性-※"><a href="#1-1-3-教育的属性-※" class="headerlink" title="1.1.3 教育的属性 ※"></a>1.1.3 教育的属性 ※</h3><p><strong>1.本质属性</strong></p>
<blockquote>
<p>教育是<strong>有目的</strong>培养<strong>人</strong>的<strong>社会活动</strong><br>（教育是区别于其他事物现象的根本特征）</p>
</blockquote>
<div class="note primary no-icon"><p><strong>辨析题</strong><br><span class="label danger">1.偶然学会玩游戏是教育</span>    <strong>偶然习得的不是教育</strong><br><span class="label danger">2.鸭子妈妈教小鸭子学游泳是教育</span>    <strong>动物的学习不是教育</strong><br><span class="label danger">3.小孩子吮吸是教育</span>    <strong>本能反应不是教育</strong></p></div>
<p><strong>2.社会属性</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>社会属性</th>
<th>表现</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>永恒性 ※</strong></td>
<td>只要人类存在教育就存在</td>
</tr>
<tr>
<td><strong>历史性 ※</strong></td>
<td>古今不同</td>
</tr>
<tr>
<td><strong>继承性 ※</strong></td>
<td>古今相同</td>
</tr>
<tr>
<td><strong>长期性</strong></td>
<td>培养人的周期比较长</td>
</tr>
<tr>
<td><strong>相对独立性 ※</strong></td>
<td>教育有自身的发展规律但是也会受到政治经济的发展</td>
</tr>
<tr>
<td><strong>生产性</strong></td>
<td>教育是一种投资</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p> <strong>相对独立性：</strong><br>教育与生产力和政治经济制度的发展具有不平衡性：<br>1.教育思想和教育内容<strong>落后</strong>于政治经济制度的发展，特别是当旧的政治经济制度消亡之后，旧的教育思想和教育内容仍然存在；<br>2.由于人们认识到了社会发展的规律，根据社会发展的趋势，预见到教育发展的方向，在旧的政治经济制度下也可能出现<strong>新的</strong>教育思想。 </p>
</blockquote>
<div class="note primary no-icon"><p><strong>辨析题</strong><br><span class="label danger">教育的不平衡性表现在教育超前于政治经济发展</span>    <strong>教育的不平衡性有两个方面</strong></p></div>
<div class="note success no-icon"><p><strong>例：</strong><br>1.（15年上）教育活动与其他社会活动最根本的区别在于<strong>是否有目的的培养人</strong>。<br>2.（18年上）教育具有自身的特点和规律，对政治经济制度和生产力有能动作用。这说明教育具有<strong>相对独立性</strong>。</p></div>
<h3 id="1-1-4-教育的起源-※"><a href="#1-1-4-教育的起源-※" class="headerlink" title="1.1.4 教育的起源 ※"></a>1.1.4 教育的起源 ※</h3><div class="table-container">
<table>
<thead>
<tr>
<th><strong>教育的起源学说</strong></th>
<th><strong>观点</strong></th>
<th><strong>代表人物</strong></th>
<th><strong>口诀</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>生物起源学说</td>
<td>教育起源于动物界的<strong>生存本能</strong></td>
<td><strong>利托尔诺、沛·西能</strong></td>
<td>本能生利息</td>
</tr>
<tr>
<td>心理起源学说</td>
<td>教育起源于儿童对成人的<strong>“无意识模仿”</strong></td>
<td><strong>孟禄</strong></td>
<td>心理仿梦露</td>
</tr>
<tr>
<td>劳动起源学说</td>
<td>教育起源于劳动过程中社会生产需要和人的发展需要的<strong>辩证统一</strong></td>
<td><strong>米定斯基、凯洛夫</strong></td>
<td>米凯爱劳动</td>
</tr>
</tbody>
</table>
</div>
<div class="note danger no-icon"><p><strong>考法</strong><br>1.生物起源学说是关于教育起源的<strong>第一个正式学说</strong><br>2.心理学说中的无意识模仿可理解成<strong>人的本能</strong><br>3.生物起源学说与心理起源学说均忽视了教育的<strong>社会性</strong></p></div>
<div class="note success no-icon"><p><strong>例：</strong><br>马克思最认同的教育起源学说是<strong>劳动起源学说</strong></p></div>
<h3 id="1-1-5-教育的基本形态"><a href="#1-1-5-教育的基本形态" class="headerlink" title="1.1.5 教育的基本形态"></a>1.1.5 教育的基本形态</h3><p><strong>1.家庭教育</strong><br><strong>2.社会教育</strong><br><strong>3.学校教育</strong></p>
<h3 id="1-1-6-教育的发展-※"><a href="#1-1-6-教育的发展-※" class="headerlink" title="1.1.6 教育的发展 ※"></a>1.1.6 教育的发展 ※</h3><p><strong>1.原始社会</strong>（单选）</p>
<ul>
<li>无阶级性、公平性</li>
<li>教育和生产劳动紧密结合</li>
<li>教育内容简单，教育方法单一</li>
</ul>
<div class="note info"><p><strong>口诀：简单、劳动、无阶级</strong></p></div>
<p><strong>2.古代社会  ※（单选）</strong><br><strong>2.1奴隶社会</strong></p>
<div class="note danger no-icon"><p><strong>考法</strong><br>1.中国最早的学校出现于<strong>夏朝</strong>称为<strong>庠</strong><br>2.中国在奴隶社会主要学<strong>六艺</strong>（<strong>礼、乐</strong>、射、御、书、数）<br>3.中国春秋时期<strong>私学</strong>兴起<br>4.古埃及的<strong>文士学校</strong>主要是一般奴隶主和自由民请政府官员开设的学校，通过培养拥有<strong>读、写、算</strong>的能力。除文士学校外还存在由政府开办的<strong>职官学校</strong>和开在寺庙的<strong>僧侣学校</strong>，僧侣学校是古埃及<strong>最高级</strong>的学校<br>5.古希腊的斯巴达教育<strong>军事体育</strong>，崇尚武力；雅典<strong>崇尚文学</strong>，主要教育政治、哲学、文学、艺术等。</p></div>
<p><strong>2.2封建社会</strong><br>四书：《孟子》、《中庸》、《论语》、《大学》<br>五经：《诗》、《书》、《礼》、《易》、《春秋》<br><div class="note danger no-icon"><p><strong>考法</strong><br>1.中国在<strong>战国时期</strong>私学繁荣，在汉代由<strong>董仲舒</strong>提出“罢黜百家，独尊儒术”，在<strong>隋唐时期</strong>科举制兴起，宋朝主要教育的内容是<strong>四书五经</strong>，清朝末期<strong>废除科举制（1905）</strong>，如果是六经那多出来的是<strong>《乐经》</strong>但是后来失传了。<br>2.外国中世纪的教会学校课程内容是<strong>七艺</strong>，骑士学校的内容是<strong>骑士七技</strong></p></div><br><div class="note primary no-icon"><p><strong>辨析题：</strong><br><span class="label success">隋朝兴起科举制、隋唐时期兴起科举制</span>    <strong>都是可以的</strong></p></div></p>
<p><strong>3.古代教育的总体特征</strong>（单选）</p>
<ul>
<li>产生学校</li>
<li><strong>古代学校教育与生产劳动相脱离 ※</strong></li>
<li><strong>具有阶级性和等级性 ※</strong></li>
<li>道统性、专制性、刻板性、象征性</li>
<li>学校教育初步发展，尚未形成复杂的结构体系</li>
</ul>
<div class="note default"><p>阶级性分为统治阶级和被统治阶级，统治阶级还分为一品至九品即为等级性</p></div>
<div class="note info"><p><strong>口诀：劳教脱离，有阶级</strong></p></div>
<div class="note success no-icon"><p><strong>例：</strong><br>1.(2013下)中国最早的学校教育形态出现在<strong>夏朝</strong><br>2.(2015年上)古希腊斯巴达教育的目的是培养<strong>军人和武士</strong></p></div>
<p><strong>4.近代社会的教育</strong></p>
<ul>
<li>国家加强干预，公立教育崛起</li>
<li><strong>初等义务教育普遍实施 （德国）※</strong></li>
<li>教育世俗化</li>
<li>教育法制化</li>
</ul>
<div class="note info"><p><strong>口诀：法（法制化）国（国家干预）仪（义务教育）式（世俗化）</strong></p></div>
<div class="note danger no-icon"><p><strong>考法</strong><br>1.初等义务教育普遍实施是在<strong>德国</strong><br>2.近代社会普遍实施的是<strong>初等义务教育</strong></p></div>
<p><strong>5.20世纪以后的教育（现代社会）</strong>（单选）（简答）</p>
<ul>
<li>教育终<strong>身</strong>化</li>
<li>教育<strong>全</strong>民化</li>
<li>教育<strong>民</strong>主化</li>
<li>教育<strong>多</strong>元化</li>
<li>教育<strong>现</strong>代化</li>
</ul>
<div class="note default no-icon"><p>1.提出教育终身化的是<strong>保罗·朗格朗</strong><br>2.教育民主化指的是<strong>所有人</strong>有<strong>同样的</strong>教育<br>3.教育多元化包括<strong>学习多元</strong>以及<strong>评价标准多元</strong><br>4.教育现代化包括设备、观念、内容、教师队伍等现代化，关键是<strong>教师队伍</strong>现代化，核心和最高目的是<strong>实现人的现代化</strong></p></div>
<div class="note info"><p><strong>口诀：全民多现身</strong></p></div>
<div class="note success no-icon"><p><strong>例：</strong><br><strong>请简述20世纪以后教育的特点。</strong><br>1.教育终身化，它包括各个年龄阶段的各种方式的教育。<br>2.教育全民化，教育必须面向所有的人，即人人都有接受教育的权利。<br>3.教育民主化，对教育的等级化、特权化、和专制化的否定。<br>4.教育多元化，培养目标的多元化、办学形式的多元化等。<br>5.教育现代化，现代科学技术在教育上的运用并由此引起教育思想教育观念的变化。</p></div>
<h3 id="1-1-7-教育的功能"><a href="#1-1-7-教育的功能" class="headerlink" title="1.1.7 教育的功能"></a>1.1.7 教育的功能</h3><p><strong>1.按教育功能作用的对象划分</strong><br><strong>1.1 个体发展功能（本体）</strong><br>培养人<br><strong>1.2 社会发展功能（派生）</strong><br>教育通过培养人对社会产生影响</p>
<div class="note success no-icon"><p><strong>例：<br>通过学习为社会贡献——社会发展功能</strong></p></div>
<p><strong>2.按教育功能的性质划分</strong><br><strong>2.1 正向功能</strong><br>对学生发展有积极影响<br><strong>2.2 负向功能</strong><br>对学生发展有消极作用</p>
<div class="note success no-icon"><p><strong>例：<br>1.素质教育促进学生德智体美劳全面发展——正向功能<br>2.应试教育下教师将分数作为评判唯一标准导致高分低能——负向功能</strong></p></div>
<p><strong>3.按教育功能呈现的形式划分<br>3.1 显性功能</strong><br>计划内<br><strong>3.2 隐性功能</strong><br>计划外</p>
<div class="note success no-icon"><p><strong>例：<br>本来计划学习物理知识，没想到在学习物理知识的过程中掌握了微积分的知识，物理知识是显性功能，微积分知识是隐性功能</strong></p></div>
<div class="note primary no-icon"><p><strong>辨析题</strong><br><span class="label danger">教育对人类总是积极的</span>    <strong>教育按教育功能的性质划分为正向功能和负向功能</strong></p></div>
<h2 id="1-2-教育学的产生与发展-※"><a href="#1-2-教育学的产生与发展-※" class="headerlink" title="1.2 教育学的产生与发展 ※"></a>1.2 教育学的产生与发展 ※</h2><h3 id="1-2-1-教育学的概念（单选）"><a href="#1-2-1-教育学的概念（单选）" class="headerlink" title="1.2.1 教育学的概念（单选）"></a>1.2.1 教育学的概念（单选）</h3><div class="note info"><p>教育学是以<strong>教育现象、教育问题</strong>为研究对象，不断探索并揭示<strong>教育规律</strong>的科学。</p></div>
<h3 id="1-2-2-教育学的发展-※（单选）"><a href="#1-2-2-教育学的发展-※（单选）" class="headerlink" title="1.2.2 教育学的发展 ※（单选）"></a>1.2.2 教育学的发展 ※（单选）</h3><p><strong>1.教育学的萌芽阶段</strong><br><div class="note info"><p>尚未独立</p></div><br><strong>1.1 中国</strong></p>
<ul>
<li><p>一本书——《学记》</p>
<blockquote>
<p><strong>地位：</strong>世界<strong>最早</strong>论述<strong>教育问题</strong>的著作<br><strong>教育思想：</strong></p>
<ul>
<li>道而弗牵，强而弗抑，开而弗达。——<strong>启发式</strong>教学 ※</li>
<li>学不躐等 ——<strong>循序渐进</strong> ※</li>
<li>杂施而不逊，则坏乱而不修 ——<strong>循序渐进</strong> ※</li>
<li>陵节而施 ——<strong>循序渐进</strong> ※</li>
<li>建国军民，教学为先 ——教育与政治的关系</li>
<li>学然后知不足，教然后知困。知不足，然后能自反也知困，然后能自强也——教学相长</li>
</ul>
</blockquote>
</li>
<li><p>一个人——孔子</p>
<blockquote>
<p><strong>思想</strong>主要集中在《论语》<br><strong>办学方针：</strong>“有教无类”<br><strong>地位：</strong>世界上最早提出启发诱导教学方法的人。<br><strong>教学方法：</strong></p>
<ul>
<li>启发诱导——不愤不启，不悱不发</li>
<li>因材施教 </li>
</ul>
</blockquote>
</li>
</ul>
<p><strong>1.2 外国</strong>（单选）</p>
<ul>
<li>古希腊<blockquote>
<p>苏格拉底</p>
<ul>
<li>产婆术（问答法）</li>
<li><strong>西方最早的启发式教育</strong></li>
</ul>
<p>柏拉图</p>
<ul>
<li>《理想国》</li>
<li><strong>寓教于乐</strong></li>
</ul>
<p>亚里士多德</p>
<ul>
<li>古希腊百科全书式的哲学家，<strong>首次</strong>提出<strong>“教育遵循自然”</strong>的原则</li>
</ul>
</blockquote>
</li>
<li>古罗马<blockquote>
<p>昆体良</p>
<ul>
<li>《论演说家的教育》又称为《雄辩术原理》</li>
<li><strong>地位：</strong><br>1.<strong>西方最早</strong>的教育著作<br>2.<strong>世界上第一部</strong>研究教学法</li>
</ul>
</blockquote>
</li>
</ul>
<div class="note success no-icon"><p><strong>例：</strong><br>1.(2016下)我国先秦时期，主张“有教无类”，倡导”因材施教“的教育家是<strong>孔子</strong>。<br>2.(2015上)国外最早的教育学著作是<strong>《论演说家的教育》</strong></p></div>
<p><strong>2.教育学的创立阶段</strong><br><div class="note info"><p>已独立</p></div><br><strong>2.1 独立派</strong>（单选）</p>
<ul>
<li><p>培根</p>
<blockquote>
<p><strong>首次提出</strong>“教育学”应作为一门独立的学说</p>
</blockquote>
</li>
<li>夸美纽斯<blockquote>
<p>教育学之父<br><strong>《大教学论》</strong>——教育学称为一门独立学科的标准</p>
<ul>
<li>教学制度：系统论述<strong>班级授课制</strong>方法和实施内容</li>
<li>教学思想：<strong>泛智教育</strong>——把一切事物教给一切人</li>
<li>教学方法：直观性——教育学的“金科玉律”</li>
</ul>
</blockquote>
</li>
</ul>
<div class="note default no-icon"><p>直观性是指用图片、实物、生动语言等来将教学内容呈现给学生。</p></div>
<ul>
<li><p>康德</p>
<blockquote>
<p>最早在大学里讲授教育学这门课程</p>
</blockquote>
</li>
<li>赫尔巴特<blockquote>
<p>现代<strong>教育学</strong>之父，科学<strong>教育学</strong>之父<br><strong>《普通教育学》</strong>标志教育学成为独立规范的学科正式诞生</p>
<ul>
<li><strong>一原则</strong>：教育性教学原则</li>
<li><strong>二基础</strong>：伦理学和心理学作为教育学的理论基础</li>
<li><strong>三中心</strong>：<strong>教师中心、教材中心、课堂中心</strong>（教师在课堂上教教材）</li>
<li><strong>四阶段</strong>：明了、联想、系统、方法</li>
</ul>
</blockquote>
</li>
<li>杜威<blockquote>
<p><strong>进步教育代表人；现代教育代表人</strong>；实用主义哲学之父<br>《民主主义与教育》</p>
<ul>
<li><strong>新三中心论：</strong>儿童中心（学生中心）、经验中心、活动中心</li>
<li><strong>教育的本质：</strong>教育即生活；教育即生长；教育即经验的改组。</li>
<li>学校即社会</li>
<li>从做中学</li>
<li>五步教学法</li>
</ul>
</blockquote>
</li>
</ul>
<div class="note default no-icon"><p>1.新三中心论记忆<strong>儿童在活动中学经验</strong><br>2.3中心4个即5步骤</p></div>
<div class="note info no-icon"><p>1.培根：首提出<br>2.夸美纽斯：来实现——教育学之父<br>3.康德：首讲授<br>4.赫尔巴特：规范——现代教育学之父<br>5.杜威：真现代</p></div>
<div class="note success no-icon"><p>1.(2019上)传统教育派代表人物赫尔巴特主张的“三中心”是指<strong>教师中心、教材中心和课堂中心</strong></p></div>
<p><strong>2.2 其他派</strong></p>
<ul>
<li>卢梭<blockquote>
<p>《爱弥儿》<br><strong>提倡自然主义的教育思想</strong><br>最早“发现了儿童”的教育家</p>
</blockquote>
</li>
<li>洛克<blockquote>
<p>《教育漫画》</p>
<ul>
<li>提出“白板说”</li>
<li>倡导“绅士教育”</li>
</ul>
</blockquote>
</li>
<li>裴斯泰洛齐<blockquote>
<p><strong>慈爱的儿童之父</strong></p>
<ul>
<li>教育遵循自然，最早提出“教育心理学化”主张</li>
<li>西方第一位将<strong>“教育与生产劳动相结合付诸实践”</strong>的教育家</li>
</ul>
</blockquote>
</li>
<li>斯宾塞<blockquote>
<ul>
<li>教育<strong>预备生活说</strong></li>
<li>科学知识最有价值<div class="note info no-icon"><p>1.卢梭：卢的爱儿很自然<br>2.洛克：绅士洛克在白板上画漫画<br>3.裴斯泰洛齐：裴斯心理重劳动<br>4.<strong>斯宾塞</strong>：教育预备、科学知识</p></div>
<div class="note success no-icon"><p>1.(2015下)在教育史上，提出著名的“白板说”和完整的绅士教育理论的学者是<strong>洛克</strong><br>2.(2017下)法国启蒙思想家卢梭于1762年发表了小说体的教育名著，系统地阐述了他的自然主义教育思想，这部教育名著是<strong>《爱弥儿》</strong></p></div>
</li>
</ul>
</blockquote>
</li>
</ul>
<p><strong>3.教育学的发展阶段</strong><br><div class="note info"><p>出现了众多教育学派</p></div></p>
<h2 id="1-3-教育与社会发展"><a href="#1-3-教育与社会发展" class="headerlink" title="1.3 教育与社会发展"></a>1.3 教育与社会发展</h2><h2 id="1-4-教育与人的发展"><a href="#1-4-教育与人的发展" class="headerlink" title="1.4 教育与人的发展"></a>1.4 教育与人的发展</h2><h2 id="1-5-教育制度"><a href="#1-5-教育制度" class="headerlink" title="1.5 教育制度"></a>1.5 教育制度</h2><h2 id="1-6-教育目的"><a href="#1-6-教育目的" class="headerlink" title="1.6 教育目的"></a>1.6 教育目的</h2><h2 id="1-7-教育科学研究"><a href="#1-7-教育科学研究" class="headerlink" title="1.7 教育科学研究"></a>1.7 教育科学研究</h2>]]></content>
      <categories>
        <category>教师资格证</category>
      </categories>
      <tags>
        <tag>教师知识与能力</tag>
      </tags>
  </entry>
  <entry>
    <title>7-2 老鼠爱大米 (20分)</title>
    <url>/2020/01/31/7-2%20%E8%80%81%E9%BC%A0%E7%88%B1%E5%A4%A7%E7%B1%B3%20(20%E5%88%86)/</url>
    <content><![CDATA[<p>翁恺老师曾经设计过一款 Java 挑战游戏，叫“老鼠爱大米”（或许因为他的外号叫“胖胖鼠”）。每个玩家用 Java 代码控制一只鼠，目标是抢吃尽可能多的大米让自己变成胖胖鼠，最胖的那只就是冠军。<br><a id="more"></a>因为游戏时间不能太长，我们把玩家分成 <em>N</em> 组，每组 <em>M</em> 只老鼠同场竞技，然后从 <em>N</em> 个分组冠军中直接选出最胖的冠军胖胖鼠。现在就请你写个程序来得到冠军的体重。</p>
<blockquote>
<p><strong>输入格式：</strong><br>输入在第一行中给出 2 个正整数：<em>N</em>（≤100）为组数，<em>M</em>（≤10）为每组玩家个数。随后 <em>N</em> 行，每行给出一组玩家控制的 <em>M</em> 只老鼠最后的体重，均为不超过 104 的非负整数。数字间以空格分隔。</p>
<p><strong>输出格式：</strong><br>首先在第一行顺次输出各组冠军的体重，数字间以 1 个空格分隔，行首尾不得有多余空格。随后在第二行输出冠军胖胖鼠的体重。</p>
<p>输入：<br><div class="note default no-icon"><p>3 5<br>62 53 88 72 81<br>12 31 9 0 2<br>91 42 39 6 48</p></div></p>
<p>输出：<br><div class="note default no-icon"><p>88 31 91<br>91</p></div></p>
</blockquote>
<div class="note default no-icon"><p>作者: 陈越<br>单位: 浙江大学<br>时间限制: 400 ms<br>内存限制: 64 MB<br>代码长度限制: 16 KB</p></div>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT（乙级）（2019年冬季考试）</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>7-1 2019数列 (15分)</title>
    <url>/2020/01/31/7-1%202019%E6%95%B0%E5%88%97%20(15%E5%88%86)/</url>
    <content><![CDATA[<p>把 2019 各个数位上的数字 2、0、1、9 作为一个数列的前 4 项，用它们去构造一个无穷数列，其中第 <em>n</em>（&gt;4）项是它前 4 项之和的个位数字。例如第 5 项为 2， 因为 2+0+1+9=12，个位数是 2。<a id="more"></a><br>本题就请你编写程序，列出这个序列的前 <em>n</em> 项。</p>
<blockquote>
<p><strong>输入格式：</strong><br>输入给出正整数 <em>n</em>（≤1000）。</p>
<p><strong>输出格式：</strong><br>在一行中输出数列的前 <em>n</em> 项，数字间不要有空格。</p>
<p>输入：<br><div class="note default no-icon"><p>10</p></div>

> 输出：
<div class="note default no-icon"><p>2019224758</p></div></p>
</blockquote>
<div class="note default no-icon"><p>作者: 陈越<br>单位: 浙江大学<br>时间限制: 400 ms<br>内存限制: 64 MB<br>代码长度限制: 16 KB</p></div>
<p><strong>题外话：</strong>这个数列中永远不会出现 <code>2018</code>，你能证明吗？</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT（乙级）（2019年冬季考试）</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>7-3 String复读机 (20分)</title>
    <url>/2020/01/31/7-3%20String%E5%A4%8D%E8%AF%BB%E6%9C%BA%20(20%E5%88%86)/</url>
    <content><![CDATA[<p>给定一个长度不超过10<sup>4</sup>的、仅由英文字母构成的字符串。请将字符重新调整顺序，按 <code>StringString....</code> （注意区分大小写）这样的顺序输出，并忽略其它字符。当然，六种字符的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按 <code>String</code> 的顺序打印，直到所有字符都被输出。例如 <code>gnirtSSs</code> 要调整成 <code>StringS</code> 输出，其中 <code>s</code> 是多余字符被忽略。<a id="more"></a></p>
<blockquote>
<p><strong>输入格式：</strong><br>输入在一行中给出一个长度不超过 104 的、仅由英文字母构成的非空字符串。</p>
<p><strong>输出格式：</strong><br>在一行中按题目要求输出排序后的字符串。题目保证输出非空。</p>
<p>输入：<br><div class="note default no-icon"><p>sTRidlinSayBingStrropriiSHSiRiagIgtSSr</p></div></p>
<p>输出：<br><div class="note default no-icon"><p>StringStringSrigSriSiSii</p></div></p>
</blockquote>
<div class="note default no-icon"><p>作者: 陈越<br>单位: 浙江大学<br>时间限制: 400 ms<br>内存限制: 64 MB<br>代码长度限制: 16 KB</p></div>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT（乙级）（2019年冬季考试）</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>7-4 擅长C (20分)</title>
    <url>/2020/01/31/7-4%20%E6%93%85%E9%95%BFC%20(20%E5%88%86)/</url>
    <content><![CDATA[<p>当你被面试官要求用 C 写一个“Hello World”时，有本事像下图显示的那样写一个出来吗？<a id="more"></a><br><img src="https://images.ptausercontent.com/ba3b8678-061d-4fc6-a87e-ce08e1434410.jpg" alt="HWC.jpg"></p>
<blockquote>
<p><strong>输入格式：</strong><br>输入首先给出 26 个英文大写字母 A-Z，每个字母用一个 7×5 的、由 <code>C</code> 和 <code>.</code> 组成的矩阵构成。最后在一行中给出一个句子，以回车结束。句子是由若干个单词（每个包含不超过 10 个连续的大写英文字母）组成的，单词间以任何非大写英文字母分隔。<br>题目保证至少给出一个单词。</p>
<p><strong>输出格式：</strong><br>对每个单词，将其每个字母用矩阵形式在一行中输出，字母间有一列空格分隔。单词的首尾不得有多余空格。<br>相邻的两个单词间必须有一空行分隔。输出的首尾不得有多余空行。</p>
<p>输入：<br><div class="note default no-icon"><p>..C..<br>.C.C.<br>C…C<br>CCCCC<br>C…C<br>C…C<br>C…C<br>CCCC.<br>C…C<br>C…C<br>CCCC.<br>C…C<br>C…C<br>CCCC.<br>.CCC.<br>C…C<br>C….<br>C….<br>C….<br>C…C<br>.CCC.<br>CCCC.<br>C…C<br>C…C<br>C…C<br>C…C<br>C…C<br>CCCC.<br>CCCCC<br>C….<br>C….<br>CCCC.<br>C….<br>C….<br>CCCCC<br>CCCCC<br>C….<br>C….<br>CCCC.<br>C….<br>C….<br>C….<br>CCCC.<br>C…C<br>C….<br>C.CCC<br>C…C<br>C…C<br>CCCC.<br>C…C<br>C…C<br>C…C<br>CCCCC<br>C…C<br>C…C<br>C…C<br>CCCCC<br>..C..<br>..C..<br>..C..<br>..C..<br>..C..<br>CCCCC<br>CCCCC<br>….C<br>….C<br>….C<br>….C<br>C…C<br>.CCC.<br>C…C<br>C..C.<br>C.C..<br>CC…<br>C.C..<br>C..C.<br>C…C<br>C….<br>C….<br>C….<br>C….<br>C….<br>C….<br>CCCCC<br>C…C<br>C…C<br>CC.CC<br>C.C.C<br>C…C<br>C…C<br>C…C<br>C…C<br>C…C<br>CC..C<br>C.C.C<br>C..CC<br>C…C<br>C…C<br>.CCC.<br>C…C<br>C…C<br>C…C<br>C…C<br>C…C<br>.CCC.<br>CCCC.<br>C…C<br>C…C<br>CCCC.<br>C….<br>C….<br>C….<br>.CCC.<br>C…C<br>C…C<br>C…C<br>C.C.C<br>C..CC<br>.CCC.<br>CCCC.<br>C…C<br>CCCC.<br>CC…<br>C.C..<br>C..C.<br>C…C<br>.CCC.<br>C…C<br>C….<br>.CCC.<br>….C<br>C…C<br>.CCC.<br>CCCCC<br>..C..<br>..C..<br>..C..<br>..C..<br>..C..<br>..C..<br>C…C<br>C…C<br>C…C<br>C…C<br>C…C<br>C…C<br>.CCC.<br>C…C<br>C…C<br>C…C<br>C…C<br>C…C<br>.C.C.<br>..C..<br>C…C<br>C…C<br>C…C<br>C.C.C<br>CC.CC<br>C…C<br>C…C<br>C…C<br>C…C<br>.C.C.<br>..C..<br>.C.C.<br>C…C<br>C…C<br>C…C<br>C…C<br>.C.C.<br>..C..<br>..C..<br>..C..<br>..C..<br>CCCCC<br>….C<br>…C.<br>..C..<br>.C…<br>C….<br>CCCCC<br>HELLO~WORLD!</p></div></p>
<p>输出：<br><div class="note default no-icon"><p>C…C CCCCC C…. C…. .CCC.<br>C…C C…. C…. C…. C…C<br>C…C C…. C…. C…. C…C<br>CCCCC CCCC. C…. C…. C…C<br>C…C C…. C…. C…. C…C<br>C…C C…. C…. C…. C…C<br>C…C CCCCC CCCCC CCCCC .CCC.</p>
<p>C…C .CCC. CCCC. C…. CCCC.<br>C…C C…C C…C C…. C…C<br>C…C C…C CCCC. C…. C…C<br>C.C.C C…C CC… C…. C…C<br>CC.CC C…C C.C.. C…. C…C<br>C…C C…C C..C. C…. C…C<br>C…C .CCC. C…C CCCCC CCCC.</p></div></p>
</blockquote>
<div class="note default no-icon"><p>作者: 陈越<br>单位: 浙江大学<br>时间限制: 400 ms<br>内存限制: 64 MB<br>代码长度限制: 16 KB</p></div>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT（乙级）（2019年冬季考试）</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>7-5 区块反转 (25分)</title>
    <url>/2020/01/31/7-5%20%E5%8C%BA%E5%9D%97%E5%8F%8D%E8%BD%AC%20(25%E5%88%86)/</url>
    <content><![CDATA[<p>给定一个单链表 <em>L</em>，我们将每 <em>K</em> 个结点看成一个<strong>区块</strong>（链表最后若不足 <em>K</em> 个结点，也看成一个区块），请编写程序将 <em>L</em> 中所有区块的链接反转。例如：给定 <em>L</em> 为 1→2→3→4→5→6→7→8，<em>K</em> 为 3，则输出应该为 7→8→4→5→6→1→2→3。<a id="more"></a></p>
<blockquote>
<p><strong>输入格式：</strong><br>每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 <em>N</em> (≤105)、以及正整数 <em>K</em> (≤<em>N</em>)，即区块的大小。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。<br>接下来有 <em>N</em> 行，每行格式为：<br><div class="note default no-icon"><p>Address Data Next</p></div>
> 其中 `Address` 是结点地址，`Data` 是该结点保存的整数数据，`Next` 是下一结点的地址。

> **输出格式：**
> 对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。

> 输入：
<div class="note default no-icon"><p>00100 8 3<br>71120 7 88666<br>00000 4 99999<br>00100 1 12309<br>68237 6 71120<br>33218 3 00000<br>99999 5 68237<br>88666 8 -1<br>12309 2 33218</p></div></p>
<p>输出：<br><div class="note default no-icon"><p>71120 7 88666<br>88666 8 00000<br>00000 4 99999<br>99999 5 68237<br>68237 6 00100<br>00100 1 12309<br>12309 2 33218<br>33218 3 -1</p></div></p>
</blockquote>
<div class="note default no-icon"><p>作者: 陈越<br>单位: 浙江大学<br>时间限制: 400 ms<br>内存限制: 64 MB<br>代码长度限制: 16 KB</p></div>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT（乙级）（2019年冬季考试）</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>初次部署HEXO+NEXT博客</title>
    <url>/2020/01/30/%E5%88%9D%E6%AC%A1%E9%83%A8%E7%BD%B2HEXO+NEXT%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="常用指令以及部署参考"><a href="#常用指令以及部署参考" class="headerlink" title="常用指令以及部署参考"></a>常用指令以及部署参考</h1><div class="table-container">
<table>
<thead>
<tr>
<th>hexo deploy</th>
<th>部署网站</th>
</tr>
</thead>
<tbody>
<tr>
<td>hexo g</td>
<td>生成静态文件</td>
</tr>
<tr>
<td>hexo clean</td>
<td>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</td>
</tr>
<tr>
<td>hexo new post  “文件名”</td>
<td>创建新文档</td>
</tr>
<tr>
<td>hexo douban</td>
<td>同步豆瓣影视单</td>
</tr>
</tbody>
</table>
</div>
<p><a class="btnc" href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">更多指令</a></p>
<a id="more"></a>
<h1 id="感谢如下技术支持"><a href="#感谢如下技术支持" class="headerlink" title="感谢如下技术支持"></a>感谢如下技术支持</h1><p><a class="btnc" href="https://www.zhyong.cn/posts/1da9/" target="_blank" rel="noopener">云日历</a>    <a class="btnc" href="https://yfzhou.coding.me/2018/08/27/Hexo-Next搭建个人博客（代码块复制功能）/" target="_blank" rel="noopener">代码块复制功能</a>    <a class="btnc" href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next使用文档</a>    <a class="btnc" href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo使用文档</a>    <a class="btnc" href="https://blog.csdn.net/qq_27631797/article/details/102803121" target="_blank" rel="noopener">Windows 从零搭建个人博客</a>    <a class="btnc" href="https://blog.csdn.net/Wonz5130/article/details/84666519" target="_blank" rel="noopener">解决 Hexo 搭建博客显示不出分类、标签问题</a>    <a class="btnc" href="https://www.mscoder.cn/program/hexo-disable-scrollbar/" target="_blank" rel="noopener">NEXT主题下代码区域自动换行</a>    <a class="btnc" href="https://realneo.me/remove-next-gray-border/" target="_blank" rel="noopener">去除 Next 主题图片的灰色边框</a>    <a class="btnc" href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">更多配置</a>    <a class="btnc" href="https://yfzhou.coding.me/categories/Hexo/" target="_blank" rel="noopener">小功能</a>    <a class="btnc" href="https://www.jianshu.com/p/c311d31265e0" target="_blank" rel="noopener">hexo页脚添加访客人数和总访问量</a>    <a class="btnc" href="https://blog.csdn.net/yefcion/article/details/88412025" target="_blank" rel="noopener">PicGo + GitHub 搭建个人图床工具</a>    <a class="btnc" href="https://blog.csdn.net/wgshun616/article/details/81019739" target="_blank" rel="noopener">HEXO绑定个人域名</a>    <a class="btnc" href="https://blog.csdn.net/Aoman_Hao/article/details/103758829" target="_blank" rel="noopener">Hexo博客Next主题友链页面</a>    <a class="btnc" href="https://gitee.com/mirrors/hexo-douban" target="_blank" rel="noopener">hexo部署豆瓣</a>    <a class="btnc" href="https://www.jianshu.com/p/68e6f82d88b7" target="_blank" rel="noopener">使用LaTex添加公式到Hexo博客里</a>    <a class="btnc" href="https://blog.csdn.net/Calvin_zhou/article/details/85218157" target="_blank" rel="noopener">Hexo博客开发之——电脑重装系统后如何恢复Hexo博客</a>    <a class="btnc" href="https://github.com/netcan/hexo-generator-index-pin-top" target="_blank" rel="noopener">Hexo博客开发之——文章置顶</a></p>
<h1 id="之后可能会用到的"><a href="#之后可能会用到的" class="headerlink" title="之后可能会用到的"></a>之后可能会用到的</h1><p><a class="btnc" href="https://blog.pangao.vip/Hexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B9%8B%E9%A1%B6%E9%83%A8%E5%8A%A0%E8%BD%BD%E8%BF%9B%E5%BA%A6%E6%9D%A1/" target="_blank" rel="noopener">顶部加载条</a></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>1002 写出这个数 (20分)</title>
    <url>/2020/01/29/1002%20%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0%20(20%E5%88%86)/</url>
    <content><![CDATA[<p>读入一个正整数 <em>n</em>，计算其各位数字之和，用汉语拼音写出和的每一位数字。<a id="more"></a></p>
<blockquote>
<p><strong>输入格式：</strong><br>每个测试输入包含 1 个测试用例，即给出自然数 <em>n</em> 的值。这里保证 <em>n</em> 小于10<sup>100</sup>。</p>
<p><strong>输出格式：</strong><br>在一行内输出 <em>n</em> 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p>
<p>输入：<br><div class="note default no-icon"><p>1234567890987654321123456789</p></div></p>
<p>输出：<br><div class="note default no-icon"><p>yi san wu</p></div></p>
</blockquote>
<div class="note default no-icon"><p>作者: CHEN, Yue<br>单位: 浙江大学<br>时间限制: 400 ms<br>内存限制: 64 MB<br>代码长度限制: 16 KB</p></div>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 5 </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> number[<span class="number">10</span>][<span class="number">5</span>]=&#123;<span class="string">"ling"</span>,<span class="string">"yi"</span>,<span class="string">"er"</span>,<span class="string">"san"</span>,<span class="string">"si"</span>,<span class="string">"wu"</span>,<span class="string">"liu"</span>,<span class="string">"qi"</span>,<span class="string">"ba"</span>,<span class="string">"jiu"</span>&#125;;</span><br><span class="line">	<span class="comment">//定义字符串 </span></span><br><span class="line">	<span class="keyword">char</span> <span class="built_in">array</span>[N];</span><br><span class="line">	<span class="comment">//记录和每位的数字 </span></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">log</span>[M];</span><br><span class="line">	<span class="comment">// 记录和 </span></span><br><span class="line">	<span class="keyword">int</span> sum=<span class="number">0</span>,i=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//将每一位置为-1 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;M;j++)&#123;</span><br><span class="line">		<span class="built_in">log</span>[j]=<span class="number">-1</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;<span class="built_in">array</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">array</span>[i]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">		sum+=<span class="built_in">array</span>[i]-<span class="string">'0'</span>;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(sum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">log</span>[j]=sum%<span class="number">10</span>;</span><br><span class="line">		sum=sum/<span class="number">10</span>;</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=M<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">log</span>[i]!=<span class="number">-1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;number[<span class="built_in">log</span>[i]];	</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;number[<span class="built_in">log</span>[i]]&lt;&lt;<span class="string">' '</span>; </span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT（乙级）</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>1001 害死人不偿命的(3n+1)猜想 (15分)</title>
    <url>/2020/01/29/1001%20%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84(3n+1)%E7%8C%9C%E6%83%B3/</url>
    <content><![CDATA[<p><strong>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>=1。<a id="more"></a></strong>卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>=1？</p>
<blockquote>
<p><strong>输入格式：</strong><br>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p>
<p><strong>输出格式：</strong><br>输出从 <em>n</em> 计算到 1 需要的步数。</p>
<p>输入：<br><div class="note default no-icon"><p>3</p></div></p>
<p>输出：<br><div class="note default no-icon"><p>5</p></div></p>
</blockquote>
<div class="note default no-icon"><p>作者: CHEN, Yue<br>单位: 浙江大学<br>时间限制: 400 ms<br>内存限制: 64 MB<br>代码长度限制: 16 KB</p></div>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//定义奇数处理函数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">odd</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"><span class="comment">//定义偶数处理函数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">oval</span><span class="params">(<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n!=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">			n=oval(n);</span><br><span class="line">			count++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			n=odd(n);</span><br><span class="line">			count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;count;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">odd</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (<span class="number">3</span>*n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">oval</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT（乙级）</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
