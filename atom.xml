<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小哲の博客</title>
  
  <subtitle>一个不像程序猿的设计狮</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ame1314.github.io/"/>
  <updated>2020-03-13T04:24:18.669Z</updated>
  <id>https://ame1314.github.io/</id>
  
  <author>
    <name>小哲</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文章加密测试</title>
    <link href="https://ame1314.github.io/2020/03/13/%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/"/>
    <id>https://ame1314.github.io/2020/03/13/%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/</id>
    <published>2020-03-13T04:02:58.000Z</published>
    <updated>2020-03-13T04:24:18.669Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="这里是密码测试，密码为test." /><label>这里是密码测试，密码为test.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="5a9d5e1c4d5f64781b13ab64bf6ccdf05775b07c299a0646b28d7c1b0c2da5f3">2df47d0ea60432706cc8d10905a53e7c578e9895fbd009e4bd25ef40c4898f88b6e7b020a7748cae1ef256e2a3edf8a1a7306356f00a661e65467d414b978e34</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      有东西被加密了, 请输入密码查看.
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>10.异常</title>
    <link href="https://ame1314.github.io/2020/03/11/10-%E5%BC%82%E5%B8%B8/"/>
    <id>https://ame1314.github.io/2020/03/11/10-%E5%BC%82%E5%B8%B8/</id>
    <published>2020-03-11T15:48:37.000Z</published>
    <updated>2020-03-11T15:49:46.365Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"></div><a id="more"></a><h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul><li>NameError</li><li>TypeError</li><li>异常处理（try..except）</li><li>异常抛出（raise）</li><li>finally 子句</li></ul><h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200311-1583941636023" alt="图片描述"></p><h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://ame1314.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>9.文件处理</title>
    <link href="https://ame1314.github.io/2020/03/10/9-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>https://ame1314.github.io/2020/03/10/9-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</id>
    <published>2020-03-10T15:52:19.000Z</published>
    <updated>2020-03-10T16:00:53.341Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>在本文中将提供Python中的文件操作</p></div><a id="more"></a><h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul><li>文件打开与关闭</li><li>文件读取与写入</li></ul><h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><h5 id="1-打印到屏幕"><a href="#1-打印到屏幕" class="headerlink" title="1.打印到屏幕"></a>1.打印到屏幕</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Python 是一个非常棒的语言，不是吗？"</span>)</span><br></pre></td></tr></table></figure><p>输出为：<code>Python 是一个非常棒的语言，不是吗？</code></p><h5 id="2-读取键盘输入"><a href="#2-读取键盘输入" class="headerlink" title="2.读取键盘输入"></a>2.读取键盘输入</h5><ul><li><strong><code>raw_input</code>:</strong>raw_input([prompt]) 函数从标准输入读取一个行，并返回一个字符串（去掉结尾的换行符）,例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = raw_input(<span class="string">"请输入："</span>)</span><br><span class="line">print(<span class="string">"你输入的内容是: "</span>, str)</span><br></pre></td></tr></table></figure><p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入：Hello Python！</span><br><span class="line">你输入的内容是:  Hello Python！</span><br></pre></td></tr></table></figure></p><ul><li><strong><code>input()</code>:</strong>input([prompt]) 函数和 raw_input([prompt]) 函数基本类似，但是 input 可以接收一个Python表达式作为输入，并将运算结果返回。例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = input(<span class="string">"请输入："</span>)</span><br><span class="line">print(<span class="string">"你输入的内容是: "</span>, str)</span><br></pre></td></tr></table></figure><p>这会产生如下的对应着输入的结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入：[x*<span class="number">5</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">10</span>,<span class="number">2</span>)]</span><br><span class="line">你输入的内容是:  [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br></pre></td></tr></table></figure></p><h5 id="3-文件操作"><a href="#3-文件操作" class="headerlink" title="3.文件操作"></a>3.文件操作</h5><p><strong>3.1 <code>open()</code>打开文件</strong><br>用Python内置的open()函数打开一个文件，创建一个file对象，相关的方法才可以调用它进行读写。语法如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file object = open(file_name [, access_mode][, buffering])</span><br></pre></td></tr></table></figure><br>各个参数详解：</p><ul><li>file_name：file_name变量是一个包含了你要访问的文件名称的字符串值。</li><li>access_mode：access_mode决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</li><li>buffering:如果buffering的值被设为0，就不会有寄存。如果buffering的值取1，访问文件时会寄存行。如果将buffering的值设为大于1的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。</li></ul><p>不同模式下打开文件的列表如下：</p><div class="table-container"><table><thead><tr><th style="text-align:left">模式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">t</td><td style="text-align:left">文本模式 (默认)。</td></tr><tr><td style="text-align:left">x</td><td style="text-align:left">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td style="text-align:left">b</td><td style="text-align:left">二进制模式。</td></tr><tr><td style="text-align:left">+</td><td style="text-align:left">打开一个文件进行更新(可读可写)。</td></tr><tr><td style="text-align:left">U</td><td style="text-align:left">通用换行模式（不推荐）。</td></tr><tr><td style="text-align:left">r</td><td style="text-align:left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td style="text-align:left">rb</td><td style="text-align:left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left">r+</td><td style="text-align:left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td style="text-align:left">rb+</td><td style="text-align:left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left">w</td><td style="text-align:left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left">wb</td><td style="text-align:left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left">w+</td><td style="text-align:left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td style="text-align:left">wb+</td><td style="text-align:left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td style="text-align:left">a</td><td style="text-align:left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td style="text-align:left">ab</td><td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td style="text-align:left">a+</td><td style="text-align:left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td style="text-align:left">ab+</td><td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table></div><p>对于不同模式的可用操作如下表所示：</p><div class="table-container"><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">r</th><th style="text-align:center">r+</th><th style="text-align:center">w</th><th style="text-align:center">w+</th><th style="text-align:center">a</th><th style="text-align:center">a+</th></tr></thead><tbody><tr><td style="text-align:center">读</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center"></td><td style="text-align:center">+</td></tr><tr><td style="text-align:center">写</td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td></tr><tr><td style="text-align:center">创建</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td></tr><tr><td style="text-align:center">覆盖</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">指针在开始</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">指针在结尾</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center">+</td></tr></tbody></table></div><p><strong>3.2 <code>close()</code>关闭文件</strong><br><code>File</code>对象的 <code>close（）</code>方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。当一个文件对象的引用被重新指定给另一个文件时，Python 会关闭之前的文件。用 <code>close（）</code>方法关闭文件是一个很好的习惯。基本语法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileObject.close()</span><br></pre></td></tr></table></figure><br>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件</span></span><br><span class="line">fo = open(<span class="string">"foo.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">print(<span class="string">"文件名: "</span>, fo.name)</span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><br>输出：<code>文件名:  foo.txt</code></p><hr><p><strong>拓展：File对象的属性</strong><br>一个文件被打开后，你有一个file对象，你可以得到有关该文件的各种信息。以下是和file对象相关的所有属性的列表：</p><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">file.closed</td><td style="text-align:left">返回true如果文件已被关闭，否则返回false。</td></tr><tr><td style="text-align:left">file.mode</td><td style="text-align:left">返回被打开文件的访问模式。</td></tr><tr><td style="text-align:left">file.name</td><td style="text-align:left">返回文件的名称。</td></tr></tbody></table></div><p>例如,首先在根目录下创建文件<code>sample.txt</code>,然后执行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fo = open(<span class="string">"sample.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">print(<span class="string">"文件名: "</span>, fo.name)</span><br><span class="line">print(<span class="string">"是否已关闭 : "</span>, fo.closed)</span><br><span class="line">print(<span class="string">"访问模式 : "</span>, fo.mode)</span><br></pre></td></tr></table></figure><br>输出为：</p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">文件名:  sample.txt</span><br><span class="line">是否已关闭 :  <span class="literal">False</span></span><br><span class="line">访问模式 :  w</span><br></pre></td></tr></table></figure></h2><p><strong>3.3 <code>write()</code>写入文件</strong><br><code>write()</code>方法可将任何字符串写入一个打开的文件。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。<code>write()</code>方法不会在字符串的结尾添加换行符<code>(&#39;\n&#39;)</code>,基本语法为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileObject.write(string)</span><br></pre></td></tr></table></figure><br>在这里，被传递的参数是要写入到已打开文件的内容。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件</span></span><br><span class="line"><span class="comment"># write</span></span><br><span class="line">fo = open(<span class="string">"sample.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">fo.write(<span class="string">"hello world!\nVery good!\n"</span>)</span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><br>上述方法会创建sample.txt文件，并将收到的内容写入该文件，并最终关闭文件。如果你打开这个文件，将看到以下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello world!</span><br><span class="line">Very good!</span><br></pre></td></tr></table></figure></p><p><strong>3.4 <code>read()</code>和<code>readline()</code>读取文件</strong><br><code>read（）</code>方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。基础语法为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileObject.read([count])</span><br></pre></td></tr></table></figure><br>在这里，被传递的参数是要从已打开文件中读取的字节计数。该方法从文件的开头开始读入，如果没有传入count，它会尝试尽可能多地读取更多的内容，很可能是直到文件的末尾。例如（我们继续使用上一条中创建的<code>sample.txt</code>)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fo = open(<span class="string">"sample.txt"</span>, <span class="string">"r+"</span>)</span><br><span class="line">str = fo.read(<span class="number">10</span>)</span><br><span class="line">print(<span class="string">"读取的字符串是 : "</span>, str)</span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure><br>输出为：<code>读取的字符串是 :  hello worl</code></p><p>而<code>readline()</code>函数是读一行：<br>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fo = open(<span class="string">"sample.txt"</span>, <span class="string">"r+"</span>)</span><br><span class="line">str_2 = fo.readline()</span><br><span class="line">print(str_2)</span><br></pre></td></tr></table></figure><br>输出为：<code>hello world!</code><br>也可通过遍历：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fo = open(<span class="string">"sample.txt"</span>, <span class="string">"r+"</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> fo:</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><br>来输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello world!</span><br><span class="line"></span><br><span class="line">Very good!</span><br></pre></td></tr></table></figure></p><p><strong>3.5 文件定位<code>tell()</code>，位置改变<code>seek()</code></strong><br><code>tell()</code>方法告诉你文件内的当前位置, 换句话说，下一次的读写会发生在文件开头这么多字节之后。<code>seek（offset [,from]）</code>方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tell()、seek()</span></span><br><span class="line">fo = open(<span class="string">"tell.txt"</span>, <span class="string">'w'</span>)  <span class="comment"># 创建文件tell.txt</span></span><br><span class="line">fo.write(<span class="string">"vxiaozhe1998"</span>)  <span class="comment"># 在文件tell.txt中写入vxiaozhe1998</span></span><br><span class="line">print(<span class="string">"当前位置："</span>,fo.tell())  <span class="comment"># 输出当前位置</span></span><br><span class="line">fo = open(<span class="string">"tell.txt"</span>, <span class="string">"rb+"</span>)</span><br><span class="line"><span class="comment"># fo.tell()  # 将指针移动至当前位置</span></span><br><span class="line">fo.seek(<span class="number">5</span>, <span class="number">0</span>)  <span class="comment"># 将指针以文件开头为参考位置向后移动5</span></span><br><span class="line">str_1 = fo.read(<span class="number">3</span>)</span><br><span class="line">print(<span class="string">"str_1="</span>, str_1)</span><br><span class="line">fo.seek(<span class="number">-2</span>, <span class="number">1</span>)  <span class="comment"># 以当前位置为参考向前移动2</span></span><br><span class="line">str_2 = fo.read(<span class="number">3</span>)</span><br><span class="line">print(<span class="string">"str_2="</span>, str_2)</span><br><span class="line">fo.seek(<span class="number">-5</span>, <span class="number">2</span>)  <span class="comment"># 以末尾为参考位置向前移动5</span></span><br><span class="line">str_3 = fo.read(<span class="number">3</span>)</span><br><span class="line">print(<span class="string">"str_3="</span>, str_3)</span><br></pre></td></tr></table></figure><p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当前位置： <span class="number">12</span></span><br><span class="line">str_1= <span class="string">b'zhe'</span></span><br><span class="line">str_2= <span class="string">b'he1'</span></span><br><span class="line">str_3= <span class="string">b'e19'</span></span><br></pre></td></tr></table></figure><br>具体指针操作流程如下：<br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200310-1583841249481" alt="seek"><br>如果from被设为0，这意味着将文件的开头作为移动字节的参考位置。如果设为1，则使用当前的位置作为参考位置。如果它被设为2，那么该文件的末尾将作为参考位置。</p><p><strong>3.6 重命名和删除文件</strong><br>Python的os模块提供了帮你执行文件处理操作的方法，比如重命名和删除文件。要使用这个模块，你必须先导入它，然后才可以调用相关的各种功能。</p><ul><li><code>rename()</code>方法：</li></ul><p>语法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.rename(current_file_name, new_file_name)</span><br><span class="line">os.rename(当前文件名，新文件名)</span><br></pre></td></tr></table></figure><br>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 创建文件first.txt</span></span><br><span class="line">fo = open(<span class="string">"first.txt"</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># 在txt文件中添加内容first</span></span><br><span class="line">fo.write(<span class="string">"first"</span>)</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br><span class="line"><span class="comment"># 更改文件名为second.txt</span></span><br><span class="line">os.rename(<span class="string">"first.txt"</span>, <span class="string">"second.txt"</span>)</span><br></pre></td></tr></table></figure><br>此时在根目录中能够看到一个新文件<code>second.txt</code>,文件中内容为<code>first</code></p><ul><li><code>remove()</code>方法</li></ul><p>语法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.remove(file_name)</span><br><span class="line">os.remove(文件名)</span><br></pre></td></tr></table></figure><br>在<code>rename()</code>代码的基础上我们运行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 检测文件是否存在</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    fo=open(<span class="string">"second.txt"</span>)</span><br><span class="line">    print(<span class="string">"文件已打开"</span>)</span><br><span class="line">    fo.close()</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"文件不存在"</span>)</span><br><span class="line"><span class="comment"># 移除文件second()</span></span><br><span class="line">os.remove(<span class="string">"second.txt"</span>)</span><br><span class="line"><span class="comment"># 检测文件是否还存在</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    fo = open(<span class="string">"second.txt"</span>)</span><br><span class="line">    print(<span class="string">"文件已打开"</span>)</span><br><span class="line">    fo.close()</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"文件不存在"</span>)</span><br></pre></td></tr></table></figure><br>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">文件已打开</span><br><span class="line">文件不存在</span><br></pre></td></tr></table></figure></p><p><strong>3.8 Python中的目录</strong></p><ul><li><code>mkdir()</code></li></ul><p>可以使用os模块的mkdir()方法在当前目录下创建新的目录们。你需要提供一个包含了要创建的目录名称的参数。语法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(<span class="string">"newdir"</span>)</span><br></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.mkdir(<span class="string">"newdir"</span>)  <span class="comment"># 创建新目录</span></span><br></pre></td></tr></table></figure><br>执行代码后将会在脚本位置处生成一个名称为<code>newdir</code>的文件夹。</p><ul><li><code>chdir()</code></li></ul><p>可以用chdir()方法来改变当前的目录。chdir()方法需要的一个参数是你想设成当前目录的目录名称。语法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(<span class="string">"newdir"</span>)</span><br></pre></td></tr></table></figure><br>例如我们在上文中的<code>newdir</code>文件夹中新建一个<code>newdirs</code>目录，在<code>newdirs</code>目录中新建文本文档<code>index.txt</code>，执行下面代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    fo =open(<span class="string">"index.txt"</span>)</span><br><span class="line">    print(fo.read())</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"访问失败"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.chdir(<span class="string">"newdir/newdirs"</span>)</span><br><span class="line">    fo = open(<span class="string">"index.txt"</span>)</span><br><span class="line">    print(fo.read())</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"访问失败"</span>)</span><br></pre></td></tr></table></figure><p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问失败</span><br><span class="line">this <span class="keyword">is</span> index.txt</span><br></pre></td></tr></table></figure></p><ul><li><code>getcwd()</code></li></ul><p>getcwd()方法显示当前的工作目录。语法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure><br>例如执行下述代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(os.getcwd())</span><br></pre></td></tr></table></figure><br>我们会得到<code>F:\Python\9</code>即为当前脚本所在路径</p><ul><li><code>rmdir()</code></li></ul><p>rmdir()方法删除目录，目录名称以参数传递。在删除这个目录之前，它的所有内容应该先被清除。语法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.rmdir(<span class="string">'dirname'</span>)</span><br></pre></td></tr></table></figure><br>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.mkdir(<span class="string">"测试rmdir"</span>)</span><br><span class="line">    os.chdir(<span class="string">"测试rmdir"</span>)</span><br><span class="line">    print(<span class="string">"访问到rmdir目录"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"rmdir目录不存在"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.rmdir(<span class="string">"测试rmdir"</span>)</span><br><span class="line">    os.chdir(<span class="string">"测试rmdir"</span>)</span><br><span class="line">    print(<span class="string">"访问到rmdir目录"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"rmdir目录不存在"</span>)</span><br></pre></td></tr></table></figure><br>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问到rmdir目录</span><br><span class="line">rmdir目录不存在</span><br></pre></td></tr></table></figure></p><p><strong>更多资料</strong></p><hr><p><a href="https://www.runoob.com/python/os-file-methods.html" target="_blank" rel="noopener">Python OS 文件/目录方法</a><br><a href="https://www.runoob.com/python/file-methods.html" target="_blank" rel="noopener">Python File(文件) 方法</a></p><hr><p><strong>3.9 <code>with()</code>语句</strong><br>在实际情况中，我们应该尝试使用 with 语句处理文件对象，它会在文件用完后会自动关闭，就算发生异常也没关系。它是 try-finally 块的简写，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"sample.txt"</span>) <span class="keyword">as</span> fo:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">        print(line, end=<span class="string">""</span>)</span><br></pre></td></tr></table></figure><br>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello world!</span><br><span class="line">Very good!</span><br><span class="line">das45<span class="number">646</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><br>(sample.txt)中的内容</p><h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-拷贝文件"><a href="#1-拷贝文件" class="headerlink" title="1.拷贝文件"></a>1.拷贝文件</h5><p>我们拷贝给定的文本文件到另一个给定的文本文件。</p><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import os</span></span><br><span class="line">fo = open(<span class="string">'a.txt'</span>, <span class="string">"w"</span>)  <span class="comment"># 创建新文件a.txt</span></span><br><span class="line">fo.write(<span class="string">"hello2"</span>)  <span class="comment"># 在a.txt中写入hello</span></span><br><span class="line">fo = open(<span class="string">'a.txt'</span>, <span class="string">'r'</span>)  <span class="comment"># 打开a.txt用于读</span></span><br><span class="line">fq = open(<span class="string">'b.txt'</span>, <span class="string">'a'</span>)  <span class="comment"># 创建b.txt用于写入</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    fq.write(line)  <span class="comment"># 将a.txt内容追加至b.txt</span></span><br><span class="line">fo.close()</span><br><span class="line">fq.close()</span><br></pre></td></tr></table></figure><p>通过这段代码，在根目录将生成两个文件，文件名分别为<code>a.txt</code>,<code>b.txt</code>。且两个文件中内容完全相同。</p><h5 id="2-文本文件相关信息统计"><a href="#2-文本文件相关信息统计" class="headerlink" title="2.文本文件相关信息统计"></a>2.文本文件相关信息统计</h5><p>编写一个程序，对任意给定文本文件中的制表符、行、空格进行计数。</p><ul><li>代码(该脚本名称<code>file.py</code>)：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_file</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分析给定文本文件，返回其空格、制表符、行的相关信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :arg path: 要分析的文本文件的路径</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :return: 包含空格数、制表符数、行数的元组</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    fd = open(path)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    spaces = <span class="number">0</span></span><br><span class="line">    tabs = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, line <span class="keyword">in</span> enumerate(fd):</span><br><span class="line">        spaces += line.count(<span class="string">' '</span>)</span><br><span class="line">        tabs += line.count(<span class="string">'\t'</span>)</span><br><span class="line">    <span class="comment"># 现在关闭打开的文件</span></span><br><span class="line">    fd.close()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 以元组形式返回结果</span></span><br><span class="line">    <span class="keyword">return</span> spaces, tabs, i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    函数用于打印文件分析结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :arg path: 要分析的文本文件的路径</span></span><br><span class="line"><span class="string">    :return: 若文件存在则为 True，否则 False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">        spaces, tabs, lines = parse_file(path)</span><br><span class="line">        print(<span class="string">"Spaces &#123;&#125;. tabs &#123;&#125;. lines &#123;&#125;"</span>.format(spaces, tabs, lines))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">        main(sys.argv[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sys.exit(<span class="number">-1</span>)</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>使用：</strong></p><ul><li>我们在项目根目录创建<code>sample.txt</code>:<br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200310-1583812560805" alt="图片描述"></li><li>输入快捷键<code>Win+R</code>并输入<code>cmd</code><br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200310-1583812675951" alt="图片描述"></li><li>切换到项目根目录<br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200310-1583812722350" alt="图片描述"></li><li>输入<code>python file.py sample.txt</code>后敲击<code>enter</code>即可运行<br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200310-1583812893861" alt="图片描述"></li></ul></blockquote><ul><li><strong>拓展：</strong>在Pycharm中输入文件名输出文件信息统计</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_file</span><span class="params">(file)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分析给定文本文件，返回其空格、制表符、行的相关信息</span></span><br><span class="line"><span class="string">    :arg path: 要分析的文本文件的路径</span></span><br><span class="line"><span class="string">    :return: 包含空格数、制表符数、行数的元组</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    spaces = <span class="number">0</span></span><br><span class="line">    tabs = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, line <span class="keyword">in</span> enumerate(file):</span><br><span class="line">        spaces += line.count(<span class="string">' '</span>)</span><br><span class="line">        tabs += line.count(<span class="string">'\t'</span>)</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 以元组形式返回结果</span></span><br><span class="line">    <span class="keyword">return</span> spaces, tabs, i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(file)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    函数用于打印文件分析结果</span></span><br><span class="line"><span class="string">    :arg path: 要分析的文本文件的路径</span></span><br><span class="line"><span class="string">    :return: 若文件存在则为 True，否则 False</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> file:</span><br><span class="line">        spaces, tabs, lines = parse_file(file)</span><br><span class="line">        print(<span class="string">"Spaces &#123;&#125;. tabs &#123;&#125;. lines &#123;&#125;"</span>.format(spaces, tabs, lines))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    str = input(<span class="string">"请输入文件名（包括扩展名）："</span>)</span><br><span class="line">    file = open(str)</span><br><span class="line">    <span class="comment"># print(file)</span></span><br><span class="line">    <span class="comment"># str_r = file.read()</span></span><br><span class="line">    main(file)</span><br></pre></td></tr></table></figure><ul><li>结果:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入文件名（包括扩展名）：sample.txt</span><br><span class="line">Spaces <span class="number">2.</span> tabs <span class="number">3.</span> lines <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><h5 id="1-提取文件中的字符串"><a href="#1-提取文件中的字符串" class="headerlink" title="1.提取文件中的字符串"></a>1.提取文件中的字符串</h5><div class="note info no-icon"><p>我们需要实现一个程序用来提取文件中的字符串中的数字，然后打印输出。</p></div><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str = input(<span class="string">"请输入文件名（包括扩展名）："</span>)</span><br><span class="line"><span class="keyword">with</span> open(str) <span class="keyword">as</span> f:</span><br><span class="line">    s = f.read()</span><br><span class="line">res = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> char.isdigit():</span><br><span class="line">        res += char</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入文件名（包括扩展名）：sample.txt</span><br><span class="line"><span class="number">456461</span></span><br></pre></td></tr></table></figure><p>注：sample.txt的内容为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello world!</span><br><span class="line">Very good!</span><br><span class="line">das45<span class="number">646</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;在本文中将提供Python中的文件操作&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://ame1314.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>8.函数</title>
    <link href="https://ame1314.github.io/2020/03/08/8-%E5%87%BD%E6%95%B0/"/>
    <id>https://ame1314.github.io/2020/03/08/8-%E5%87%BD%E6%95%B0/</id>
    <published>2020-03-08T13:41:08.000Z</published>
    <updated>2020-03-08T13:44:56.964Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>本文中将讲解Python中函数的知识</p></div><a id="more"></a><h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul><li>函数的定义</li><li>局部/全局变量的概念</li><li>默认参数，关键字参数及强制关键字参数</li><li>文档字符串的使用</li><li>高阶函数，map() 函数</li></ul><h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。函数能提高应用的模块性，和代码的重复利用率。我们已经知道Python提供了许多内建函数，比如print()。但我们也可以自己创建函数，这被叫做用户自定义函数。</p><h5 id="1-定义一个函数"><a href="#1-定义一个函数" class="headerlink" title="1.定义一个函数"></a>1.定义一个函数</h5><ul><li>流程：<ul><li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。</li><li>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进。</li><li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li></ul></li><li>语法格式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义  函数名  （参数）:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionname</span><span class="params">( parameters )</span>:</span></span><br><span class="line">   <span class="string">"函数_文档字符串"</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><h5 id="2-调用函数"><a href="#2-调用函数" class="headerlink" title="2.调用函数"></a>2.调用函数</h5><p>定义一个函数只给了函数一个名称，指定了函数里包含的参数，和代码块结构。这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从Python提示符执行。</p><h5 id="3-对象"><a href="#3-对象" class="headerlink" title="3.对象"></a>3.对象</h5><div class="table-container"><table><thead><tr><th>对象类型</th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>可更改对象 </strong></td><td>Strings（字符串）</td><td>tuples（元组）</td><td>numbers（数字</td></tr><tr><td><strong>不可更改对象</strong></td><td>list（列表）</td><td>dict（字典）</td></tr></tbody></table></div><p>下面的例子将解析可更改对象与不可更改对象的区别：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(string_2, tuples_2, int_2, float_2, list_2, dict_2, set_2)</span>:</span></span><br><span class="line">    print(<span class="string">"已收到传入参数，传入值为："</span>, string_2, tuples_2, int_2, float_2, list_2, dict_2, set_2)</span><br><span class="line">    string_2 = <span class="string">"newstring"</span></span><br><span class="line">    <span class="keyword">del</span> tuples_2</span><br><span class="line">    int_2 = <span class="number">3</span></span><br><span class="line">    float_2 = <span class="number">2.0</span></span><br><span class="line">    list_2[<span class="number">0</span>] = <span class="string">"newlist1"</span></span><br><span class="line">    dict_2[<span class="string">'dict1'</span>] = <span class="string">"newfirst"</span></span><br><span class="line">    <span class="keyword">del</span> set_2</span><br><span class="line">    print(<span class="string">"已修改传入参数，目前的属性值为:"</span>, string_2, int_2, float_2, list_2, dict_2)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(tuples_2)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">"tumples_2已删除"</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(set_2)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">"set_2已删除"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string_1 = <span class="string">"string"</span>  <span class="comment"># 字符串对象</span></span><br><span class="line">tuples_1 = (<span class="string">"tuples1"</span>, <span class="string">"tuples2"</span>, <span class="number">3</span>)  <span class="comment"># 元组对象</span></span><br><span class="line">int_1 = <span class="number">2</span>  <span class="comment"># 整型对象</span></span><br><span class="line">float_1 = <span class="number">1.0</span>  <span class="comment"># 浮点型对象</span></span><br><span class="line">list_1 = [<span class="string">"list1"</span>, <span class="string">"list2"</span>, <span class="number">3</span>]  <span class="comment"># 列表对象</span></span><br><span class="line">dict_1 = &#123;<span class="string">"dict1"</span>: <span class="string">"first"</span>, <span class="string">"dict2"</span>: <span class="number">2</span>&#125;  <span class="comment"># 字典对象</span></span><br><span class="line">set_1 = &#123;<span class="string">"set1"</span>, <span class="string">"set2"</span>, <span class="number">3</span>&#125;  <span class="comment"># 集合对象</span></span><br><span class="line">change(string_1, tuples_1, int_1, float_1, list_1, dict_1, set_1)</span><br><span class="line">print(<span class="string">"返回值为：\n"</span>, string_1, tuples_1, int_1, float_1, list_1, dict_1, set_1)</span><br></pre></td></tr></table></figure></p><p>我们用一个表格来解析一下整个过程：</p><div class="table-container"><table><thead><tr><th>变量</th><th>输入</th><th>传入函数</th><th>修改之后</th><th>输出</th></tr></thead><tbody><tr><td>string</td><td>“string”</td><td>“string”</td><td>“newstring”</td><td>“string”</td></tr><tr><td>tuples</td><td>(“tuples1”,”tuples2”)</td><td>(“tuples1”,”tuples2”)</td><td>delete</td><td>(‘tuples1’, ‘tuples2’, 3)</td></tr><tr><td>int</td><td>2</td><td>2</td><td>3</td><td>2</td></tr><tr><td>float</td><td>1.0</td><td>1.0</td><td>2.0</td><td>1.0</td></tr><tr><td>list</td><td>[“list1”, “list2”, 3]</td><td>[“list1”, “list2”, 3]</td><td>[‘newlist1’, ‘list2’, 3]</td><td>[‘newlist1’, ‘list2’, 3]</td></tr><tr><td>dict</td><td>{“dict1”: “first”, “dict2”: 2}</td><td>{“dict1”: “first”, “dict2”: 2}</td><td>{‘dict1’: ‘newfirst’, ‘dict2’: 2}</td><td>{‘dict1’: ‘newfirst’, ‘dict2’: 2}</td></tr><tr><td>set</td><td>{“set1”, “set2”, 3}</td><td>{“set1”, “set2”, 3}</td><td>delete</td><td>{3, ‘set1’, ‘set2’}</td></tr></tbody></table></div><p>可以看到，只有属性为<code>列表对象list</code>,<code>字典对象dict</code>可以在函数中修改，而<code>字符串对象string</code>,<code>整型对象int</code>,<code>浮点型对象float</code>,<code>元组对象tuples</code>,<code>集合对象set</code>是无法在函数中修改的。</p><h5 id="4-参数"><a href="#4-参数" class="headerlink" title="4.参数"></a>4.参数</h5><ul><li><strong>必备参数</strong>：必备参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">must</span><span class="params">(str)</span>:</span></span><br><span class="line">    print(str)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    must()</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"未传入参数异常"</span>)</span><br></pre></td></tr></table></figure><p>该代码会输出<code>未传入参数异常</code>。</p><ul><li><strong>关键字参数：</strong>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyword_1</span><span class="params">(name_1, age_1)</span>:</span></span><br><span class="line">    print(<span class="string">"name_1 is &#123;&#125;,age_1 is &#123;&#125;"</span>.format(name_1, age_1))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">keyword_1(age_1=<span class="number">10</span>, name_1=<span class="string">"zhe"</span>)</span><br></pre></td></tr></table></figure><p>该代码会输出<code>name_1 is zhe,age_1 is 10</code>,关键字参数顺序不重要。</p><ul><li><strong>默认参数:</strong>调用函数时，默认参数的值如果没有传入，则被认为是默认值。例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(name, age=<span class="number">35</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"name is &#123;&#125;,age is &#123;&#125;"</span>.format(name, age))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">default(name=<span class="string">'zhang'</span>,age=<span class="number">50</span>);</span><br><span class="line">default(name=<span class="string">'zhe'</span>)</span><br></pre></td></tr></table></figure><p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name <span class="keyword">is</span> zhang,age <span class="keyword">is</span> <span class="number">50</span></span><br><span class="line">name <span class="keyword">is</span> zhe,age <span class="keyword">is</span> <span class="number">35</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>不定长参数:</strong>处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述2种参数不同，声明时不会命名。基本语法如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionname</span><span class="params">([formal_args,] *var_args_tuple )</span>:</span></span><br><span class="line">   <span class="string">"函数_文档字符串"</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><p>加了星号（*）的变量名会存放所有未命名的变量参数。不定长参数实例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nolenth_n</span><span class="params">(num_1, *num)</span>:</span></span><br><span class="line">    print(<span class="string">"输入的常量是："</span>, num_1)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> num:</span><br><span class="line">        print(<span class="string">"可变参数："</span>, x)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nolenth_n(<span class="number">10</span>)</span><br><span class="line">nolenth_n(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>)</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入的常量是： <span class="number">10</span></span><br><span class="line">输入的常量是： <span class="number">10</span></span><br><span class="line">可变参数： <span class="number">20</span></span><br><span class="line">可变参数： <span class="number">30</span></span><br><span class="line">可变参数： <span class="number">40</span></span><br></pre></td></tr></table></figure></p><p>在可变参数后定义的参数必须通过关键词传入：<br>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Force_key</span><span class="params">(name, *home, age)</span>:</span></span><br><span class="line">    print(<span class="string">"传入name为&#123;&#125;,age为&#123;&#125;"</span>.format(name, age))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    Force_key(name=<span class="string">"zhang"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"传入异常"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    Force_key(<span class="string">"zhang"</span>,age=<span class="number">16</span>)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"传入异常"</span>)</span><br></pre></td></tr></table></figure><br>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">传入异常</span><br><span class="line">传入name为zhang,age为<span class="number">16</span></span><br></pre></td></tr></table></figure></p><h5 id="5-匿名函数"><a href="#5-匿名函数" class="headerlink" title="5.匿名函数"></a>5.匿名函数</h5><p>python 使用 lambda 来创建匿名函数。lambda只是一个表达式，函数体比def简单很多。lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。<br>匿名函数语法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure><br>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="keyword">lambda</span> arg1, arg2: arg1 + arg2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用sum函数</span></span><br><span class="line">print(<span class="string">"相加后的值为 : "</span>, sum(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">print(<span class="string">"相加后的值为 : "</span>, sum(<span class="number">20</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><br>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">相加后的值为 :  <span class="number">30</span></span><br><span class="line">相加后的值为 :  <span class="number">40</span></span><br></pre></td></tr></table></figure></p><h5 id="6-return语句"><a href="#6-return语句" class="headerlink" title="6.return语句"></a>6.<code>return</code>语句</h5><p>return语句[表达式]退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。之前的例子都没有示范如何返回数值，下例便告诉你怎么做：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(arg1, arg2)</span>:</span></span><br><span class="line">    <span class="comment"># 返回2个参数的和."</span></span><br><span class="line">    total = arg1 + arg2</span><br><span class="line">    print(<span class="string">"函数内 : "</span>, total)</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用sum函数</span></span><br><span class="line">total = sum(<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><br>该程序输出<code>函数内 :  30</code></p><h5 id="7-全局变量与局部变量"><a href="#7-全局变量与局部变量" class="headerlink" title="7.全局变量与局部变量"></a>7.全局变量与局部变量</h5><p>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。下面的例子有助于理解这两个概念：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">9</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">global_1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(a)</span><br><span class="line">        a = <span class="number">100</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">"变量a误作局部变量"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">global_2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">global</span> a</span><br><span class="line">        print(a)</span><br><span class="line">        a = <span class="number">100</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">"变量a误作局部变量"</span>)</span><br><span class="line">print(<span class="string">"Before the function call "</span>, a)</span><br><span class="line">print(<span class="string">"inside change function"</span>)</span><br><span class="line">global_1()</span><br><span class="line">print(<span class="string">"After the function global_1() call "</span>, a)</span><br><span class="line">global_2()</span><br><span class="line">print(<span class="string">"After the function global_2() call "</span>, a)</span><br></pre></td></tr></table></figure><br>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Before the function call  <span class="number">9</span></span><br><span class="line">inside change function</span><br><span class="line">变量a误作局部变量</span><br><span class="line">After the function global_1() call  <span class="number">9</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">After the function global_2() call  <span class="number">100</span></span><br></pre></td></tr></table></figure><br>当函数中只要用到了变量 <code>a</code>，并且 <code>a</code>出现在表达式等于号的前面，就会被当作局部变量。当执行到 <code>print(a)</code>的时候会报错，因为 <code>a</code>作为函数局部变量是在<code>print(a)</code> 之后才定义的。而当使用 <code>global</code>关键字，对函数中的 <code>a</code>标志为全局变量，让函数内部使用全局变量的<code>a</code>,程序中就没有问题了。</p><h5 id="8-文档字符串"><a href="#8-文档字符串" class="headerlink" title="8.文档字符串"></a>8.文档字符串</h5><p>DocStrings 文档字符串是一个重要工具，用于解释文档程序，帮助你的程序文档更加简单易懂。我们可以在函数体的第一行使用一对三个单引号<code>&#39;&#39;&#39;</code>或者一对三个双引号<code>&quot;&quot;&quot;</code>来定义文档字符串。你可以使用 <code>__doc__</code>（注意双下划线）调用函数中的文档字符串属性。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">''' say something here！</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(function.__doc__)  <span class="comment"># 调用 doc</span></span><br></pre></td></tr></table></figure><p>输出为<code>say something here！</code></p><h5 id="9-高阶函数"><a href="#9-高阶函数" class="headerlink" title="9.高阶函数"></a>9.高阶函数</h5><p>高阶函数（Higher-order function）或仿函数（functor）是可以接受函数作为参数的函数：</p><ul><li>使用一个或多个函数作为参数</li><li>返回另一个函数作为输出</li></ul><p>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">high</span><span class="params">(l)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [i.upper() <span class="keyword">for</span> i <span class="keyword">in</span> l]</span><br><span class="line"><span class="comment"># 创建高阶函数，接受一个函数和一个列表作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(h, l)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> h(l)</span><br><span class="line"></span><br><span class="line">l = [<span class="string">'python'</span>, <span class="string">'Linux'</span>, <span class="string">'Git'</span>]</span><br><span class="line">print(test(high, l))</span><br></pre></td></tr></table></figure><br>输出为<code>[&#39;PYTHON&#39;, &#39;LINUX&#39;, &#39;GIT&#39;]</code></p><h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-定义一个函数用于实现求和运算"><a href="#1-定义一个函数用于实现求和运算" class="headerlink" title="1.定义一个函数用于实现求和运算"></a>1.定义一个函数用于实现求和运算</h5><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_my</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><h5 id="2-在代码中调用求和方法"><a href="#2-在代码中调用求和方法" class="headerlink" title="2.在代码中调用求和方法"></a>2.在代码中调用求和方法</h5><ul><li>代码： </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_my</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(<span class="string">"方法调用成功，传入的参数a=%d,b=%d,结果为:"</span> % (a, b), end=<span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = int(input(<span class="string">"Please enter an number:"</span>))</span><br><span class="line">n = int(input(<span class="string">"Please enter another number:"</span>))</span><br><span class="line">print(sum_my(m, n))</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Please enter an number:<span class="number">2</span></span><br><span class="line">Please enter another number:<span class="number">3</span></span><br><span class="line">方法调用成功，传入的参数a=<span class="number">2</span>,b=<span class="number">3</span>,结果为: <span class="number">5</span></span><br></pre></td></tr></table></figure><h5 id="3-重要的高阶函数"><a href="#3-重要的高阶函数" class="headerlink" title="3.重要的高阶函数"></a>3.重要的高阶函数</h5><p><strong>3.1 <code>map()</code></strong></p><p><code>map</code> 是一个在 Python 里非常有用的高阶函数。它接受一个函数和一个序列（迭代器）作为输入，然后对序列（迭代器）的每一个值应用这个函数，返回一个序列（迭代器），其包含应用函数后的结果。举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num * num</span><br><span class="line"></span><br><span class="line">print(list(map(square, lst)))</span><br></pre></td></tr></table></figure><br>输出为<code>[1, 4, 9, 16, 25]</code></p><ul><li>map函数用来将序列中的值处理再依次返回至列表内；</li><li>第一个参数func为函数，实现函数映射的功能，第二个参数为可迭代对象；</li><li>map函数的返回值为一个迭代器对象map；</li></ul><p><strong>3.2 <code>sorted()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 反向排序</span></span><br><span class="line">str = sorted(<span class="string">'abcdefg'</span>, reverse=<span class="literal">True</span>)</span><br><span class="line">print(str)  <span class="comment"># ['g', 'f', 'e', 'd', 'c', 'b', 'a']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按指定元素进行排序</span></span><br><span class="line">obj = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">5</span>,<span class="number">6</span>], [<span class="number">2</span>,<span class="number">8</span>], [<span class="number">8</span>,<span class="number">3</span>], [<span class="number">3</span>,<span class="number">10</span>]]</span><br><span class="line">func = <span class="keyword">lambda</span> x: x[<span class="number">1</span>]</span><br><span class="line">new_list = sorted(obj, key=func, reverse=<span class="literal">False</span>)</span><br><span class="line">print(new_list)  <span class="comment"># [[1, 2], [8, 3], [5, 6], [2, 8], [3, 10]]</span></span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'g'</span>, <span class="string">'f'</span>, <span class="string">'e'</span>, <span class="string">'d'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">8</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">6</span>], [<span class="number">2</span>, <span class="number">8</span>], [<span class="number">3</span>, <span class="number">10</span>]]</span><br></pre></td></tr></table></figure></p><ul><li>sorted是Python提供的功能强大的排序函数，满足字符、数字等排序要求；</li><li>函数的第一个参数为可迭代对象，第二个参数key作为排序的规则（指定按什么排序），第三个参数表明是否反向；</li><li>sorted函数的返回结果是列表类型；</li></ul><p><strong>3.3 <code>filter()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤</span></span><br><span class="line">obj = filter(<span class="keyword">lambda</span> x: x &gt; <span class="number">0</span>, [<span class="number">-20</span>, <span class="number">-10</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">20</span>])</span><br><span class="line">print(obj) <span class="comment"># &lt;filter object at 0x004C9EB0&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> obj:</span><br><span class="line">    print(i) <span class="comment"># 1 10 20</span></span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure></p><ul><li>filter函数也是接收一个函数和一个序列的高阶函数，其主要功能是过滤；</li><li>第一个参数是一个函数，第二个参数是可迭代对象；</li><li>filter函数的返回值是迭代器对象filter；</li></ul><h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><p>无</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文中将讲解Python中函数的知识&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://ame1314.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>7.字符串</title>
    <link href="https://ame1314.github.io/2020/03/08/7-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://ame1314.github.io/2020/03/08/7-%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-03-08T00:31:45.000Z</published>
    <updated>2020-03-08T13:42:10.429Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>在本文中将解释字符串有关知识</p></div><a id="more"></a><h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul><li>字符串的3种表示</li><li>字符串的分割、连接、大小写转换、搜索等常用操作</li></ul><h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><h5 id="1-字符串的三种表示法"><a href="#1-字符串的三种表示法" class="headerlink" title="1.字符串的三种表示法"></a>1.字符串的三种表示法</h5><p>字符串可以通过单引号<code>（&#39;...&#39;）</code>或双引号<code>（&quot;...&quot;）</code>来进行表示，如果你想要分几行输入字符串，并且希望行尾的换行符自动包含到字符串当中，可以使用三对引号：·<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code> 或 <code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'test1'</span>  <span class="comment">#单引号</span></span><br><span class="line">b = <span class="string">"test2"</span>  <span class="comment">#双引号</span></span><br><span class="line">a_1 = <span class="string">'第一行\</span></span><br><span class="line"><span class="string"> 第一行结尾'</span>    <span class="comment">#多行一行输出</span></span><br><span class="line">b_1 = <span class="string">'第一行 \n 第二行'</span>  <span class="comment">#换行</span></span><br><span class="line">c = <span class="string">"""</span></span><br><span class="line"><span class="string">   test3         </span></span><br><span class="line"><span class="string">   test4</span></span><br><span class="line"><span class="string">   """</span>          <span class="comment">#多行文本</span></span><br><span class="line">d = <span class="string">'''</span></span><br><span class="line"><span class="string">   test5</span></span><br><span class="line"><span class="string">   test6</span></span><br><span class="line"><span class="string">   '''</span>         <span class="comment">#多行文本</span></span><br><span class="line">print(<span class="string">"a="</span>, a)</span><br><span class="line">print(<span class="string">"a_1="</span>, a_1)</span><br><span class="line">print(<span class="string">"b="</span>, b)</span><br><span class="line">print(<span class="string">"b_1="</span>, b_1)</span><br><span class="line">print(<span class="string">"c="</span>, c)</span><br><span class="line">print(<span class="string">"d="</span>, d)</span><br></pre></td></tr></table></figure><p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a= test1</span><br><span class="line">a_1= 第一行 第一行结尾</span><br><span class="line">b= test2</span><br><span class="line">b_1= 第一行 </span><br><span class="line"> 第二行</span><br><span class="line">c= </span><br><span class="line">   test3         </span><br><span class="line">   test4</span><br><span class="line">   </span><br><span class="line">d= </span><br><span class="line">   test5</span><br><span class="line">   test6</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></p><blockquote><p>在字符串中可以通过在一行的结尾输入<code>\</code>再换行达到多行文本最终输出一行的效果，而通过在字符串中输入<code>\n</code>可以达到换行的目的。转义字符如下表所示：</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:left">转义字符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">(在行尾时)</td><td style="text-align:left">续行符</td></tr><tr><td style="text-align:left">\\</td><td style="text-align:left">反斜杠符号</td></tr><tr><td style="text-align:left">\’</td><td style="text-align:left">单引号</td></tr><tr><td style="text-align:left">\”</td><td style="text-align:left">双引号</td></tr><tr><td style="text-align:left">\a</td><td style="text-align:left">响铃</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:left">退格(Backspace)</td></tr><tr><td style="text-align:left">\e</td><td style="text-align:left">转义</td></tr><tr><td style="text-align:left">\000</td><td style="text-align:left">空</td></tr><tr><td style="text-align:left">\n</td><td style="text-align:left">换行</td></tr><tr><td style="text-align:left">\v</td><td style="text-align:left">纵向制表符</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:left">横向制表符</td></tr><tr><td style="text-align:left">\r</td><td style="text-align:left">回车</td></tr><tr><td style="text-align:left">\f</td><td style="text-align:left">换页</td></tr><tr><td style="text-align:left">\oyy</td><td style="text-align:left">八进制数，yy代表的字符，例如：\o12代表换行</td></tr><tr><td style="text-align:left">\xyy</td><td style="text-align:left">十六进制数，yy代表的字符，例如：\x0a代表换行</td></tr><tr><td style="text-align:left">\other</td><td style="text-align:left">其它的字符以普通格式输出</td></tr></tbody></table></div><h5 id="2-字符串方法"><a href="#2-字符串方法" class="headerlink" title="2.字符串方法"></a>2.字符串方法</h5><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>方法</strong></th><th style="text-align:left"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-capitalize.html" target="_blank" rel="noopener">string.capitalize()</a></td><td style="text-align:left">把字符串的第一个字符大写</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-center.html" target="_blank" rel="noopener">string.center(width)</a></td><td style="text-align:left">返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-count.html" target="_blank" rel="noopener">string.count(str, beg=0, end=len(string))</a></strong></td><td style="text-align:left">返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-decode.html" target="_blank" rel="noopener">string.decode(encoding=’UTF-8’, errors=’strict’)</a></td><td style="text-align:left">以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 ‘ignore’ 或 者’replace’</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-encode.html" target="_blank" rel="noopener">string.encode(encoding=’UTF-8’, errors=’strict’)</a></td><td style="text-align:left">以 encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-endswith.html" target="_blank" rel="noopener">string.endswith(obj, beg=0, end=len(string))</a></strong></td><td style="text-align:left">检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-expandtabs.html" target="_blank" rel="noopener">string.expandtabs(tabsize=8)</a></td><td style="text-align:left">把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8。</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-find.html" target="_blank" rel="noopener">string.find(str, beg=0, end=len(string))</a></strong></td><td style="text-align:left">检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-format.html" target="_blank" rel="noopener">string.format()</a></strong></td><td style="text-align:left">格式化字符串</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-index.html" target="_blank" rel="noopener">string.index(str, beg=0, end=len(string))</a></strong></td><td style="text-align:left">跟find()方法一样，只不过如果str不在 string中会报一个异常.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isalnum.html" target="_blank" rel="noopener">string.isalnum()</a></td><td style="text-align:left">如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isalpha.html" target="_blank" rel="noopener">string.isalpha()</a></td><td style="text-align:left">如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isdecimal.html" target="_blank" rel="noopener">string.isdecimal()</a></td><td style="text-align:left">如果 string 只包含十进制数字则返回 True 否则返回 False.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isdigit.html" target="_blank" rel="noopener">string.isdigit()</a></td><td style="text-align:left">如果 string 只包含数字则返回 True 否则返回 False.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-islower.html" target="_blank" rel="noopener">string.islower()</a></td><td style="text-align:left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isnumeric.html" target="_blank" rel="noopener">string.isnumeric()</a></td><td style="text-align:left">如果 string 中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isspace.html" target="_blank" rel="noopener">string.isspace()</a></td><td style="text-align:left">如果 string 中只包含空格，则返回 True，否则返回 False.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-istitle.html" target="_blank" rel="noopener">string.istitle()</a></td><td style="text-align:left">如果 string 是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-isupper.html" target="_blank" rel="noopener">string.isupper()</a></td><td style="text-align:left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-join.html" target="_blank" rel="noopener">string.join(seq)</a></strong></td><td style="text-align:left">以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-ljust.html" target="_blank" rel="noopener">string.ljust(width)</a></td><td style="text-align:left">返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-lower.html" target="_blank" rel="noopener">string.lower()</a></td><td style="text-align:left">转换 string 中所有大写字符为小写.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-lstrip.html" target="_blank" rel="noopener">string.lstrip()</a></td><td style="text-align:left">截掉 string 左边的空格</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-maketrans.html" target="_blank" rel="noopener">string.maketrans(intab, outtab])</a></td><td style="text-align:left">maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-max.html" target="_blank" rel="noopener">max(str)</a></td><td style="text-align:left">返回字符串 <em>str</em> 中最大的字母。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-min.html" target="_blank" rel="noopener">min(str)</a></td><td style="text-align:left">返回字符串 <em>str</em> 中最小的字母。</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-partition.html" target="_blank" rel="noopener">string.partition(str)</a></strong></td><td style="text-align:left">有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str == string.</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-replace.html" target="_blank" rel="noopener">string.replace(str1, str2, num=string.count(str1))</a></strong></td><td style="text-align:left">把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-rfind.html" target="_blank" rel="noopener">string.rfind(str, beg=0,end=len(string) )</a></td><td style="text-align:left">类似于 find()函数，不过是从右边开始查找.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-rindex.html" target="_blank" rel="noopener">string.rindex( str, beg=0,end=len(string))</a></td><td style="text-align:left">类似于 index()，不过是从右边开始.</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-rjust.html" target="_blank" rel="noopener">string.rjust(width)</a></td><td style="text-align:left">返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-rpartition.html" target="_blank" rel="noopener">string.rpartition(str)</a></td><td style="text-align:left">类似于 partition()函数,不过是从右边开始查找</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-rstrip.html" target="_blank" rel="noopener">string.rstrip()</a></td><td style="text-align:left">删除 string 字符串末尾的空格.</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-split.html" target="_blank" rel="noopener">string.split(str=””, num=string.count(str))</a></strong></td><td style="text-align:left">以 str 为分隔符切片 string，如果 num 有指定值，则仅分隔 num+ 个子字符串</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-splitlines.html" target="_blank" rel="noopener">string.splitlines([keepends])</a></td><td style="text-align:left">按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-startswith.html" target="_blank" rel="noopener">string.startswith(obj, beg=0,end=len(string))</a></td><td style="text-align:left">检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-strip.html" target="_blank" rel="noopener">string.strip([obj])</a></strong></td><td style="text-align:left">在 string 上执行 lstrip()和 rstrip()</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-swapcase.html" target="_blank" rel="noopener">string.swapcase()</a></td><td style="text-align:left">翻转 string 中的大小写</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-title.html" target="_blank" rel="noopener">string.title()</a></td><td style="text-align:left">返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td style="text-align:left"><strong><a href="https://www.runoob.com/python/att-string-translate.html" target="_blank" rel="noopener">string.translate(str, del=””)</a></strong></td><td style="text-align:left">根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-upper.html" target="_blank" rel="noopener">string.upper()</a></td><td style="text-align:left">转换 string 中的小写字母为大写</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/python/att-string-zfill.html" target="_blank" rel="noopener">string.zfill(width)</a></td><td style="text-align:left">返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0</td></tr></tbody></table></div><h5 id="3-字符串运算"><a href="#3-字符串运算" class="headerlink" title="3.字符串运算"></a>3.字符串运算</h5><div class="table-container"><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">字符串连接</td><td style="text-align:left">&gt;&gt;&gt;a + b ‘HelloPython’</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">重复输出字符串</td><td style="text-align:left">&gt;&gt;&gt;a * 2 ‘HelloHello’</td></tr><tr><td style="text-align:left">[]</td><td style="text-align:left">通过索引获取字符串中字符</td><td style="text-align:left">&gt;&gt;&gt;a[1] ‘e’</td></tr><tr><td style="text-align:left">[ : ]</td><td style="text-align:left">截取字符串中的一部分</td><td style="text-align:left">&gt;&gt;&gt;a[1:4] ‘ell’</td></tr><tr><td style="text-align:left">in</td><td style="text-align:left">成员运算符 - 如果字符串中包含给定的字符返回 True</td><td style="text-align:left">&gt;&gt;&gt;”H” in a True</td></tr><tr><td style="text-align:left">not in</td><td style="text-align:left">成员运算符 - 如果字符串中不包含给定的字符返回 True</td><td style="text-align:left">&gt;&gt;&gt;”M” not in a True</td></tr><tr><td style="text-align:left">r/R</td><td style="text-align:left">原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母”r”（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</td><td style="text-align:left">&gt;&gt;&gt;print r’\n’ \n &gt;&gt;&gt; print R’\n’ \n</td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">格式字符串</td><td style="text-align:left">下一条</td></tr></tbody></table></div><h5 id="4-字符串格式化"><a href="#4-字符串格式化" class="headerlink" title="4.字符串格式化"></a>4.字符串格式化</h5><p>Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">"My name is %s and weight is %d kg!"</span> % (<span class="string">'Zara'</span>, <span class="number">21</span>) </span><br><span class="line"></span><br><span class="line">&gt;&gt;My name <span class="keyword">is</span> Zara <span class="keyword">and</span> weight <span class="keyword">is</span> <span class="number">21</span> kg!</span><br></pre></td></tr></table></figure><p>字符串格式化符号如下表所示：</p><div class="table-container"><table><thead><tr><th style="text-align:left">符  号</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">%c</td><td style="text-align:left">格式化字符及其ASCII码</td></tr><tr><td style="text-align:left">%s</td><td style="text-align:left">格式化字符串</td></tr><tr><td style="text-align:left">%d</td><td style="text-align:left">格式化整数</td></tr><tr><td style="text-align:left">%u</td><td style="text-align:left">格式化无符号整型</td></tr><tr><td style="text-align:left">%o</td><td style="text-align:left">格式化无符号八进制数</td></tr><tr><td style="text-align:left">%x</td><td style="text-align:left">格式化无符号十六进制数</td></tr><tr><td style="text-align:left">%X</td><td style="text-align:left">格式化无符号十六进制数（大写）</td></tr><tr><td style="text-align:left">%f</td><td style="text-align:left">格式化浮点数字，可指定小数点后的精度</td></tr><tr><td style="text-align:left">%e</td><td style="text-align:left">用科学计数法格式化浮点数</td></tr><tr><td style="text-align:left">%E</td><td style="text-align:left">作用同%e，用科学计数法格式化浮点数</td></tr><tr><td style="text-align:left">%g</td><td style="text-align:left">%f和%e的简写</td></tr><tr><td style="text-align:left">%G</td><td style="text-align:left">%F 和 %E 的简写</td></tr><tr><td style="text-align:left">%p</td><td style="text-align:left">用十六进制数格式化变量的地址</td></tr></tbody></table></div><p>格式化操作符辅助指令：</p><div class="table-container"><table><thead><tr><th style="text-align:left">符号</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">*</td><td style="text-align:left">定义宽度或者小数点精度</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">用做左对齐</td></tr><tr><td style="text-align:left">+</td><td style="text-align:left">在正数前面显示加号( + )</td></tr><tr><td style="text-align:left"><sp></td><td style="text-align:left">在正数前面显示空格</td></tr><tr><td style="text-align:left">#</td><td style="text-align:left">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td></tr><tr><td style="text-align:left">0</td><td style="text-align:left">显示的数字前面填充’0’而不是默认的空格</td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">‘%%’输出一个单一的’%’</td></tr><tr><td style="text-align:left">(var)</td><td style="text-align:left">映射变量(字典参数)</td></tr><tr><td style="text-align:left">m.n.</td><td style="text-align:left">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td></tr></tbody></table></div><h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-字符串常用函数使用："><a href="#1-字符串常用函数使用：" class="headerlink" title="1.字符串常用函数使用："></a>1.字符串常用函数使用：</h5><p><strong>1.1 <code>split()</code>和<code>join()</code></strong><br>split() 分割任意字符串, join() 使用指定字符连接多个字符串,两者通常配合使用</p><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'hello world  boy#zhe#nan,good'</span></span><br><span class="line">print(s.split())        <span class="comment"># 无参数</span></span><br><span class="line">print(s.split(<span class="string">"#"</span>))     <span class="comment"># 定义分割符号</span></span><br><span class="line">print(s.split(<span class="string">"#"</span>, <span class="number">1</span>))  <span class="comment"># 定义分割段数</span></span><br><span class="line">print(<span class="string">"-"</span>.join(s.split(<span class="string">"#"</span>)))  <span class="comment">#使用"-"替换"#"</span></span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'boy#zhe#nan,good'</span>]</span><br><span class="line">[<span class="string">'hello world  boy'</span>, <span class="string">'zhe'</span>, <span class="string">'nan,good'</span>]</span><br><span class="line">[<span class="string">'hello world  boy'</span>, <span class="string">'zhe#nan,good'</span>]</span><br><span class="line">hello world  boy-zhe-nan,good</span><br></pre></td></tr></table></figure><ul><li>分析：<br>split() 方法语法：<br><code>str.split(str=&quot;&quot;, num=string.count(str)).</code><blockquote><p>其中：</p><ul><li>str — 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。</li><li>num — 分割次数。默认为 -1, 即分隔所有。</li></ul></blockquote></li></ul><p><strong>1.2 <code>title()</code></strong><br>该方法返回”标题化”的字符串,就是说所有单词都是以大写开始。</p><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"this is string example....wow!!!"</span></span><br><span class="line"><span class="keyword">print</span> (str.title())</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This Is String Example....Wow!!!</span><br></pre></td></tr></table></figure><p><strong>1.3 <code>upper()</code></strong><br>将字符串中的小写字母转为大写字母。</p><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"this is string example....wow!!!"</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"str.upper() : "</span>, str.upper())</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.upper() :  THIS IS STRING EXAMPLE....WOW!!!</span><br></pre></td></tr></table></figure><p><strong>1.4 <code>lower()</code></strong><br>将字符串中的大写字母转为小写字母。</p><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"This Is String Example....Wow!!!"</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"str.lower() : "</span>, str.lower())</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> string example....wow!!!</span><br></pre></td></tr></table></figure><p><strong>1.5 <code>swapcase()</code></strong><br>返回大小写交换版本。</p><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"My name is Zhang"</span></span><br><span class="line">print(s.swapcase())</span><br></pre></td></tr></table></figure><ul><li>结果<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mY NAME IS zHANG</span><br></pre></td></tr></table></figure></li></ul><p><strong>1.6 <code>isalnum()</code></strong><br>检查所有字符是否只有字母和数字’</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s_1 = <span class="string">"test1"</span></span><br><span class="line">s_2 = <span class="string">"test 2"</span></span><br><span class="line">print(s_1.isalnum(), s_2.isalnum())</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">+ 结果</span><br><span class="line"></span><br><span class="line">​```python</span><br><span class="line"><span class="literal">True</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>1.7 <code>isalpha()</code></strong><br>检查所有字符中是否只有字母</p><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s_3 = <span class="string">"test1"</span></span><br><span class="line">s_4 = <span class="string">"test "</span></span><br><span class="line">s_5 = <span class="string">"test"</span></span><br><span class="line">print(s_3.isalpha(), s_4.isalpha(), s_5.isalpha())</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">False</span> <span class="literal">False</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p><strong>1.8 <code>strip()</code>、<code>lstrip()</code>、<code>rstrip()</code></strong><br><code>strip()</code>移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。<br><strong>注意：</strong>该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。<br><code>rstrip()</code>删除 string 字符串末尾的指定字符（默认为空格）。<br><code>lstrip()</code>截掉字符串左边的空格或指定字符。</p><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">' a bc\n'</span></span><br><span class="line">print(<span class="string">"s.strip()="</span>, s.strip())  <span class="comment"># 无参</span></span><br><span class="line">print(<span class="string">"s.strip(\"a \")="</span>, s.strip(<span class="string">"a "</span>))  <span class="comment"># 有参</span></span><br><span class="line">s_1 = <span class="string">' www.baidu.com '</span></span><br><span class="line">print(<span class="string">"s_1.lstrip()="</span>, s_1.lstrip())  <span class="comment"># 无参</span></span><br><span class="line">print(<span class="string">"s_1.lstrip(\"wu \")="</span>, s_1.lstrip(<span class="string">"wu "</span>))  <span class="comment"># 有参</span></span><br><span class="line">print(<span class="string">"s_1.rstrip()="</span>, s_1.rstrip())  <span class="comment"># 无参</span></span><br><span class="line">print(<span class="string">"s_1.rstrip(\"com \")="</span>, s_1.rstrip(<span class="string">"com "</span>))  <span class="comment"># 有参</span></span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s.strip()= a bc</span><br><span class="line">s.strip(<span class="string">"a "</span>)= bc</span><br><span class="line"></span><br><span class="line">s_1.lstrip()= www.baidu.com </span><br><span class="line">s_1.lstrip(<span class="string">"wu "</span>)= .baidu.com </span><br><span class="line">s_1.rstrip()=  www.baidu.com</span><br><span class="line">s_1.rstrip(<span class="string">"com "</span>)=  www.baidu.</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>参数中包括的最后一个结尾的字符就是截取的部分，例如：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s_3 = <span class="string">'abcdefg'</span></span><br><span class="line">print(s_3.strip(<span class="string">'cbaf'</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt;defg</span><br></pre></td></tr></table></figure><p>由于没有输入<code>g</code>，字符<code>f</code>并没有截取</p><p><strong>1.9 <code>find()</code>，<code>startwith()</code>，<code>endwith()</code></strong><br><code>find()</code>搜索字符串里的文本或子字符串，没有找到则返回 -1。<br><code>startwith(value)</code>检查字符串是否以<code>value</code>开头，是则返回true，否则返回false<br><code>endwith(value)</code>检查字符串是否以<code>value</code>结尾，是则返回true，否则返回false</p><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"faulty for a reason"</span></span><br><span class="line">print(s.find(<span class="string">"for"</span>))</span><br><span class="line">print(s.find(<span class="string">"fora"</span>))</span><br><span class="line">print(s.startswith(<span class="string">"fa"</span>))</span><br><span class="line">print(s.startswith(<span class="string">"fas"</span>))  <span class="comment"># 检查字符串是否以 fa 开头</span></span><br><span class="line">print(s.endswith(<span class="string">"reason"</span>))</span><br><span class="line">print(s.endswith(<span class="string">"reasons"</span>)) <span class="comment"># 检查字符串是否以 reason 结尾</span></span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><h5 id="1-回文检查"><a href="#1-回文检查" class="headerlink" title="1.回文检查"></a>1.回文检查</h5><div class="note info no-icon"><p>回文是一种无论从左还是从右读都一样的字符序列。比如 “madam”。在这个例子中，我们检查用户输入的字符串是否是回文，并输出结果。</p></div><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">"请输入一串字符串："</span>)</span><br><span class="line">z = s[::<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">if</span> s == z:</span><br><span class="line">    print(<span class="string">"是回文"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"不是回文"</span>)</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入一串字符串：asda</span><br><span class="line">不是回文</span><br><span class="line">请输入一串字符串：abcba</span><br><span class="line">是回文</span><br></pre></td></tr></table></figure><h5 id="2-单词计数"><a href="#2-单词计数" class="headerlink" title="2.单词计数"></a>2.单词计数</h5><div class="note info no-icon"><p>对用户输入的一行文本进行单词计数</p></div><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">"请输入一段句子（英文）:"</span>)</span><br><span class="line">print(<span class="string">"这段句子中有%d个单词"</span> % (len(s.split(<span class="string">" "</span>))))</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入一段句子（英文）:my name <span class="keyword">is</span> zhagn</span><br><span class="line">这段句子中有<span class="number">4</span>个单词</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;在本文中将解释字符串有关知识&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://ame1314.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>6.数据结构</title>
    <link href="https://ame1314.github.io/2020/03/07/6-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://ame1314.github.io/2020/03/07/6-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2020-03-07T13:59:46.000Z</published>
    <updated>2020-03-07T16:12:06.167Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>数据结构（data structure）是计算机中存储、组织数据的方式。本实验将深入了解列表。</p></div><a id="more"></a><h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul><li>列表的方法与列表元素的删除</li><li>将列表用作栈和队列</li><li>列表推导式</li><li>元组、集合、字典的创建与操作</li><li>enumerate() 和 zip() 函数</li></ul><h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><h5 id="1-列表的更多方法"><a href="#1-列表的更多方法" class="headerlink" title="1.列表的更多方法"></a>1.列表的更多方法</h5><p>1.1 插入<code>insert(position,value)</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br><span class="line">a.insert(<span class="number">0</span>, <span class="number">1</span>)  <span class="comment"># 在列表索引 0 位置添加元素 1</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br><span class="line"></span><br><span class="line">a.insert(<span class="number">0</span>, <span class="string">'1'</span>) </span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="string">'1'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br></pre></td></tr></table></figure></p><blockquote><p>在索引为<code>0</code>的位置插入值，任意属性的值均可。</p></blockquote><p>1.2 计数<code>count(value)</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br><span class="line">print(a.count(<span class="number">45</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure></p><blockquote><p>检索列表中为<code>45</code>的关键词的数目。</p></blockquote><p>1.3 移除指定值<code>remove(value)</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br><span class="line">a.remove(<span class="number">45</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br></pre></td></tr></table></figure></p><blockquote><p>可知，<code>remove()</code>函数每次只能移除一个有效值</p></blockquote><p>1.4 反转<code>reverse()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br><span class="line">a.reverse();            <span class="comment">#反转a列表</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">68</span>, <span class="number">97</span>, <span class="number">66</span>, <span class="number">64</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><p>1.5 追加<code>extend()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br><span class="line">b = [<span class="number">989</span>, <span class="number">-546</span>, <span class="number">798</span>]</span><br><span class="line">a.extend(b)             <span class="comment">#追加b列表至a列表</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>, <span class="number">989</span>, <span class="number">-546</span>, <span class="number">798</span>]</span><br></pre></td></tr></table></figure></p><p>1.6 排序<code>sort()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">68</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">69</span>, <span class="number">45</span>]</span><br><span class="line">a.sort()                <span class="comment">#对a列表排序</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">97</span>]</span><br></pre></td></tr></table></figure></p><h5 id="2-将列表用作栈"><a href="#2-将列表用作栈" class="headerlink" title="2.将列表用作栈"></a>2.将列表用作栈</h5><p>栈是我们通常所说的一种 LIFO （Last In First Out 后进先出）数据结构。它的意思是最后进入的数据第一个出来。一个最简单的例子往一端封闭的管道放入一些弹珠然后取出来，如果你想把弹珠取出来，你必须从你最后放入弹珠的位置挨个拿出来。</p><p>2.1 <code>pop(value)</code>方法<br>使用该方法可以将列表中第<code>value</code>个元素弹出，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">print(a.pop(<span class="number">1</span>))</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;<span class="number">1</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">print(a.pop())</span><br><span class="line">&gt;&gt;<span class="number">5</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>pop()</code>方法如果不加参数即将最后一个元素弹出，通过这种方法实现了栈。</p></blockquote><h5 id="3-将列表用作队列"><a href="#3-将列表用作队列" class="headerlink" title="3.将列表用作队列"></a>3.将列表用作队列</h5><p>队列 是一种在末尾追加数据以及在开始弹出数据的数据结构。与栈不同，它是 FIFO （First In First Out 先进先出）的数据结构。<br>通过代码来实现队列：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">a.append(<span class="number">1</span>)</span><br><span class="line">print(a)</span><br><span class="line">a.pop(<span class="number">0</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><h5 id="4-列表推导式"><a href="#4-列表推导式" class="headerlink" title="4.列表推导式"></a>4.列表推导式</h5><p>列表推导式为从序列中创建列表提供了一个简单的方法。如果没有列表推导式，一般都是这样创建列表的：通过将一些操作应用于序列的每个成员并通过返回的元素创建列表，或者通过满足特定条件的元素创建子序列。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    a.append(x**<span class="number">2</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><br>但是当我们输入代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">&gt;&gt;<span class="number">9</span></span><br></pre></td></tr></table></figure><br>会发现<code>x</code>值仍然存在，通过下面方法达到生成列表且不产生资源浪费：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><br>而对于坐标，同样可以通过这种方法：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m = [(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>] <span class="keyword">if</span> x != y]</span><br><span class="line">print(m)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[(<span class="number">1</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure></p><h5 id="5-元组"><a href="#5-元组" class="headerlink" title="5.元组"></a>5.元组</h5><p>元组与列表类似，不同之处在于元组的元素不能修改。元组使用小括号，列表使用方括号。元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。例如：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tup1</span> = ()     <span class="comment">#创建空元组</span></span><br><span class="line"><span class="attr">tup2</span> = (<span class="number">12</span>,)  <span class="comment">#创建只包含一个元素的元组</span></span><br></pre></td></tr></table></figure><br>元组与字符串类似，下标索引从0开始，可以进行截取，组合等。</p><p><strong>5.1 元组运算符</strong><br>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</p><div class="table-container"><table><thead><tr><th style="text-align:left">Python 表达式</th><th style="text-align:left">结果</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">len((1, 2, 3))</td><td style="text-align:left">3</td><td style="text-align:left">计算元素个数</td></tr><tr><td style="text-align:left">(1, 2, 3) + (4, 5, 6)</td><td style="text-align:left">(1, 2, 3, 4, 5, 6)</td><td style="text-align:left">连接</td></tr><tr><td style="text-align:left">(‘Hi!’,) * 4</td><td style="text-align:left">(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td><td style="text-align:left">复制</td></tr><tr><td style="text-align:left">3 in (1, 2, 3)</td><td style="text-align:left">True</td><td style="text-align:left">元素是否存在</td></tr><tr><td style="text-align:left">for x in (1, 2, 3): print x,</td><td style="text-align:left">1 2 3</td><td style="text-align:left">迭代</td></tr></tbody></table></div><p><strong>5.2 元组索引、截取</strong><br>因为元组也是一个序列，所以我们可以访问元组中的指定位置的元素，也可以截取索引中的一段元素，如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L = (<span class="string">'spam'</span>, <span class="string">'Spam'</span>, <span class="string">'SPAM!'</span>)</span><br></pre></td></tr></table></figure></p><div class="table-container"><table><thead><tr><th style="text-align:left">Python 表达式</th><th style="text-align:left">结果</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">L[2]</td><td style="text-align:left">‘SPAM!’</td><td style="text-align:left">读取第三个元素</td></tr><tr><td style="text-align:left">L[-2]</td><td style="text-align:left">‘Spam’</td><td style="text-align:left">反向读取，读取倒数第二个元素</td></tr><tr><td style="text-align:left">L[1:]</td><td style="text-align:left">(‘Spam’, ‘SPAM!’)</td><td style="text-align:left">截取元素</td></tr></tbody></table></div><blockquote><p>任意无符号的对象，以逗号隔开，默认为元组</p></blockquote><p><strong>5.3 元组内置函数</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">方法及描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-tuple-cmp.html" target="_blank" rel="noopener">cmp(tuple1, tuple2)</a> 比较两个元组元素。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-tuple-len.html" target="_blank" rel="noopener">len(tuple)</a> 计算元组元素个数。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-tuple-max.html" target="_blank" rel="noopener">max(tuple)</a> 返回元组中元素最大值。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-tuple-min.html" target="_blank" rel="noopener">min(tuple)</a> 返回元组中元素最小值。</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-tuple-tuple.html" target="_blank" rel="noopener">tuple(seq)</a> 将列表转换为元组。</td></tr></tbody></table></div><h5 id="6-集合"><a href="#6-集合" class="headerlink" title="6.集合"></a>6.集合</h5><p>集合是一个无序不重复元素的集。基本功能包括关系测试和消除重复元素。集合对象还支持 union（联合），intersection（交），difference（差）和 symmetric difference（对称差集）等数学运算。大括号或 set() 函数可以用来创建集合，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'2'</span>&#125;</span><br><span class="line">b = set(<span class="string">'1232'</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&#123;<span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'1'</span>&#125;</span><br><span class="line">&#123;<span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'1'</span>&#125;</span><br></pre></td></tr></table></figure></p><p><strong>6.1 常用运算</strong></p><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">b = set(<span class="string">'alacazam'</span>)</span><br><span class="line">print(<span class="string">'a='</span>, a)</span><br><span class="line">print(<span class="string">'b='</span>, b)</span><br><span class="line">print(<span class="string">'a - b='</span>, a - b)  <span class="comment"># a 有而 b 没有的字母</span></span><br><span class="line">print(<span class="string">'a | b='</span>, a | b)  <span class="comment"># 存在于 a 或 b 的字母</span></span><br><span class="line">print(<span class="string">'a &amp; b='</span>, a &amp; b)  <span class="comment"># a 和 b 都有的字母</span></span><br><span class="line">print(<span class="string">'a ^ b='</span>, a ^ b)  <span class="comment"># 存在于 a 或 b 但不同时存在的字母</span></span><br><span class="line">print(<span class="string">'a.pop()='</span>, a.pop()) <span class="comment">#随机弹出一个元素</span></span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a= &#123;<span class="string">'r'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>&#125;</span><br><span class="line">b= &#123;<span class="string">'c'</span>, <span class="string">'m'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>&#125;</span><br><span class="line">a - b= &#123;<span class="string">'r'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line">a | b= &#123;<span class="string">'r'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>&#125;</span><br><span class="line">a &amp; b= &#123;<span class="string">'c'</span>, <span class="string">'a'</span>&#125;</span><br><span class="line">a ^ b= &#123;<span class="string">'l'</span>, <span class="string">'z'</span>, <span class="string">'b'</span>, <span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'m'</span>&#125;</span><br><span class="line">a.pop()= d</span><br></pre></td></tr></table></figure><h5 id="7-字典"><a href="#7-字典" class="headerlink" title="7.字典"></a>7.字典</h5><p>字典是是无序的键值对（<code>key:value</code>）集合，同一个字典内的键必须是互不相同的。一对大括号 {} 创建一个空字典。初始化字典时，在大括号内放置一组逗号分隔的键<code>：</code>值对，这也是字典输出的方式。我们使用键来检索存储在字典中的数据。格式如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2 &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。</p></blockquote><p><strong>7.1 字典键的特性</strong><br>字典值可以没有限制地取任何python对象，既可以是标准的对象，也可以是用户定义的，但键不行。两个重要的点需要记住：</p><ul><li>不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住</li><li>键必须不可变，所以可以用数字，字符串或元组充当，所以用列表就不行</li></ul><p><strong>7.2 字典内置函数和方法</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">函数及描述</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-cmp.html" target="_blank" rel="noopener">cmp(dict1, dict2)</a> 比较两个字典元素。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-len.html" target="_blank" rel="noopener">len(dict)</a> 计算字典元素个数，即键的总数。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-str.html" target="_blank" rel="noopener">str(dict)</a> 输出字典可打印的字符串表示。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-type.html" target="_blank" rel="noopener">type(variable)</a> 返回输入的变量类型，如果变量是字典就返回字典类型。</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-clear.html" target="_blank" rel="noopener">dict.clear()</a> 删除字典内所有元素</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-copy.html" target="_blank" rel="noopener">dict.copy()</a> 返回一个字典的浅复制</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-fromkeys.html" target="_blank" rel="noopener">dict.fromkeys(seq[, val])</a> 创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-get.html" target="_blank" rel="noopener">dict.get(key, default=None)</a> 返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-has_key.html" target="_blank" rel="noopener">dict.has_key(key)</a> 如果键在字典dict里返回true，否则返回false</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-items.html" target="_blank" rel="noopener">dict.items()</a> 以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-keys.html" target="_blank" rel="noopener">dict.keys()</a> 以列表返回一个字典所有的键</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-setdefault.html" target="_blank" rel="noopener">dict.setdefault(key, default=None)</a> 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-update.html" target="_blank" rel="noopener">dict.update(dict2)</a> 把字典dict2的键/值对更新到dict里</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-dictionary-values.html" target="_blank" rel="noopener">dict.values()</a> 以列表返回字典中的所有值</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left"><a href="https://www.runoob.com/python/python-att-dictionary-pop.html" target="_blank" rel="noopener">pop(key[,default])</a> 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td style="text-align:left">16</td><td style="text-align:left"><a href="https://www.runoob.com/python/python-att-dictionary-popitem.html" target="_blank" rel="noopener">popitem()</a> 返回并删除字典中的最后一对键和值。</td></tr></tbody></table></div><h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-常用的元组操作"><a href="#1-常用的元组操作" class="headerlink" title="1.常用的元组操作"></a>1.常用的元组操作</h5><ul><li>访问元组<br>元组可以使用下标索引来访问元组中的值，如下实例:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> )</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"tup1[0]: "</span>, tup1[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"tup2[1:5]: "</span>, tup2[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt;tup1[<span class="number">0</span>]:  physics</span><br><span class="line">tup2[<span class="number">1</span>:<span class="number">5</span>]:  (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><ul><li>修改元组<br>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="number">12</span>, <span class="number">34.56</span>)</span><br><span class="line">tup2 = (<span class="string">'abc'</span>, <span class="string">'xyz'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 以下修改元组元素操作是非法的。</span></span><br><span class="line"><span class="comment"># tup1[0] = 100</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建一个新的元组</span></span><br><span class="line">tup3 = tup1 + tup2</span><br><span class="line">print(tup3)</span><br><span class="line"></span><br><span class="line">&gt;&gt;(<span class="number">12</span>, <span class="number">34.56</span>, <span class="string">'abc'</span>, <span class="string">'xyz'</span>)</span><br></pre></td></tr></table></figure><ul><li>删除元组<br>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"> </span><br><span class="line">print(tup)</span><br><span class="line"><span class="keyword">del</span>(tup)</span><br><span class="line">print( <span class="string">"After deleting tup : "</span>)</span><br><span class="line">print(tup)</span><br></pre></td></tr></table></figure><p>以上实例元组被删除后，输出变量会有异常信息，输出如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">After deleting tup :</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"test.py"</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">print</span> tup</span><br><span class="line">NameError: name <span class="string">'tup'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure></p><h5 id="2-常用字典操作"><a href="#2-常用字典操作" class="headerlink" title="2.常用字典操作"></a>2.常用字典操作</h5><ul><li>访问字典操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">car = &#123;<span class="string">'name'</span>: <span class="string">'byd'</span>, <span class="string">'light'</span>: <span class="number">2</span>, <span class="string">'wheel'</span>: <span class="number">4</span>&#125;</span><br><span class="line">print(car[<span class="string">'name'</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt;byd</span><br></pre></td></tr></table></figure><ul><li>修改字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">car = &#123;<span class="string">'name'</span>: <span class="string">'byd'</span>, <span class="string">'light'</span>: <span class="number">2</span>, <span class="string">'wheel'</span>: <span class="number">4</span>&#125;</span><br><span class="line">car[<span class="string">'name'</span>] = <span class="string">'bmw'</span>        <span class="comment">#修改</span></span><br><span class="line">car[<span class="string">'owner'</span>] = <span class="string">'Metatron'</span>  <span class="comment">#添加</span></span><br><span class="line">print(car[<span class="string">'name'</span>], car[<span class="string">'owner'</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt;bmw Metatron</span><br></pre></td></tr></table></figure><ul><li>删除字典元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">car = &#123;<span class="string">'name'</span>: <span class="string">'byd'</span>, <span class="string">'light'</span>: <span class="number">2</span>, <span class="string">'wheel'</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">del</span> car[<span class="string">'name'</span>]  <span class="comment">#删除键是name的条目</span></span><br><span class="line">print(car)</span><br><span class="line">car.clear() <span class="comment">#清空字典所有条目</span></span><br><span class="line">print(car)</span><br><span class="line"><span class="keyword">del</span> car  <span class="comment">#删除字典</span></span><br><span class="line">print(car)</span><br></pre></td></tr></table></figure><p>输出报错：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"F:/Python/6/eg 6-6.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(car)</span><br><span class="line">NameError: name <span class="string">'car'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">&#123;<span class="string">'light'</span>: <span class="number">2</span>, <span class="string">'wheel'</span>: <span class="number">4</span>&#125;</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>查看某元素是否在字典中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">car = &#123;<span class="string">'name'</span>: <span class="string">'byd'</span>, <span class="string">'light'</span>: <span class="number">2</span>, <span class="string">'wheel'</span>: <span class="number">4</span>&#125;</span><br><span class="line">print(<span class="string">'bmw'</span> <span class="keyword">in</span> car)</span><br><span class="line"></span><br><span class="line">&gt;&gt;false</span><br></pre></td></tr></table></figure></li><li><p><code>dict()</code>从包含键值对的元组中创建字典</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(dict(((<span class="string">'Indian'</span>, <span class="string">'Delhi'</span>), (<span class="string">'Bangladesh'</span>, <span class="string">'Dhaka'</span>))))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&#123;<span class="string">'Indian'</span>: <span class="string">'Delhi'</span>, <span class="string">'Bangladesh'</span>: <span class="string">'Dhaka'</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>遍历字典<code>item()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'Kushal'</span>: <span class="string">'Fedora'</span>, <span class="string">'Jace'</span>: <span class="string">'Mac'</span>, <span class="string">'kart_'</span>: <span class="string">'Debian'</span>, <span class="string">'parthan'</span>: <span class="string">'Ubuntu'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> data.items():</span><br><span class="line">    print(<span class="string">"&#123;&#125; uses &#123;&#125;"</span>.format(x, y))</span><br><span class="line"></span><br><span class="line">&gt;&gt;Kushal uses Fedora</span><br><span class="line">Jace uses Mac</span><br><span class="line">kart_ uses Debian</span><br><span class="line">parthan uses Ubuntu</span><br></pre></td></tr></table></figure><ul><li><code>dict.setdefault(key, default)</code></li></ul><p>许多时候我们需要往字典中的元素添加数据，我们首先要判断这个元素是否存在，不存在则创建一个默认值。如果在循环里执行这个操作，每次迭代都需要判断一次，降低程序性能。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;&#125;</span><br><span class="line">data.setdefault(<span class="string">'names'</span>, []).append(<span class="string">'Ruby'</span>)</span><br><span class="line">data.setdefault(<span class="string">'names'</span>, []).append(<span class="string">'Python'</span>)</span><br><span class="line">data.setdefault(<span class="string">'names'</span>, []).append(<span class="string">'C'</span>)</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line">&gt;&gt; &#123;<span class="string">'names'</span>: [<span class="string">'Ruby'</span>, <span class="string">'Python'</span>, <span class="string">'C'</span>]&#125;</span><br></pre></td></tr></table></figure></p><ul><li><code>dict.get(key, default)</code></li></ul><p>试图索引一个不存在的键将会抛出一个 keyError 错误。我们可以使用 dict.get(key, default) 来索引键，如果键不存在，那么返回指定的 default 值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'byd'</span>, <span class="string">'light'</span>: <span class="number">2</span>, <span class="string">'wheel'</span>: <span class="number">4</span>&#125;</span><br><span class="line">print(data.get(<span class="string">'foo'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt;<span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><code>enumerate()</code></li></ul><p>在遍历列表（或任何序列类型）的同时获得元素索引值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'byd'</span>, <span class="string">'light'</span>: <span class="number">2</span>, <span class="string">'wheel'</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> enumerate(data.items()):</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">&gt;&gt;(<span class="number">0</span>, (<span class="string">'name'</span>, <span class="string">'byd'</span>))</span><br><span class="line">(<span class="number">1</span>, (<span class="string">'light'</span>, <span class="number">2</span>))</span><br><span class="line">(<span class="number">2</span>, (<span class="string">'wheel'</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure></p><ul><li><code>zip()</code></li></ul><p>遍历两个序列类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'Pradeepto'</span>, <span class="string">'Kushal'</span>]</span><br><span class="line">b = [<span class="string">'OpenSUSE'</span>, <span class="string">'Fedora'</span>]</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> zip(a, b):</span><br><span class="line">    print(<span class="string">"&#123;&#125; uses &#123;&#125;"</span>.format(x, y))</span><br><span class="line"></span><br><span class="line">&gt;&gt;Pradeepto uses OpenSUSE</span><br><span class="line">Kushal uses Fedora</span><br></pre></td></tr></table></figure><h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><h5 id="1-students-py"><a href="#1-students-py" class="headerlink" title="1.students.py"></a>1.students.py</h5><p>这是一个判断学生成绩是否达标的程序，要求输入学生数量，以及各个学生物理、数学、历史三科的成绩，如果总成绩小于 120，程序打印 “failed”，否则打印 “passed”。</p><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n = int(input(<span class="string">"Enter the number of students: "</span>))</span><br><span class="line">data = &#123;&#125; <span class="comment"># 用来存储数据的字典变量</span></span><br><span class="line">Subjects = (<span class="string">'Physics'</span>, <span class="string">'Maths'</span>, <span class="string">'History'</span>) <span class="comment"># 所有科目</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">    name = input(<span class="string">'Enter the name of the student &#123;&#125;: '</span>.format(i + <span class="number">1</span>)) <span class="comment"># 获得学生名称</span></span><br><span class="line">    marks = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> Subjects:</span><br><span class="line">        marks.append(int(input(<span class="string">'Enter marks of &#123;&#125;: '</span>.format(x)))) <span class="comment"># 获得每一科的分数</span></span><br><span class="line">    data[name] = marks</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> data.items():</span><br><span class="line">    total =  sum(y)</span><br><span class="line">    print(<span class="string">"&#123;&#125;'s total marks &#123;&#125;"</span>.format(x, total))</span><br><span class="line">    <span class="keyword">if</span> total &lt; <span class="number">120</span>:</span><br><span class="line">        print(x, <span class="string">"failed :("</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(x, <span class="string">"passed :)"</span>)</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Enter the number of students: <span class="number">2</span></span><br><span class="line">Enter the name of the student <span class="number">1</span>: me</span><br><span class="line">Enter marks of Physics: <span class="number">123</span></span><br><span class="line">Enter marks of Maths: <span class="number">12</span></span><br><span class="line">Enter marks of History: <span class="number">31</span></span><br><span class="line">Enter the name of the student <span class="number">2</span>: you</span><br><span class="line">Enter marks of Physics: <span class="number">20</span></span><br><span class="line">Enter marks of Maths: <span class="number">20</span></span><br><span class="line">Enter marks of History: <span class="number">20</span></span><br><span class="line">me<span class="string">'s total marks 166</span></span><br><span class="line"><span class="string">me passed :)</span></span><br><span class="line"><span class="string">you'</span>s total marks <span class="number">60</span></span><br><span class="line">you failed :(</span><br></pre></td></tr></table></figure><ul><li>解释：</li></ul><p><code>name</code>和 <code>marks</code>是变量，<code>name</code>用来存储学生的名称，<code>marks</code> 是个列表，用来存储输入的学生的成绩数据。<code>data</code> 是个字典，字典的键值对中，键指的是 <code>name</code>的值，值指的是 <code>marks</code> 的值。因此会使用 <code>data[name] = marks</code>将学生数据存入到<code>data</code>字典。<br>最后通过<code>for</code>循环遍历字典，<code>x</code>为学生的<code>name</code>，<code>y</code>为学生成绩列表 <code>marks</code>，<code>sum()</code>函数会将传入的列表进行加和。</p><h5 id="2-matrixmul-py"><a href="#2-matrixmul-py" class="headerlink" title="2.matrixmul.py"></a>2.matrixmul.py</h5><p>这个例子里我们计算两个矩阵的 Hadamard 乘积。要求输入矩阵的行/列数（在这里假设我们使用的是 n × n 的矩阵）。</p><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">n = int(input(<span class="string">"Enter the value of n: "</span>))</span><br><span class="line">print(<span class="string">"Enter values for the Matrix A"</span>)</span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    a.append([int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split()])</span><br><span class="line">print(<span class="string">"Enter values for the Matrix B"</span>)</span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    b.append([int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split()])</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    c.append([a[i][j] * b[i][j] <span class="keyword">for</span> j <span class="keyword">in</span> range(n)])</span><br><span class="line">print(<span class="string">"After matrix multiplication"</span>)</span><br><span class="line">print(<span class="string">"-"</span> * <span class="number">7</span> * n)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> c:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> x:</span><br><span class="line">        print(str(y).rjust(<span class="number">5</span>), end=<span class="string">' '</span>)</span><br><span class="line">    print()</span><br><span class="line">print(<span class="string">"-"</span> * <span class="number">7</span> * n)</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Enter the value of n: <span class="number">3</span></span><br><span class="line">Enter values <span class="keyword">for</span> the Matrix A</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">Enter values <span class="keyword">for</span> the Matrix B</span><br><span class="line"><span class="number">9</span> <span class="number">8</span> <span class="number">7</span></span><br><span class="line"><span class="number">6</span> <span class="number">5</span> <span class="number">4</span> </span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line">After matrix multiplication</span><br><span class="line">---------------------</span><br><span class="line">    <span class="number">9</span>    <span class="number">16</span>    <span class="number">21</span> </span><br><span class="line">   <span class="number">24</span>    <span class="number">25</span>    <span class="number">24</span> </span><br><span class="line">   <span class="number">21</span>    <span class="number">16</span>     <span class="number">9</span> </span><br><span class="line">---------------------</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>解释：</li></ul><p>这里我们使用了几次列表推导式。<code>[int(x) for x in input().split()]</code> 首先通过 <code>input()</code> 获得用户输入的字符串，再使用<code>split()</code>分割字符串得到一系列的数字字符串，然后用<code>int()</code> 从每个数字字符串创建对应的整数值。我们也使用了 <code>[a[i][j] * b[i][j] for j in range(n)]</code> 来得到矩阵乘积的每一行数据。</p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;数据结构（data structure）是计算机中存储、组织数据的方式。本实验将深入了解列表。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://ame1314.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python的字符串切片</title>
    <link href="https://ame1314.github.io/2020/03/07/Python%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E7%89%87/"/>
    <id>https://ame1314.github.io/2020/03/07/Python%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E7%89%87/</id>
    <published>2020-03-07T09:36:43.000Z</published>
    <updated>2020-03-07T09:38:03.064Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>本文中将记录如何用python对字符串进行切片</p></div><a id="more"></a><p><a href="https://blog.csdn.net/qq_39448151/article/details/74839613" target="_blank" rel="noopener">https://blog.csdn.net/qq_39448151/article/details/74839613</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文中将记录如何用python对字符串进行切片&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://ame1314.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>5.循环</title>
    <link href="https://ame1314.github.io/2020/03/07/5-%E5%BE%AA%E7%8E%AF/"/>
    <id>https://ame1314.github.io/2020/03/07/5-%E5%BE%AA%E7%8E%AF/</id>
    <published>2020-03-07T07:55:45.000Z</published>
    <updated>2020-03-13T04:20:09.744Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>有些时候我们需要多次执行相同的任务，我们使用一个计数器来检查代码需要执行的次数。这个技术被称为循环。</p></div><a id="more"></a><h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul><li>循环语句</li><li>循环控制</li><li>print() 函数的 end 参数</li><li>列表<ul><li>索引</li><li>切片</li></ul></li><li>元组</li></ul><h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><div id="flowchart-0" class="flow-chart"></div><h5 id="1-循环语句"><a href="#1-循环语句" class="headerlink" title="1.循环语句"></a>1.循环语句</h5><div class="table-container"><table><thead><tr><th>循环类型</th><th>描述</th></tr></thead><tbody><tr><td>while 循环</td><td>在给定的判断条件为 true 时执行循环体，否则退出循环体。</td></tr><tr><td>for 循环</td><td>重复执行语句</td></tr><tr><td>嵌套循环</td><td>你可以在while循环体中嵌套for循环</td></tr></tbody></table></div><ul><li>while循环<br>while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。其基本形式为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件(condition)：</span><br><span class="line">    执行语句(statements)……</span><br></pre></td></tr></table></figure><blockquote><p>在Python中也可以使用<code>while…else</code>进行循环，当循环条件为<code>false</code>时执行<code>else</code>语句块，而当程序进行无线循环时可输入<code>Ctrl+C</code>终止。</p></blockquote><ul><li>for循环<br>for循环可以遍历任何序列的项目，如一个列表或者一个字符串。语法格式为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> iterating_var <span class="keyword">in</span> sequence:</span><br><span class="line">   statements(s)</span><br></pre></td></tr></table></figure><blockquote><p>通常有如下三种形式：</p><ul><li>输出字符串中的每一个字符</li><li>通过序列索引迭代</li><li>循环使用 else 语句</li></ul></blockquote><h5 id="2-循环控制语句"><a href="#2-循环控制语句" class="headerlink" title="2.循环控制语句"></a>2.循环控制语句</h5><div class="table-container"><table><thead><tr><th style="text-align:left">控制语句</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">break 语句</td><td style="text-align:left">在语句块执行过程中终止循环，并且跳出整个循环</td></tr><tr><td style="text-align:left">continue 语句</td><td style="text-align:left">在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。</td></tr><tr><td style="text-align:left">pass 语句</td><td style="text-align:left">pass是空语句，是为了保持程序结构的完整性。</td></tr></tbody></table></div><blockquote><p>break是结束整个循环而continue是结束本次循环继续下次循环。</p></blockquote><h5 id="3-列表"><a href="#3-列表" class="headerlink" title="3.列表"></a>3.列表</h5><p>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。列表的数据项不需要具有相同的类型。创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">list3 = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</span><br></pre></td></tr></table></figure></p><p>3.1常用列表操作:</p><ul><li>访问列表中的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> ]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"list1[0]: "</span>, list1[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"list2[1:5]: "</span>, list2[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt;list1[<span class="number">0</span>]:  physics</span><br><span class="line">  list2[<span class="number">1</span>:<span class="number">5</span>]:  [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><ul><li>更新列表(<code>append()</code>)：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = []          <span class="comment">## 空列表</span></span><br><span class="line">list.append(<span class="string">'Google'</span>)   <span class="comment">## 使用 append() 添加元素</span></span><br><span class="line">list.append(<span class="string">'Runoob'</span>)</span><br><span class="line"><span class="keyword">print</span> (list)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="string">'Google'</span>, <span class="string">'Runoob'</span>]</span><br></pre></td></tr></table></figure><ul><li>替换列表元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br><span class="line">letters[<span class="number">2</span>:<span class="number">5</span>] = [<span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>]</span><br><span class="line">print(letters)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br><span class="line"></span><br><span class="line">letters[<span class="number">2</span>:<span class="number">3</span>]=[]</span><br><span class="line">print(letters)</span><br><span class="line"></span><br><span class="line">&gt;&gt;[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br></pre></td></tr></table></figure><ul><li>删除列表元素(<code>del</code>)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> list1</span><br><span class="line"><span class="keyword">del</span> list1[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"After deleting value at index 2 : "</span>)</span><br><span class="line">print(list1）</span><br><span class="line">      </span><br><span class="line">&gt;&gt; [<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">    After deleting value at index <span class="number">2</span> :</span><br><span class="line">   [<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">2000</span>]</span><br></pre></td></tr></table></figure><ul><li>Python列表截取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L=[<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>]</span><br><span class="line">print(L[<span class="number">2</span>],L[<span class="number">-2</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt;Taobao Runoob</span><br></pre></td></tr></table></figure><p>3.2 列表所涉及的方法</p><div class="table-container"><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">方法</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-list-append.html" target="_blank" rel="noopener">list.append(obj)</a> 在列表末尾添加新的对象</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-list-count.html" target="_blank" rel="noopener">list.count(obj)</a> 统计某个元素在列表中出现的次数</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-list-extend.html" target="_blank" rel="noopener">list.extend(seq)</a> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-list-index.html" target="_blank" rel="noopener">list.index(obj)</a> 从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-list-insert.html" target="_blank" rel="noopener">list.insert(index, obj)</a> 将对象插入列表</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-list-pop.html" target="_blank" rel="noopener">list.pop([index=-1])</a> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-list-remove.html" target="_blank" rel="noopener">list.remove(obj)</a> 移除列表中某个值的第一个匹配项</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-list-reverse.html" target="_blank" rel="noopener">list.reverse()</a> 反向列表中元素</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-list-sort.html" target="_blank" rel="noopener">list.sort(cmp=None, key=None, reverse=False)</a> 对原列表进行排序</td></tr></tbody></table></div><p>3.3 列表脚本操作符</p><div class="table-container"><table><thead><tr><th style="text-align:left">Python 表达式</th><th style="text-align:left">结果</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">len([1, 2, 3])</td><td style="text-align:left">3</td><td style="text-align:left">长度</td></tr><tr><td style="text-align:left">[1, 2, 3] + [4, 5, 6]</td><td style="text-align:left">[1, 2, 3, 4, 5, 6]</td><td style="text-align:left">组合</td></tr><tr><td style="text-align:left">[‘Hi!’] * 4</td><td style="text-align:left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td style="text-align:left">重复</td></tr><tr><td style="text-align:left">3 in [1, 2, 3]</td><td style="text-align:left">True</td><td style="text-align:left">元素是否存在于列表中</td></tr><tr><td style="text-align:left">for x in [1, 2, 3]: print x,</td><td style="text-align:left">1 2 3</td><td style="text-align:left">迭代</td></tr></tbody></table></div><p>3.4 列表有关函数</p><div class="table-container"><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">函数</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-list-cmp.html" target="_blank" rel="noopener">cmp(list1, list2)</a> 比较两个列表的元素</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-list-len.html" target="_blank" rel="noopener">len(list)</a> 列表元素个数</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-list-max.html" target="_blank" rel="noopener">max(list)</a> 返回列表元素最大值</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-list-min.html" target="_blank" rel="noopener">min(list)</a> 返回列表元素最小值</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><a href="https://www.runoob.com/python/att-list-list.html" target="_blank" rel="noopener">list(seq)</a> 将元组转换为列表</td></tr></tbody></table></div><h5 id="4-切片"><a href="#4-切片" class="headerlink" title="4.切片"></a>4.切片</h5><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200307-1583587828918" alt="切片"></p><p>有关切片问题先看一段代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">print(num[<span class="number">1</span>:<span class="number">8</span>:<span class="number">1</span>])  <span class="comment">#越界输出</span></span><br><span class="line">print(num[<span class="number">1</span>:<span class="number">6</span>:<span class="number">2</span>])  <span class="comment">#步长变化输出</span></span><br><span class="line">print(num[<span class="number">-1</span>:<span class="number">-6</span>:<span class="number">-1</span>])  <span class="comment">#逆序输出</span></span><br><span class="line">print(num[<span class="number">-6</span>:<span class="number">-1</span>])     <span class="comment">#正序输出</span></span><br><span class="line">print(num[<span class="number">1</span>:<span class="number">-1</span>])      <span class="comment">#混合输出</span></span><br><span class="line">print(num[<span class="number">1</span>:])        <span class="comment">#索引为1之后的所有元素</span></span><br><span class="line">print(num[:<span class="number">-1</span>])        <span class="comment">#索引为-1之前的所有元素</span></span><br></pre></td></tr></table></figure></p><p>结果为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">[<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure></p><p>如上面的代码与图片，终点是分清n维列表中的第一个元素索引为<code>0</code>，最后一个元素索引为<code>n-1</code>或<code>-1</code>，而对于起点和终点需要记住包括起点而不包括终点。</p><h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-for循环的常用形式"><a href="#1-for循环的常用形式" class="headerlink" title="1.for循环的常用形式"></a>1.for循环的常用形式</h5><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从字符串中提取</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'python'</span>:</span><br><span class="line">    print(<span class="string">"The letter is:"</span>, i)</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> colors:</span><br><span class="line">    print(<span class="string">"The color is:"</span>, color)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过序列索引迭代</span></span><br><span class="line">cups = [<span class="string">'MoreLarge'</span>, <span class="string">'Large'</span>, <span class="string">'Small'</span>]</span><br><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> range(len(cups)):</span><br><span class="line">    print(<span class="string">"The "</span>, count + <span class="number">1</span>, <span class="string">" cup is:"</span>, cups[count])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环用 else 语句</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">20</span>):  <span class="comment"># 迭代 10 到 20 之间的数字</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num):  <span class="comment"># 根据因子迭代</span></span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:  <span class="comment"># 确定第一个因子</span></span><br><span class="line">            j = num / i  <span class="comment"># 计算第二个因子</span></span><br><span class="line">            print(<span class="string">'%d 等于 %d * %d'</span> % (num, i, j))</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># 跳出当前循环</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 循环的 else 部分</span></span><br><span class="line">        print(num, <span class="string">'是一个质数'</span>)</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从字符串中提取</span></span><br><span class="line">The letter <span class="keyword">is</span>: p</span><br><span class="line">The letter <span class="keyword">is</span>: y</span><br><span class="line">The letter <span class="keyword">is</span>: t</span><br><span class="line">The letter <span class="keyword">is</span>: h</span><br><span class="line">The letter <span class="keyword">is</span>: o</span><br><span class="line">The letter <span class="keyword">is</span>: n</span><br><span class="line">The color <span class="keyword">is</span>: red</span><br><span class="line">The color <span class="keyword">is</span>: blue</span><br><span class="line">The color <span class="keyword">is</span>: green</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过序列索引迭代</span></span><br><span class="line">The  <span class="number">1</span>  cup <span class="keyword">is</span>: MoreLarge</span><br><span class="line">The  <span class="number">2</span>  cup <span class="keyword">is</span>: Large</span><br><span class="line">The  <span class="number">3</span>  cup <span class="keyword">is</span>: Small</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环使用 else 语句</span></span><br><span class="line"><span class="number">10</span> 等于 <span class="number">2</span> * <span class="number">5</span></span><br><span class="line"><span class="number">11</span> 是一个质数</span><br><span class="line"><span class="number">12</span> 等于 <span class="number">2</span> * <span class="number">6</span></span><br><span class="line"><span class="number">13</span> 是一个质数</span><br><span class="line"><span class="number">14</span> 等于 <span class="number">2</span> * <span class="number">7</span></span><br><span class="line"><span class="number">15</span> 等于 <span class="number">3</span> * <span class="number">5</span></span><br><span class="line"><span class="number">16</span> 等于 <span class="number">2</span> * <span class="number">8</span></span><br><span class="line"><span class="number">17</span> 是一个质数</span><br><span class="line"><span class="number">18</span> 等于 <span class="number">2</span> * <span class="number">9</span></span><br><span class="line"><span class="number">19</span> 是一个质数</span><br></pre></td></tr></table></figure><h5 id="2-break与continue的使用"><a href="#2-break与continue的使用" class="headerlink" title="2.break与continue的使用"></a>2.break与continue的使用</h5><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"此时的i为偶数,输出i的值至控制台"</span>, end=<span class="string">" "</span>)</span><br><span class="line">        print(<span class="string">"i="</span>, i)</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">5</span>:</span><br><span class="line">        print(<span class="string">"此时i为5结束整个循环"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"此时i为奇数且不等于5，直接进行下一次循环"</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">        print(<span class="string">"i="</span>, i)</span><br><span class="line">print(<span class="string">"循环已结束，此时i="</span>, i)</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">此时i为奇数且不等于<span class="number">5</span>，直接进行下一次循环</span><br><span class="line">此时的i为偶数,输出i的值至控制台 i= <span class="number">2</span></span><br><span class="line">此时i为奇数且不等于<span class="number">5</span>，直接进行下一次循环</span><br><span class="line">此时的i为偶数,输出i的值至控制台 i= <span class="number">4</span></span><br><span class="line">此时i为<span class="number">5</span>结束整个循环</span><br><span class="line">循环已结束，此时i= <span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>不难看出，<code>continue</code>后的<code>print(&quot;i=&quot;, i)</code>并没有执行，而当执行<code>break</code>时程序直接结束了本层循环</p></blockquote><h5 id="3-双层循环中的break"><a href="#3-双层循环中的break" class="headerlink" title="3.双层循环中的break"></a>3.双层循环中的break</h5><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"第一次循环语句共执行了："</span>, n, <span class="string">"次"</span>)</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一次循环语句共执行了： <span class="number">1</span> 次</span><br><span class="line">第一次循环语句共执行了： <span class="number">2</span> 次</span><br></pre></td></tr></table></figure><blockquote><p>break只会结束掉本层循环</p></blockquote><h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><div class="note info no-icon"><h5 id="1-去除字符串首尾的空格"><a href="#1-去除字符串首尾的空格" class="headerlink" title="1.去除字符串首尾的空格"></a>1.去除字符串首尾的空格</h5></div><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str_1 = str(input(<span class="string">"Please input a string:"</span>))</span><br><span class="line"><span class="keyword">while</span> str_1[:<span class="number">1</span>] == <span class="string">' '</span>:</span><br><span class="line">    str_1 = str_1[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">while</span> str_1[<span class="number">-1</span>:] == <span class="string">' '</span>:</span><br><span class="line">    str_1 = str_1[:<span class="number">-1</span>]</span><br><span class="line">print(str_1)</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please input a string:    hello world   </span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></p><h5 id="2-分别使用while、for计算如下问题："><a href="#2-分别使用while、for计算如下问题：" class="headerlink" title="2.分别使用while、for计算如下问题："></a>2.分别使用while、for计算如下问题：</h5><div class="note info no-icon"><p>计算幂级数：</p><script type="math/tex; mode=display">e^{x}=1+x+\frac{x^{2}}{2!}+\frac{x^{3}}{3!}+…+\frac{x^{n}}{n!}(0<n<1)</script><p>用户进行输入x,当满足：</p><script type="math/tex; mode=display">\frac{x^{n}}{n!}<0.00001</script><p>时，停止累加且输出多项式之和以及n的值。</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#for</span></span><br><span class="line">x = float(input(<span class="string">"Please input an integer:"</span>))</span><br><span class="line">result = <span class="number">1.0</span></span><br><span class="line">n = log = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    log *= x / n</span><br><span class="line">    result += log</span><br><span class="line">    <span class="keyword">if</span> log &lt; <span class="number">0.0001</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">"No of Times= &#123;&#125; and Sum= &#123;&#125;"</span>.format(n+<span class="number">1</span>, result))</span><br><span class="line"></span><br><span class="line"><span class="comment">#while</span></span><br><span class="line">X = float(input(<span class="string">"Enter the value of x: "</span>))</span><br><span class="line">N = term = num = <span class="number">1</span></span><br><span class="line">Result = <span class="number">1.0</span></span><br><span class="line"><span class="keyword">while</span> N &lt;= <span class="number">100</span>:</span><br><span class="line">    term *= X / N</span><br><span class="line">    Result += term</span><br><span class="line">    N += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> term &lt; <span class="number">0.0001</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">"No of Times= &#123;&#125; and Sum= &#123;&#125;"</span>.format(N, Result))</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Please input an integer:<span class="number">0.5</span></span><br><span class="line">No of Times= <span class="number">7</span> <span class="keyword">and</span> Sum= <span class="number">1.6487196180555554</span></span><br><span class="line">Enter the value of x: <span class="number">0.5</span></span><br><span class="line">No of Times= <span class="number">7</span> <span class="keyword">and</span> Sum= <span class="number">1.6487196180555554</span></span><br></pre></td></tr></table></figure><h5 id="3-乘法表"><a href="#3-乘法表" class="headerlink" title="3.乘法表"></a>3.乘法表</h5><div class="note info no-icon"><p>分别使用for、while打印十以内的乘法表</p></div><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        print(<span class="string">"&#123;:5d&#125;"</span>.format(i*j), end=<span class="string">" "</span>)</span><br><span class="line">    print()</span><br><span class="line">print(<span class="string">"*"</span>*<span class="number">65</span>)</span><br><span class="line"><span class="comment"># while</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">11</span>:</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt;= <span class="number">10</span>:</span><br><span class="line">        print(<span class="string">"&#123;:5d&#125;"</span>.format(i * n), end=<span class="string">' '</span>)</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    print()</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span>     <span class="number">9</span>    <span class="number">10</span> </span><br><span class="line">    <span class="number">2</span>     <span class="number">4</span>     <span class="number">6</span>     <span class="number">8</span>    <span class="number">10</span>    <span class="number">12</span>    <span class="number">14</span>    <span class="number">16</span>    <span class="number">18</span>    <span class="number">20</span> </span><br><span class="line">    <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>    <span class="number">12</span>    <span class="number">15</span>    <span class="number">18</span>    <span class="number">21</span>    <span class="number">24</span>    <span class="number">27</span>    <span class="number">30</span> </span><br><span class="line">    <span class="number">4</span>     <span class="number">8</span>    <span class="number">12</span>    <span class="number">16</span>    <span class="number">20</span>    <span class="number">24</span>    <span class="number">28</span>    <span class="number">32</span>    <span class="number">36</span>    <span class="number">40</span> </span><br><span class="line">    <span class="number">5</span>    <span class="number">10</span>    <span class="number">15</span>    <span class="number">20</span>    <span class="number">25</span>    <span class="number">30</span>    <span class="number">35</span>    <span class="number">40</span>    <span class="number">45</span>    <span class="number">50</span> </span><br><span class="line">    <span class="number">6</span>    <span class="number">12</span>    <span class="number">18</span>    <span class="number">24</span>    <span class="number">30</span>    <span class="number">36</span>    <span class="number">42</span>    <span class="number">48</span>    <span class="number">54</span>    <span class="number">60</span> </span><br><span class="line">    <span class="number">7</span>    <span class="number">14</span>    <span class="number">21</span>    <span class="number">28</span>    <span class="number">35</span>    <span class="number">42</span>    <span class="number">49</span>    <span class="number">56</span>    <span class="number">63</span>    <span class="number">70</span> </span><br><span class="line">    <span class="number">8</span>    <span class="number">16</span>    <span class="number">24</span>    <span class="number">32</span>    <span class="number">40</span>    <span class="number">48</span>    <span class="number">56</span>    <span class="number">64</span>    <span class="number">72</span>    <span class="number">80</span> </span><br><span class="line">    <span class="number">9</span>    <span class="number">18</span>    <span class="number">27</span>    <span class="number">36</span>    <span class="number">45</span>    <span class="number">54</span>    <span class="number">63</span>    <span class="number">72</span>    <span class="number">81</span>    <span class="number">90</span> </span><br><span class="line">   <span class="number">10</span>    <span class="number">20</span>    <span class="number">30</span>    <span class="number">40</span>    <span class="number">50</span>    <span class="number">60</span>    <span class="number">70</span>    <span class="number">80</span>    <span class="number">90</span>   <span class="number">100</span> </span><br><span class="line">*****************************************************************</span><br><span class="line">    <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span>     <span class="number">5</span>     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span>     <span class="number">9</span>    <span class="number">10</span> </span><br><span class="line">    <span class="number">2</span>     <span class="number">4</span>     <span class="number">6</span>     <span class="number">8</span>    <span class="number">10</span>    <span class="number">12</span>    <span class="number">14</span>    <span class="number">16</span>    <span class="number">18</span>    <span class="number">20</span> </span><br><span class="line">    <span class="number">3</span>     <span class="number">6</span>     <span class="number">9</span>    <span class="number">12</span>    <span class="number">15</span>    <span class="number">18</span>    <span class="number">21</span>    <span class="number">24</span>    <span class="number">27</span>    <span class="number">30</span> </span><br><span class="line">    <span class="number">4</span>     <span class="number">8</span>    <span class="number">12</span>    <span class="number">16</span>    <span class="number">20</span>    <span class="number">24</span>    <span class="number">28</span>    <span class="number">32</span>    <span class="number">36</span>    <span class="number">40</span> </span><br><span class="line">    <span class="number">5</span>    <span class="number">10</span>    <span class="number">15</span>    <span class="number">20</span>    <span class="number">25</span>    <span class="number">30</span>    <span class="number">35</span>    <span class="number">40</span>    <span class="number">45</span>    <span class="number">50</span> </span><br><span class="line">    <span class="number">6</span>    <span class="number">12</span>    <span class="number">18</span>    <span class="number">24</span>    <span class="number">30</span>    <span class="number">36</span>    <span class="number">42</span>    <span class="number">48</span>    <span class="number">54</span>    <span class="number">60</span> </span><br><span class="line">    <span class="number">7</span>    <span class="number">14</span>    <span class="number">21</span>    <span class="number">28</span>    <span class="number">35</span>    <span class="number">42</span>    <span class="number">49</span>    <span class="number">56</span>    <span class="number">63</span>    <span class="number">70</span> </span><br><span class="line">    <span class="number">8</span>    <span class="number">16</span>    <span class="number">24</span>    <span class="number">32</span>    <span class="number">40</span>    <span class="number">48</span>    <span class="number">56</span>    <span class="number">64</span>    <span class="number">72</span>    <span class="number">80</span> </span><br><span class="line">    <span class="number">9</span>    <span class="number">18</span>    <span class="number">27</span>    <span class="number">36</span>    <span class="number">45</span>    <span class="number">54</span>    <span class="number">63</span>    <span class="number">72</span>    <span class="number">81</span>    <span class="number">90</span> </span><br><span class="line">   <span class="number">10</span>    <span class="number">20</span>    <span class="number">30</span>    <span class="number">40</span>    <span class="number">50</span>    <span class="number">60</span>    <span class="number">70</span>    <span class="number">80</span>    <span class="number">90</span>   <span class="number">100</span></span><br></pre></td></tr></table></figure><h4 id="4-斐波那契（Fibonacci）数列"><a href="#4-斐波那契（Fibonacci）数列" class="headerlink" title="4.斐波那契（Fibonacci）数列"></a>4.斐波那契（Fibonacci）数列</h4><div class="note info no-icon"><p>输入一个整数n,接下来输出斐波那契亚数列的前n项。<br><strong>注：斐波那契亚数列前两项都为1，第三项往后均为该项前两项之和。</strong></p></div><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Num_1 = int(input(<span class="string">"请输入一个整数:"</span>))</span><br><span class="line">a = b = <span class="number">1</span></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> Num_1 &lt; <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(Num_1):</span><br><span class="line">        print(<span class="string">"斐波那契亚数列第"</span>, j+<span class="number">1</span>, <span class="string">"项是:"</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> Num_1 &gt;= <span class="number">3</span> <span class="keyword">and</span> c &lt; <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">"斐波那契亚数列第"</span>, c, <span class="string">"项是:"</span>, <span class="number">1</span>)</span><br><span class="line">    c += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(Num_1 - <span class="number">2</span>):</span><br><span class="line">    a, b = b, a + b</span><br><span class="line">    print(<span class="string">"斐波那契亚数列第"</span>, i + <span class="number">3</span>, <span class="string">"项是:"</span>, b)</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">请输入一个整数:<span class="number">10</span></span><br><span class="line">斐波那契亚数列第 <span class="number">1</span> 项是: <span class="number">1</span></span><br><span class="line">斐波那契亚数列第 <span class="number">2</span> 项是: <span class="number">1</span></span><br><span class="line">斐波那契亚数列第 <span class="number">3</span> 项是: <span class="number">2</span></span><br><span class="line">斐波那契亚数列第 <span class="number">4</span> 项是: <span class="number">3</span></span><br><span class="line">斐波那契亚数列第 <span class="number">5</span> 项是: <span class="number">5</span></span><br><span class="line">斐波那契亚数列第 <span class="number">6</span> 项是: <span class="number">8</span></span><br><span class="line">斐波那契亚数列第 <span class="number">7</span> 项是: <span class="number">13</span></span><br><span class="line">斐波那契亚数列第 <span class="number">8</span> 项是: <span class="number">21</span></span><br><span class="line">斐波那契亚数列第 <span class="number">9</span> 项是: <span class="number">34</span></span><br><span class="line">斐波那契亚数列第 <span class="number">10</span> 项是: <span class="number">55</span></span><br></pre></td></tr></table></figure><h4 id="5-棍子游戏"><a href="#5-棍子游戏" class="headerlink" title="5.棍子游戏"></a>5.棍子游戏</h4><div class="note info no-icon"><p>这是一个非常简单的游戏。这里有 21 根棍子，首先用户选 1 到 4 根棍子，然后电脑选 1到 4 根棍子。谁选到最后一根棍子谁就输。判断一下用户有赢的机会吗？如果没有的话，如何修改游戏规则可以使用户有赢的机会呢？特别说明：用户和电脑一次选的棍子总数只能是5。</p></div><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sticks = <span class="number">21</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"There are 21 sticks, you can take 1-4 number of sticks at a time."</span>)</span><br><span class="line">print(<span class="string">"Whoever will take the last stick will loose"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">"Sticks left: "</span> , sticks)</span><br><span class="line">    <span class="keyword">if</span> sticks == <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">"You took the last stick, you loose"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    sticks_taken = int(input(<span class="string">"Take sticks(1-4):"</span>))</span><br><span class="line">    <span class="keyword">if</span> sticks_taken &gt;= <span class="number">5</span> <span class="keyword">or</span> sticks_taken &lt;= <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"Wrong choice"</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(<span class="string">"Computer took: "</span> , (<span class="number">5</span> - sticks_taken) , <span class="string">"\n"</span>)</span><br><span class="line">    sticks -= <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li>分析：<br>本题目中在题目中的条件下，先手的人必输，因为后手的人只需凑够（21-1）的因数5即可，最后1根一定是先手的人拿到。<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始语句in=>inputoutput: 输入值e=>end: 下一程序块op=>operation: 条件代码cond=>condition: 条件st->in->condcond(true)->opcond(false)->eop->in</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;有些时候我们需要多次执行相同的任务，我们使用一个计数器来检查代码需要执行的次数。这个技术被称为循环。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://ame1314.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>在HEXO中部署流程图以及常用的流程图语法</title>
    <link href="https://ame1314.github.io/2020/03/07/%E5%9C%A8HEXO%E4%B8%AD%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B%E5%9B%BE%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE%E8%AF%AD%E6%B3%95/"/>
    <id>https://ame1314.github.io/2020/03/07/%E5%9C%A8HEXO%E4%B8%AD%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B%E5%9B%BE%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE%E8%AF%AD%E6%B3%95/</id>
    <published>2020-03-07T03:55:32.000Z</published>
    <updated>2020-03-13T04:20:00.259Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>本文中将给出<code>mermaid</code>和<code>flowchart</code>在hexo上的配置以及基础语法<br>插件地址：<a href="https://github.com/mermaid-js/mermaid" target="_blank" rel="noopener">mermaid</a><br>参考文章：<br><a href="https://blog.csdn.net/qq_36347375/article/details/90478335" target="_blank" rel="noopener">Hexo引入Mermaid流程图和MathJax数学公式</a><br><a href="https://yelog.org/2019/11/12/3-hexo-support-mermaid/" target="_blank" rel="noopener">hexo支持mermaid图表</a><br><a href="https://blog.csdn.net/wzh0709zml/article/details/103310405" target="_blank" rel="noopener">https://blog.csdn.net/wzh0709zml/article/details/103310405</a><br>官方使用文档：<a href="http://mermaid-js.github.io/mermaid/#/flowchart" target="_blank" rel="noopener">使用文档</a></p></div><a id="more"></a><pre class="mermaid">graph TDA[Hard] -->|Text| B(Round)B --> C{Decision}C -->|One| D[Result 1]C -->|Two| E[Result 2]</pre><pre class="mermaid">pie    title Key elements in Product X    "Calcium" : 42.96    "Potassium" : 50.05    "Magnesium" : 10.01    "Iron" :  5</pre><pre class="mermaid">ganttsection SectionCompleted :done,    des1, 2014-01-06,2014-01-08Active        :active,  des2, 2014-01-07, 3dParallel 1   :         des3, after des1, 1dParallel 2   :         des4, after des1, 1dParallel 3   :         des5, after des3, 1dParallel 4   :         des6, after des4, 1d</pre><pre class="mermaid">graph LR    A-->B    B-->C    C-->D    D-->E    E-->F    F-->M    M-->AD    AD-->Q    Q-->T    T-->R    R-->S    S-->Z</pre><pre class="mermaid">stateDiagram[*] --> StillStill --> [*]Still --> MovingMoving --> StillMoving --> CrashCrash --> [*]</pre><pre class="mermaid">pie"Dogs" : 386"Cats" : 85"Rats" : 15</pre>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文中将给出&lt;code&gt;mermaid&lt;/code&gt;和&lt;code&gt;flowchart&lt;/code&gt;在hexo上的配置以及基础语法&lt;br&gt;插件地址：&lt;a href=&quot;https://github.com/mermaid-js/mermaid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mermaid&lt;/a&gt;&lt;br&gt;参考文章：&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/qq_36347375/article/details/90478335&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo引入Mermaid流程图和MathJax数学公式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://yelog.org/2019/11/12/3-hexo-support-mermaid/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo支持mermaid图表&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/wzh0709zml/article/details/103310405&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/wzh0709zml/article/details/103310405&lt;/a&gt;&lt;br&gt;官方使用文档：&lt;a href=&quot;http://mermaid-js.github.io/mermaid/#/flowchart&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用文档&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="博客" scheme="https://ame1314.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="HEXO" scheme="https://ame1314.github.io/tags/HEXO/"/>
    
      <category term="Markdown" scheme="https://ame1314.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>4.控制流if-else</title>
    <link href="https://ame1314.github.io/2020/03/06/4-%E6%8E%A7%E5%88%B6%E6%B5%81if-else/"/>
    <id>https://ame1314.github.io/2020/03/06/4-%E6%8E%A7%E5%88%B6%E6%B5%81if-else/</id>
    <published>2020-03-06T11:16:26.000Z</published>
    <updated>2020-03-07T08:48:54.631Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>通过 <code>if-else</code> 语句来做决定程序运行的流程</p></div><a id="more"></a><h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul><li>if 语句</li><li>else 语句</li><li>真值检测</li></ul><h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><div id="flowchart-0" class="flow-chart"></div><h5 id="1-if-elif-else基本语法"><a href="#1-if-elif-else基本语法" class="headerlink" title="1.if-elif-else基本语法"></a>1.<code>if-elif-else</code>基本语法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">   执行语句<span class="number">1</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">2</span>:</span><br><span class="line">     执行语句<span class="number">2</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">3</span>:</span><br><span class="line">     执行语句<span class="number">3</span>……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     执行语句<span class="number">4</span>……</span><br></pre></td></tr></table></figure><h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-示例程序"><a href="#1-示例程序" class="headerlink" title="1.示例程序"></a>1.示例程序</h5><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = int(input(<span class="string">"Please input an integer:"</span>))</span><br><span class="line">b = int(input(<span class="string">"Please input an integer:"</span>))</span><br><span class="line">c = int(input(<span class="string">"Please input an integer:"</span>))</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line">    print(<span class="string">"a is true"</span>)</span><br><span class="line"><span class="keyword">elif</span> b:</span><br><span class="line">    print(<span class="string">"b is true"</span>)</span><br><span class="line"><span class="keyword">elif</span> c:</span><br><span class="line">    print(<span class="string">"c is true"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"All false"</span>)</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><div class="table-container"><table><thead><tr><th>a</th><th>b</th><th>c</th><th>print</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td><strong>all false</strong></td></tr><tr><td>0</td><td>0</td><td>1</td><td><strong>c is ture</strong></td></tr><tr><td>0</td><td>1</td><td>0</td><td><strong>b is true</strong></td></tr><tr><td>0</td><td>1</td><td>1</td><td><strong>b is true</strong></td></tr><tr><td>1</td><td>0</td><td>0</td><td><strong>a is true</strong></td></tr><tr><td>1</td><td>0</td><td>1</td><td><strong>a is true</strong></td></tr><tr><td>1</td><td>1</td><td>0</td><td><strong>a is true</strong></td></tr><tr><td>1</td><td>1</td><td>1</td><td><strong>a is true</strong></td></tr></tbody></table></div><blockquote><p>可以看出，在控制流<code>if-else</code>中每块语句都是独立的，按照代码顺序执行，出现<code>true</code>程序块结束，出现<code>false</code>则继续进行下一条语句，如果一直是<code>false</code>到程序块末尾之后执行下一个程序块。（不为零的任何值都为真）</p></blockquote><h5 id="2-真值检测"><a href="#2-真值检测" class="headerlink" title="2.真值检测"></a>2.真值检测</h5><p>通常我们使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><br>而无需使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x == <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><h5 id="1-员工工资问题"><a href="#1-员工工资问题" class="headerlink" title="1.员工工资问题"></a>1.员工工资问题</h5><div class="note info no-icon"><p>一企业进行年终奖发放，员工底薪5000元，员工年贡献利润在10000到20000之间的抽成10%，贡献利润在20000以上的抽成20%，其余情况不抽成，你需要输入员工利润X，程序计算应发年终奖并输出。（结果精确到分）</p></div><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X = float(input(<span class="string">"Please input the profit:"</span>))</span><br><span class="line"><span class="keyword">if</span> X &gt; <span class="number">20000</span>:</span><br><span class="line">    print(<span class="string">"The awards is:"</span>, <span class="string">"&#123;:.2f&#125;"</span>.format(<span class="number">5000</span> + X * <span class="number">0.2</span>))</span><br><span class="line"><span class="keyword">elif</span> X &lt; <span class="number">1000</span>:</span><br><span class="line">    print(<span class="string">"The awards is:"</span>, <span class="string">"&#123;:.2f&#125;"</span>.format(<span class="number">5000</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"The awards is:"</span>, <span class="string">"&#123;:.2f&#125;"</span>.format(<span class="number">5000</span> + X * <span class="number">0.1</span>))</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Please input the profit:<span class="number">100000</span></span><br><span class="line">The awards <span class="keyword">is</span>: <span class="number">25000.00</span></span><br><span class="line"></span><br><span class="line">Please input the profit:<span class="number">12000</span></span><br><span class="line">The awards <span class="keyword">is</span>: <span class="number">6200.00</span></span><br><span class="line"></span><br><span class="line">Please input the profit:<span class="number">200</span></span><br><span class="line">The awards <span class="keyword">is</span>: <span class="number">5000.00</span></span><br></pre></td></tr></table></figure><p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始语句e=>end: 下一程序块op=>operation: 条件代码cond=>condition: 条件st->condcond(true)->opcond(false)->eop->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;通过 &lt;code&gt;if-else&lt;/code&gt; 语句来做决定程序运行的流程&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://ame1314.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python中Math模块常用函数</title>
    <link href="https://ame1314.github.io/2020/03/06/Python%E4%B8%ADMath%E6%A8%A1%E5%9D%97%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>https://ame1314.github.io/2020/03/06/Python%E4%B8%ADMath%E6%A8%A1%E5%9D%97%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</id>
    <published>2020-03-06T10:09:30.000Z</published>
    <updated>2020-03-06T10:12:36.073Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>Python中Math模块的函数使用</p><p>来源：<a href="http://shouce.jb51.net/python3.8/library/math.html" target="_blank" rel="noopener">http://shouce.jb51.net/python3.8/library/math.html</a></p></div><a id="more"></a><div class="table-container"><table><thead><tr><th>函数名</th><th>函数内容</th></tr></thead><tbody><tr><td>math.ceil(x)</td><td>返回 x 的上限，即大于或者等于 x 的最小整数</td></tr><tr><td>math.comb(n, k)</td><td>返回不重复且无顺序地从 n 项中选择 k 项的方式总数</td></tr><tr><td>math.copysign(x, y)</td><td>返回一个基于 x 的绝对值和 y 的符号的浮点数</td></tr><tr><td>math.fabs(x)</td><td>返回 x 的绝对值</td></tr><tr><td>math.factorial(x)</td><td>以一个整数返回 x 的阶乘</td></tr><tr><td>math.floor(x)</td><td>返回 x 的向下取整，小于或等于 x 的最大整数</td></tr><tr><td>math.gcd(a, b)</td><td>返回整数 a 和 b 的最大公约数</td></tr><tr><td>math.isfinite(x)</td><td>如果 x 既不是无穷大也不是NaN，则返回 True ，否则返回 False</td></tr><tr><td>math.isinf(x)</td><td>如果 x 是正或负无穷大，则返回 True ，否则返回 False</td></tr><tr><td>math.isnan(x)</td><td>如果 x 是 NaN（不是数字），则返回 True ，否则返回 False</td></tr><tr><td>math.isqrt(n)</td><td>返回非负整数 n 的整数平方根</td></tr><tr><td>math.modf(x)</td><td>返回 x 的小数和整数部分，以数组的形式储存</td></tr><tr><td>math.perm(n, k)</td><td>返回不重复且无顺序地从 n 项中选择 k 项的方式总数</td></tr><tr><td>math.prod(iterable, *, start=1)</td><td>计算输入的 iterable 中所有元素的积， 积的默认 start 值为 1</td></tr><tr><td>math.exp(x)</td><td>返回 e 次 x 幂</td></tr><tr><td>math.expm1(x)</td><td>返回 e 的 x 次幂，减1</td></tr><tr><td>math.log(x[, base])</td><td>使用一个参数，返回 x 的自然对数（底为 e ） ，使用两个参数，返回给定的 base 的对数 x ，计算为 log(x)/log(base)</td></tr><tr><td>math.log1p(x)</td><td>返回 1+x (base e) 的自然对数</td></tr><tr><td>math.log2(x)</td><td>返回 x 以2为底的对数，这通常比 log(x, 2) 更准确</td></tr><tr><td>math.pow(x, y)</td><td>返回 x 的 y 次幂</td></tr><tr><td>math.sqrt(x)</td><td>返回 x 的平方根</td></tr><tr><td>math.acos(x)</td><td>以弧度为单位返回 x 的反余弦值</td></tr><tr><td>math.asin(x)</td><td>以弧度为单位返回 x 的反正弦值</td></tr><tr><td>math.atan(x)</td><td>以弧度为单位返回 x 的反正切值</td></tr><tr><td>math.atan2(y, x)</td><td>以弧度为单位返回 atan(y / x)</td></tr><tr><td>math.cos(x)</td><td>返回 x 弧度的余弦值</td></tr><tr><td>math.dist(p, q)</td><td>返回 p 与 q 两点之间的欧几里得距离，以一个坐标序列（或可迭代对象）的形式给出。 两个点必须具有相同的维度</td></tr><tr><td>math.sin(x)</td><td>返回 x 弧度的正弦值</td></tr><tr><td>math.tan(x)</td><td>返回 x 弧度的正切值</td></tr><tr><td>math.degrees(x)</td><td>将角度 x 从弧度转换为度数</td></tr><tr><td>math.radians(x)</td><td>将角度 x 从度数转换为弧度</td></tr><tr><td>math.acosh(x)</td><td>返回 x 的反双曲余弦值</td></tr><tr><td>math.asinh(x)</td><td>返回 x 的反双曲正弦值</td></tr><tr><td>math.atanh(x)</td><td>返回 x 的反双曲正切值</td></tr><tr><td>math.cosh(x)</td><td>返回 x 的双曲余弦值</td></tr><tr><td>math.sinh(x)</td><td>返回 x 的双曲正弦值</td></tr><tr><td>math.tanh(x)</td><td>返回 x 的双曲正切值</td></tr><tr><td>math.gamma(x)</td><td>返回 x 处的 伽马函数 值。</td></tr><tr><td>math.lgamma(x)</td><td>返回Gamma函数在 x 绝对值的自然对数。</td></tr></tbody></table></div><h2 id="常数"><a href="#常数" class="headerlink" title="常数"></a>常数</h2><div class="table-container"><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>math.pi</td><td>数学常数 π = 3.141592…，精确到可用精度。</td></tr><tr><td>math.e</td><td>数学常数 e = 2.718281…，精确到可用精度。</td></tr><tr><td>math.tau</td><td>数学常数 τ = 6.283185…，精确到可用精度。Tau 是一个圆周常数，等于 2π，圆的周长与半径之比。</td></tr></tbody></table></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><div class="table-container"><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>math.inf</td><td>浮点正无穷大。</td></tr><tr><td>math.nan</td><td>浮点“非数字”（NaN）值。</td></tr></tbody></table></div><p>来源：<a href="http://shouce.jb51.net/python3.8/library/math.html" target="_blank" rel="noopener">http://shouce.jb51.net/python3.8/library/math.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;Python中Math模块的函数使用&lt;/p&gt;
&lt;p&gt;来源：&lt;a href=&quot;http://shouce.jb51.net/python3.8/library/math.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://shouce.jb51.net/python3.8/library/math.html&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://ame1314.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>博客中Latex的使用</title>
    <link href="https://ame1314.github.io/2020/03/06/%E5%8D%9A%E5%AE%A2%E4%B8%ADLatex%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://ame1314.github.io/2020/03/06/%E5%8D%9A%E5%AE%A2%E4%B8%ADLatex%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-06T08:17:31.000Z</published>
    <updated>2020-03-06T08:20:59.158Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>本文内容为：如何在Hexo中渲染公式、Latex基本语法</p></div><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文内容为：如何在Hexo中渲染公式、Latex基本语法&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="博客" scheme="https://ame1314.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://ame1314.github.io/tags/Hexo/"/>
    
      <category term="Latex" scheme="https://ame1314.github.io/tags/Latex/"/>
    
  </entry>
  
  <entry>
    <title>3.运算符和表达式</title>
    <link href="https://ame1314.github.io/2020/02/29/3-%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://ame1314.github.io/2020/02/29/3-%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-02-29T13:13:46.000Z</published>
    <updated>2020-03-06T11:05:08.119Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>本节实验中将学习运算符和表达式的基本用法。</p></div><a id="more"></a><h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul><li>关系/逻辑运算</li><li>表达式</li><li>类型转换</li></ul><h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><h5 id="1-算术运算"><a href="#1-算术运算" class="headerlink" title="1.算术运算"></a>1.算术运算</h5><ul><li><p>算术运算符包括<code>+</code>（加）,<code>-</code>（减）,<code>*</code>（乘）,<code>/</code>（除）,<code>%</code>（取余）,<code>**</code>（求幂）,<code>//</code>（向下取整）</p></li><li><p>例如：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">2</span>, <span class="number">9</span></span><br><span class="line">print(<span class="string">"a + b ="</span>, a + b)</span><br><span class="line">print(<span class="string">"a - b ="</span>, a - b)</span><br><span class="line">print(<span class="string">"a * b ="</span>, a * b)</span><br><span class="line">print(<span class="string">"b / a ="</span>, b / a)</span><br><span class="line">print(<span class="string">"b % a ="</span>, b % a)</span><br><span class="line">print(<span class="string">"b ** a ="</span>, b ** a)</span><br><span class="line">print(<span class="string">"b // a ="</span>, b // a)</span><br><span class="line">print(<span class="string">"-b // a ="</span>, -b // a)</span><br></pre></td></tr></table></figure><ul><li>结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a + b = <span class="number">11</span></span><br><span class="line">a - b = <span class="number">-7</span></span><br><span class="line">a * b = <span class="number">18</span></span><br><span class="line">b / a = <span class="number">4.5</span></span><br><span class="line">b % a = <span class="number">1</span></span><br><span class="line">b ** a = <span class="number">81</span></span><br><span class="line">b // a = <span class="number">4</span></span><br><span class="line">-b // a = <span class="number">-5</span></span><br></pre></td></tr></table></figure><ul><li>有关解释如下表：</li></ul><div class="table-container"><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><strong>求幂</strong></td><td><code>b**a</code>即求<code>b</code>的<code>a</code>次方即<code>9</code>的<code>2</code>次方为81</td></tr><tr><td><strong>取余</strong></td><td>整除之后得到的余数，例如<code>9/2=4···1</code>则取余的结果即为1</td></tr><tr><td><strong>向下取整</strong></td><td>即选取比进行除法运算得到的数字小且最接近该数字的整数，代码中<code>9/2=4.5</code>因此选择4，而<code>-9/2=-4.5</code>因此选择-5</td></tr></tbody></table></div><h5 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2.比较运算符"></a>2.比较运算符</h5><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left"><code>==</code></td><td style="text-align:left">等于 - 比较对象是否相等</td><td style="text-align:left">(a == b) 返回 False。</td></tr><tr><td style="text-align:left"><code>!=</code></td><td style="text-align:left">不等于 - 比较两个对象是否不相等</td><td style="text-align:left">(a != b) 返回 true.</td></tr><tr><td style="text-align:left"><code>&gt;</code></td><td style="text-align:left">大于 - 返回x是否大于y</td><td style="text-align:left">(a &gt; b) 返回 False。</td></tr><tr><td style="text-align:left"><code>&lt;</code></td><td style="text-align:left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</td><td style="text-align:left">(a &lt; b) 返回 true。</td></tr><tr><td style="text-align:left"><code>&gt;=</code></td><td style="text-align:left">大于等于 - 返回x是否大于等于y。</td><td style="text-align:left">(a &gt;= b) 返回 False。</td></tr><tr><td style="text-align:left"><code>&lt;=</code></td><td style="text-align:left">小于等于 - 返回x是否小于等于y。</td><td style="text-align:left">(a &lt;= b) 返回 true。</td></tr></tbody></table></div><h5 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3.赋值运算符"></a>3.赋值运算符</h5><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left"><code>=</code></td><td style="text-align:left">简单的赋值运算符</td><td style="text-align:left">c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td style="text-align:left"><code>+=</code></td><td style="text-align:left">加法赋值运算符</td><td style="text-align:left">c += a 等效于 c = c + a</td></tr><tr><td style="text-align:left"><code>-=</code></td><td style="text-align:left">减法赋值运算符</td><td style="text-align:left">c -= a 等效于 c = c - a</td></tr><tr><td style="text-align:left"><code>*=</code></td><td style="text-align:left">乘法赋值运算符</td><td style="text-align:left">c <em>= a 等效于 c = c </em> a</td></tr><tr><td style="text-align:left"><code>/=</code></td><td style="text-align:left">除法赋值运算符</td><td style="text-align:left">c /= a 等效于 c = c / a</td></tr><tr><td style="text-align:left"><code>%=</code></td><td style="text-align:left">取模赋值运算符</td><td style="text-align:left">c %= a 等效于 c = c % a</td></tr><tr><td style="text-align:left"><code>**=</code></td><td style="text-align:left">幂赋值运算符</td><td style="text-align:left">c <code>**=</code> a 等效于 c = c <code>**</code> a</td></tr><tr><td style="text-align:left"><code>//=</code></td><td style="text-align:left">取整除赋值运算符</td><td style="text-align:left">c //= a 等效于 c = c // a</td></tr></tbody></table></div><h5 id="4-位运算符"><a href="#4-位运算符" class="headerlink" title="4.位运算符"></a>4.位运算符</h5><div class="table-container"><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><strong>按位与运算符<code>&amp;</code></strong></td><td>参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td></tr><tr><td><strong>按位或运算符<code>｜</code></strong></td><td>只要对应的二个二进位有一个为1时，结果位就为1。</td></tr><tr><td><strong>按位异或运算符<code>^</code></strong></td><td>当两对应的二进位相异时，结果为1</td></tr><tr><td><strong>按位取反运算符<code>~</code></strong></td><td>对数据的每个二进制位取反,即把1变为0,把0变为1 。<strong><code>~x</code></strong> 类似于 <strong><code>-x-1</code></strong></td></tr><tr><td><strong>左移动运算符<code>&lt;&lt;</code></strong></td><td>运算数的各二进位全部左移若干位，由 <strong><code>&lt;&lt;</code></strong> 右边的数字指定了移动的位数，高位丢弃，低位补0</td></tr><tr><td><strong>右移动运算符<code>&gt;&gt;</code></strong></td><td>把<code>&gt;&gt;</code>左边的运算数的各二进位全部右移若干位，<strong><code>&gt;&gt;</code></strong> 右边的数字指定了移动的位数</td></tr></tbody></table></div><ul><li>例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>         <span class="comment"># 10 = 0000 1010</span></span><br><span class="line">b = <span class="number">80</span>          <span class="comment"># 80 = 0101 0000</span></span><br><span class="line">c = a &amp; b       <span class="comment"># 00 = 0000 0000</span></span><br><span class="line">print(<span class="string">"a&amp;b value is :"</span>, c)</span><br><span class="line">d = a | b       <span class="comment"># 90 = 0101 1010</span></span><br><span class="line">print(<span class="string">"a|b value is :"</span>, d)</span><br><span class="line">e = a ^ b       <span class="comment"># 90 = 0101 1010</span></span><br><span class="line">print(<span class="string">"a^b value is :"</span>, e)</span><br><span class="line">f = ~ a         <span class="comment"># -11 = 1000 1011</span></span><br><span class="line">print(<span class="string">"~a value is :"</span>, f)</span><br><span class="line">g = a &lt;&lt; <span class="number">2</span>      <span class="comment"># 40 = 0010 1000</span></span><br><span class="line">print(<span class="string">"a&lt;&lt;2 value is :"</span>, g)</span><br><span class="line">h = a &gt;&gt; <span class="number">2</span>      <span class="comment"># 2 = 0000 0010</span></span><br><span class="line">print(<span class="string">"a&gt;&gt;2 value is :"</span>, h)</span><br></pre></td></tr></table></figure><ul><li>结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a&amp;b value <span class="keyword">is</span> : <span class="number">0</span></span><br><span class="line">a|b value <span class="keyword">is</span> : <span class="number">90</span></span><br><span class="line">a^b value <span class="keyword">is</span> : <span class="number">90</span></span><br><span class="line">~a value <span class="keyword">is</span> : <span class="number">-11</span></span><br><span class="line">a&lt;&lt;<span class="number">2</span> value <span class="keyword">is</span> : <span class="number">40</span></span><br><span class="line">a&gt;&gt;<span class="number">2</span> value <span class="keyword">is</span> : <span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h5><div class="table-container"><table><thead><tr><th style="text-align:left">逻辑表达式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><strong>x and y</strong></td><td style="text-align:left">布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td></tr><tr><td style="text-align:left"><strong>x or y</strong></td><td style="text-align:left">布尔”或” - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。</td></tr><tr><td style="text-align:left"><strong>not x</strong></td><td style="text-align:left">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td></tr></tbody></table></div><ul><li>例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"a and b ="</span>, a <span class="keyword">and</span> b)</span><br><span class="line">print(<span class="string">"c and b ="</span>, c <span class="keyword">and</span> b)</span><br><span class="line">print(<span class="string">"a or b ="</span>, a <span class="keyword">or</span> b)</span><br><span class="line">print(<span class="string">"c or b ="</span>, c <span class="keyword">or</span> b)</span><br><span class="line">print(<span class="string">"not a ="</span>, <span class="keyword">not</span> a)</span><br><span class="line">print(<span class="string">"not c ="</span>, <span class="keyword">not</span> c)</span><br></pre></td></tr></table></figure><ul><li>结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a <span class="keyword">and</span> b = <span class="number">20</span></span><br><span class="line">c <span class="keyword">and</span> b = <span class="number">0</span></span><br><span class="line">a <span class="keyword">or</span> b = <span class="number">10</span></span><br><span class="line">c <span class="keyword">or</span> b = <span class="number">20</span></span><br><span class="line"><span class="keyword">not</span> a = <span class="literal">False</span></span><br><span class="line"><span class="keyword">not</span> c = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h5 id="6-成员运算符"><a href="#6-成员运算符" class="headerlink" title="6.成员运算符"></a>6.成员运算符</h5><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>运算符</strong></th><th style="text-align:left"><strong>描述</strong></th><th style="text-align:left"><strong>实例</strong></th></tr></thead><tbody><tr><td style="text-align:left"><strong>in</strong></td><td style="text-align:left">如果在指定的序列中找到值返回 True，否则返回 False。</td><td style="text-align:left">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td style="text-align:left"><strong>not in</strong></td><td style="text-align:left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td style="text-align:left">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table></div><ul><li>例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"hello world"</span></span><br><span class="line">b = <span class="string">"llo"</span></span><br><span class="line">c = <span class="string">"oll"</span></span><br><span class="line">print(<span class="string">"b in a is :"</span>, b <span class="keyword">in</span> a)</span><br><span class="line">print(<span class="string">"b not in a is :"</span>, b <span class="keyword">not</span> <span class="keyword">in</span> a)</span><br><span class="line">print(<span class="string">"c in a is :"</span>, c <span class="keyword">in</span> a)</span><br><span class="line">print(<span class="string">"c not in a is :"</span>, c <span class="keyword">not</span> <span class="keyword">in</span> a)</span><br></pre></td></tr></table></figure><ul><li>结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b <span class="keyword">in</span> a <span class="keyword">is</span> : <span class="literal">True</span></span><br><span class="line">b <span class="keyword">not</span> <span class="keyword">in</span> a <span class="keyword">is</span> : <span class="literal">False</span></span><br><span class="line">c <span class="keyword">in</span> a <span class="keyword">is</span> : <span class="literal">False</span></span><br><span class="line">c <span class="keyword">not</span> <span class="keyword">in</span> a <span class="keyword">is</span> : <span class="literal">True</span></span><br></pre></td></tr></table></figure><h5 id="7-身份运算符"><a href="#7-身份运算符" class="headerlink" title="7.身份运算符"></a>7.身份运算符</h5><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left"><strong>is</strong></td><td style="text-align:left">is 是判断两个标识符是不是引用自一个对象</td><td style="text-align:left"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td style="text-align:left"><strong>is not</strong></td><td style="text-align:left">is not 是判断两个标识符是不是引用自不同对象</td><td style="text-align:left"><strong>x is not y</strong> ， 类似 <strong>id(a) != id(b)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table></div><ul><li>例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">list2 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">list3 = list1</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Please judge the following proposition:"</span>)</span><br><span class="line">print(<span class="string">"list1 is list2 :"</span>, list2 <span class="keyword">is</span> list1)</span><br><span class="line">print(<span class="string">"list3 is list1 :"</span>, list3 <span class="keyword">is</span> list1)</span><br><span class="line">print(<span class="string">"list1 is not list2 :"</span>, list2 <span class="keyword">is</span> <span class="keyword">not</span> list1)</span><br><span class="line">print(<span class="string">"list3 is not list1 :"</span>, list3 <span class="keyword">is</span> <span class="keyword">not</span> list1)</span><br><span class="line">print(<span class="string">"list1 == list2 :"</span>, list2 == list1)</span><br><span class="line">print(<span class="string">"list3 == list1 :"</span>, list3 == list1)</span><br><span class="line">print(<span class="string">"list1 != list2 :"</span>, list2 != list1)</span><br><span class="line">print(<span class="string">"list3 != list1 :"</span>, list3 != list1)</span><br></pre></td></tr></table></figure><ul><li>结果是：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Please judge the following proposition:</span></span><br><span class="line"><span class="attr">list1 is list2 :</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">list3 is list1 :</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">list1 is not list2 :</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">list3 is not list1 :</span> <span class="literal">False</span></span><br><span class="line"><span class="string">list1</span> <span class="string">==</span> <span class="attr">list2 :</span> <span class="literal">True</span></span><br><span class="line"><span class="string">list3</span> <span class="string">==</span> <span class="attr">list1 :</span> <span class="literal">True</span></span><br><span class="line"><span class="string">list1</span> <span class="string">!=</span> <span class="attr">list2 :</span> <span class="literal">False</span></span><br><span class="line"><span class="string">list3</span> <span class="string">!=</span> <span class="attr">list1 :</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>is 与 == 区别:</strong>is 用于判断两个变量引用对象是否为同一个(同一块内存空间)， == 用于判断引用变量的值是否相等。</p></blockquote><h5 id="8-运算符优先级"><a href="#8-运算符优先级" class="headerlink" title="8.运算符优先级"></a>8.运算符优先级</h5><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><strong>**</strong></td><td style="text-align:left">指数 (最高优先级)</td></tr><tr><td style="text-align:left"><strong>~ + -</strong></td><td style="text-align:left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td style="text-align:left"><strong>* / % //</strong></td><td style="text-align:left">乘，除，取模和取整除</td></tr><tr><td style="text-align:left"><strong>+ -</strong></td><td style="text-align:left">加法减法</td></tr><tr><td style="text-align:left"><strong>&gt;&gt; &lt;&lt;</strong></td><td style="text-align:left">右移，左移运算符</td></tr><tr><td style="text-align:left"><strong>&amp;</strong></td><td style="text-align:left">位 ‘AND’</td></tr><tr><td style="text-align:left"><strong>^ ｜</strong></td><td style="text-align:left">位运算符</td></tr><tr><td style="text-align:left"><strong>&lt;= &lt; &gt; &gt;=</strong></td><td style="text-align:left">比较运算符</td></tr><tr><td style="text-align:left"><strong>&lt;&gt; == !=</strong></td><td style="text-align:left">等于运算符</td></tr><tr><td style="text-align:left"><strong>= %= /= //= -= += *= </strong>=**</td><td style="text-align:left">赋值运算符</td></tr><tr><td style="text-align:left"><strong>is 、is not</strong></td><td style="text-align:left">身份运算符</td></tr><tr><td style="text-align:left"><strong>in 、not in</strong></td><td style="text-align:left">成员运算符</td></tr><tr><td style="text-align:left"><strong>not and or</strong></td><td style="text-align:left">逻辑运算符</td></tr></tbody></table></div><h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-书写表达式"><a href="#1-书写表达式" class="headerlink" title="1.书写表达式"></a>1.书写表达式</h5><blockquote><p>通常我们书写表达式的时候，会在每一个运算符左右都放一个空格，这样使代码更可读，如：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">234</span> * (<span class="number">45</span> - <span class="number">56</span> / <span class="number">34</span>)</span><br></pre></td></tr></table></figure><h5 id="2-类型转换"><a href="#2-类型转换" class="headerlink" title="2.类型转换"></a>2.类型转换</h5><div class="table-container"><table><thead><tr><th>类型转换函数</th><th>转换路径</th></tr></thead><tbody><tr><td><code>float(string)</code></td><td>字符串 -&gt; 浮点值</td></tr><tr><td><code>int(string)</code></td><td>字符串 -&gt; 整数值</td></tr><tr><td><code>str(integer)</code></td><td>整数值 -&gt; 字符串</td></tr><tr><td><code>str(float)</code></td><td>浮点值 -&gt; 字符串</td></tr></tbody></table></div><ul><li>例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">print(<span class="string">"type a is :"</span>, type(a))</span><br><span class="line">a = float(a)</span><br><span class="line">print(<span class="string">"after float(a) type a is :"</span>, type(a))</span><br><span class="line">b = <span class="number">2.0</span></span><br><span class="line">print(<span class="string">"type b is :"</span>, type(b))</span><br><span class="line">b = int(b)</span><br><span class="line">print(<span class="string">"after int(b) type b is :"</span>, type(b))</span><br><span class="line">c = <span class="string">"1"</span></span><br><span class="line">print(<span class="string">"type c is :"</span>, type(c))</span><br><span class="line">c = int(c)</span><br><span class="line">print(<span class="string">"after int(c) type c is :"</span>, type(c))</span><br></pre></td></tr></table></figure><ul><li>结果为：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type a <span class="keyword">is</span> : &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">after</span> <span class="title">float</span><span class="params">(a)</span> <span class="title">type</span> <span class="title">a</span> <span class="title">is</span> :</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">float</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">type</span> <span class="title">b</span> <span class="title">is</span> :</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">float</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">after</span> <span class="title">int</span><span class="params">(b)</span> <span class="title">type</span> <span class="title">b</span> <span class="title">is</span> :</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">type</span> <span class="title">c</span> <span class="title">is</span> :</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">after</span> <span class="title">int</span><span class="params">(c)</span> <span class="title">type</span> <span class="title">c</span> <span class="title">is</span> :</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong><code>type()</code>函数：</strong>传入一个参数时，返回 object 的类型，返回值是一个 type 对象。</p></blockquote><h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><h5 id="1-evaluateequ-py"><a href="#1-evaluateequ-py" class="headerlink" title="1.evaluateequ.py"></a>1.evaluateequ.py</h5><div class="note info no-icon"><p>使用Python编辑一个程序用于计算如下表达式结果：</p><script type="math/tex; mode=display">\frac{1}{x}+\frac{1}{x+1}+\frac{1}{x+2}+…+\frac{1}{n}</script><p>其中<code>x</code>，<code>n</code>的值为整型且需要用户输入,输出结果保留四位小数。</p></div><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">X = int(input(<span class="string">"Please input an integer X :"</span>))</span><br><span class="line">N = int(input(<span class="string">"Please input an integer N :"</span>))</span><br><span class="line">SUM = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> X <span class="keyword">in</span> range(<span class="number">1</span>, N + <span class="number">1</span>):</span><br><span class="line">    SUM += <span class="number">1</span> / X</span><br><span class="line">print(<span class="string">"The SUM is :"</span>, <span class="string">"&#123;:.4f&#125;"</span>.format(SUM))</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Please input an integer X :<span class="number">1</span></span><br><span class="line">Please input an integer N :<span class="number">10</span></span><br><span class="line">The SUM <span class="keyword">is</span> : <span class="number">2.9290</span></span><br></pre></td></tr></table></figure><ul><li>函数说明：</li></ul><blockquote><p><strong>range()函数</strong>返回的是一个可迭代对象（类型是对象），而不是列表类型， 所以打印的时候不会打印列表。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">range(stop)</span><br><span class="line">range(start, stop[, step])</span><br></pre></td></tr></table></figure><br>其中:</p><ul><li><code>start:</code> 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</li><li><code>stop:</code>计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</li><li><code>step：</code>步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)<br>拓展用法：<br><strong>list() 函数</strong>是对象迭代器，可以把range()返回的可迭代对象转为一个列表，返回的变量类型为列表。例如：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = list(range(<span class="number">0</span>, <span class="number">30</span>, <span class="number">5</span>))</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>输出结果为：[0, 5, 10, 15, 20, 25]</li></ul></blockquote><h5 id="2-quadraticequation-py"><a href="#2-quadraticequation-py" class="headerlink" title="2.quadraticequation.py"></a>2.quadraticequation.py</h5><div class="note info no-icon"><p>用户输入<code>a</code>,<code>b</code>,<code>c</code>后输出二次方根<code>root1</code>,<code>root2</code></p></div><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">a = int(input(<span class="string">"Please input a :"</span>))</span><br><span class="line">b = int(input(<span class="string">"Please input b :"</span>))</span><br><span class="line">c = int(input(<span class="string">"Please input c :"</span>))</span><br><span class="line">D = b * b - <span class="number">4</span> * a * c</span><br><span class="line"><span class="keyword">if</span> D &lt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"ROOTS are imaginary"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"root1="</span>, (-b + math.sqrt(D)) / (<span class="number">2</span> * a))</span><br><span class="line">    print(<span class="string">"root2="</span>, (-b - math.sqrt(D)) / (<span class="number">2</span> * a))</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Please input a :<span class="number">5</span></span><br><span class="line">Please input b :<span class="number">-4</span></span><br><span class="line">Please input c :<span class="number">0</span></span><br><span class="line">root1= <span class="number">0.8</span></span><br><span class="line">root2= <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">Please input a :<span class="number">5</span></span><br><span class="line">Please input b :<span class="number">4</span></span><br><span class="line">Please input c :<span class="number">1</span></span><br><span class="line">ROOTS are imaginary</span><br></pre></td></tr></table></figure><blockquote><p>Math模块常用函数：<a href="https://www.jianshu.com/p/7183e0516b25" target="_blank" rel="noopener">简书</a></p></blockquote><h5 id="3-salesmansalary-py"><a href="#3-salesmansalary-py" class="headerlink" title="3.salesmansalary.py"></a>3.salesmansalary.py</h5><div class="note info no-icon"><p>这个程序计算一位数码相机销售人员的工资。他的基本工资是 1500，每售出一台相机他可以得到 200 并且获得 2% 的抽成。程序要求输入相机数量及单价。</p></div><ul><li>代码:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">count = int(input(<span class="string">"Please input the number of cameras:"</span>))</span><br><span class="line">price = float(input(<span class="string">"Please input the price of cameras:"</span>))</span><br><span class="line">print(<span class="string">"The salary is:"</span>, <span class="number">1500</span>+<span class="number">200</span>*count + <span class="number">0.02</span>*count*price)</span><br></pre></td></tr></table></figure><ul><li>结果：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Please input the number of cameras:<span class="number">5</span></span><br><span class="line">Please input the price of cameras:<span class="number">2000</span></span><br><span class="line">The salary <span class="keyword">is</span>: <span class="number">2700.0</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="4-areaofacircle-py"><a href="#4-areaofacircle-py" class="headerlink" title="4.areaofacircle.py"></a>4.areaofacircle.py</h5><div class="note info no-icon"><p>输入圆的半径R，输出圆的面积</p></div><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">R = float(input(<span class="string">"Please input the radius:"</span>))</span><br><span class="line">print(<span class="string">"The area of the circle is:"</span>, <span class="string">"&#123;:.10f&#125;"</span>.format(math.pi*R*R))</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please input the radius:<span class="number">2</span></span><br><span class="line">The area of the circle <span class="keyword">is</span>: <span class="number">12.5663706144</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本节实验中将学习运算符和表达式的基本用法。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="博客" scheme="https://ame1314.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>format()函数格式化数字</title>
    <link href="https://ame1314.github.io/2020/02/29/format-%E5%87%BD%E6%95%B0%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%95%B0%E5%AD%97/"/>
    <id>https://ame1314.github.io/2020/02/29/format-%E5%87%BD%E6%95%B0%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%95%B0%E5%AD%97/</id>
    <published>2020-02-29T12:01:15.000Z</published>
    <updated>2020-03-06T10:11:19.381Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>此文中将解释format()函数格式化数字的多种方法</p><p>原文链接：<a href="https://www.runoob.com/python/att-string-format.html" target="_blank" rel="noopener">Python format 格式化函数</a></p></div><a id="more"></a><div class="table-container"><table><thead><tr><th style="text-align:left">数字</th><th style="text-align:left">格式</th><th style="text-align:left">输出</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">3.1415926</td><td style="text-align:left">{:.2f}</td><td style="text-align:left">3.14</td><td style="text-align:left">保留小数点后两位</td></tr><tr><td style="text-align:left">3.1415926</td><td style="text-align:left">{:+.2f}</td><td style="text-align:left">+3.14</td><td style="text-align:left">带符号保留小数点后两位</td></tr><tr><td style="text-align:left">-1</td><td style="text-align:left">{:+.2f}</td><td style="text-align:left">-1.00</td><td style="text-align:left">带符号保留小数点后两位</td></tr><tr><td style="text-align:left">2.71828</td><td style="text-align:left">{:.0f}</td><td style="text-align:left">3</td><td style="text-align:left">不带小数</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">{:0&gt;2d}</td><td style="text-align:left">05</td><td style="text-align:left">数字补零 (填充左边, 宽度为2)</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">{:x&lt;4d}</td><td style="text-align:left">5xxx</td><td style="text-align:left">数字补x (填充右边, 宽度为4)</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">{:x&lt;4d}</td><td style="text-align:left">10xx</td><td style="text-align:left">数字补x (填充右边, 宽度为4)</td></tr><tr><td style="text-align:left">1000000</td><td style="text-align:left">{:,}</td><td style="text-align:left">1,000,000</td><td style="text-align:left">以逗号分隔的数字格式</td></tr><tr><td style="text-align:left">0.25</td><td style="text-align:left">{:.2%}</td><td style="text-align:left">25.00%</td><td style="text-align:left">百分比格式</td></tr><tr><td style="text-align:left">1000000000</td><td style="text-align:left">{:.2e}</td><td style="text-align:left">1.00e+09</td><td style="text-align:left">指数记法</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">{:&gt;10d}</td><td style="text-align:left">13</td><td style="text-align:left">右对齐 (默认, 宽度为10)</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">{:&lt;10d}</td><td style="text-align:left">13</td><td style="text-align:left">左对齐 (宽度为10)</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">{:^10d}</td><td style="text-align:left">13</td><td style="text-align:left">中间对齐 (宽度为10)</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">{:b}</td><td style="text-align:left">1011</td><td style="text-align:left">二进制</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">{:d}</td><td style="text-align:left">11</td><td style="text-align:left">十进制</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">{:o}</td><td style="text-align:left">13</td><td style="text-align:left">八进制</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">{:x}</td><td style="text-align:left">b</td><td style="text-align:left">十六进制</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">{:#x}</td><td style="text-align:left">0xb</td><td style="text-align:left">十六进制</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">{:#X}</td><td style="text-align:left">0Xb</td><td style="text-align:left">十六进制</td></tr></tbody></table></div><p><strong><code>^</code></strong>, <strong><code>&lt;</code></strong>, <strong><code>&gt;</code></strong> 分别是居中、左对齐、右对齐，后面带宽度， <strong><code>:</code></strong> 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</p><p><strong><code>+</code></strong> 表示在正数前显示 <strong><code>+</code></strong>，负数前显示 <strong><code>-</code></strong>； （空格）表示在正数前加空格</p><hr><p>目录：<a href="http://vxiaozhe1998.cn/2020/02/28/Python学习/" target="_blank" rel="noopener">Python学习</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;此文中将解释format()函数格式化数字的多种方法&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://www.runoob.com/python/att-string-format.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python format 格式化函数&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://ame1314.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>2.变量和数据类型</title>
    <link href="https://ame1314.github.io/2020/02/29/2-%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://ame1314.github.io/2020/02/29/2-%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-02-29T08:46:59.000Z</published>
    <updated>2020-03-06T07:05:31.739Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>在本文中将给出Python中的变量和数据类型的一些解释</p></div><a id="more"></a><h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul><li>python 关键字</li><li>变量的定义与赋值</li><li>input() 函数</li><li>字符串的格式化</li></ul><h4 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h4><h5 id="1-Python常用的关键词可通过在Python控制台中依次输入help-gt-keywords来获取"><a href="#1-Python常用的关键词可通过在Python控制台中依次输入help-gt-keywords来获取" class="headerlink" title="1. Python常用的关键词可通过在Python控制台中依次输入help()-&gt;keywords来获取"></a>1. Python常用的关键词可通过在Python控制台中依次输入<code>help()</code>-&gt;<code>keywords</code>来获取</h5><blockquote><p>Python3关键字及含义见链接：<a href="http://vxiaozhe1998.cn/2020/02/29/Python保留字/" target="_blank" rel="noopener">Python保留字</a></p></blockquote><h5 id="2-Python中的变量"><a href="#2-Python中的变量" class="headerlink" title="2.Python中的变量"></a>2.Python中的变量</h5><ul><li>通过使用代码直接赋值来赋予变量类型，例如，我们输入<code>abc = 1</code>则变量<code>abc</code>就是整型，如果输入<code>abc = 1.0</code>那么变量<code>abc</code>就是浮点型，在Python中<strong>我们只需要输入变量名以及值即可完成变量的定义与赋值</strong></li><li>通过使用双引号、单引号来对字符串进行操作，例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'XiaoZhe'</span></span><br><span class="line"><span class="string">'XiaoZhe'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'XiaoZhe\'s blog'</span> </span><br><span class="line"><span class="string">"XiaoZhe's blog"</span></span><br></pre></td></tr></table></figure><p>代码中的<code>\&#39;</code>是<code>&#39;</code>的转义字符，目的是为了在控制台中输出<code>&#39;</code> 符号。</p><ul><li>可以通过函数<code>input()</code>来读取键盘输入</li></ul><h5 id="3-Python中的单行多元素赋值"><a href="#3-Python中的单行多元素赋值" class="headerlink" title="3.Python中的单行多元素赋值"></a>3.Python中的单行多元素赋值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a , b = <span class="number">45</span>, <span class="number">54</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">45</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">54</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = b , a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">54</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">45</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = ( <span class="string">"China"</span>, <span class="string">"Python"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>country, language = data</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>country</span><br><span class="line"><span class="string">'China'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>language</span><br><span class="line"><span class="string">'Python'</span></span><br></pre></td></tr></table></figure><h4 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h4><h5 id="1-使用Pycharm获取关键字"><a href="#1-使用Pycharm获取关键字" class="headerlink" title="1.使用Pycharm获取关键字"></a>1.使用Pycharm获取关键字</h5><ul><li>通过在编辑器中输入<code>help()</code>并点击运行，在控制台中输入<code>keywords</code>就可以得到所有关键字了</li></ul><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200229-1582964843955" alt="Python关键字"></p><ul><li>我们也可以在控制台输入<code>modules</code>, <code>symbols</code> 或者 <code>topics</code>来分别获取<code>模块</code>、<code>运算符</code>和<code>文档</code></li></ul><h4 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h4><h5 id="1-求-N-个数字的平均值"><a href="#1-求-N-个数字的平均值" class="headerlink" title="1.求 N 个数字的平均值"></a>1.求 N 个数字的平均值</h5><div class="note info no-icon"><p>输入一个整数N，在接下来你将输入N个数，程序将计算这N个数的平均值</p></div><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Calculate the average of N numbers</span></span><br><span class="line"><span class="comment"># Define a variable N and get the value from the keyboard</span></span><br><span class="line">print(<span class="string">"Please enter an integer N, the program will enter N integers and calculate their average"</span>)</span><br><span class="line">N = int(input(<span class="string">"Enter an integer: "</span>))</span><br><span class="line">count = <span class="number">1</span></span><br><span class="line">sum_my = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= N:</span><br><span class="line">    print(<span class="string">"Please enter the "</span>, count, <span class="string">" number: "</span>, end=<span class="string">' '</span>)</span><br><span class="line">    number = float(input())</span><br><span class="line">    sum_my = sum_my + number</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">average_my = sum_my / N</span><br><span class="line">print(<span class="string">"The average of N number is:"</span>, <span class="string">"&#123;:.2f&#125;"</span>.format(average_my))</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Enter an integer: <span class="number">5</span></span><br><span class="line">Please enter the  <span class="number">1</span>  number:  <span class="number">1</span></span><br><span class="line">Please enter the  <span class="number">2</span>  number:  <span class="number">2</span></span><br><span class="line">Please enter the  <span class="number">3</span>  number:  <span class="number">3</span></span><br><span class="line">Please enter the  <span class="number">4</span>  number:  <span class="number">4</span></span><br><span class="line">Please enter the  <span class="number">5</span>  number:  <span class="number">5</span></span><br><span class="line">The average of N number <span class="keyword">is</span>: <span class="number">3.00</span></span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>函数说明：</li></ul><blockquote><p><strong>print()函数</strong><br>输出信息，不同类型的变量用<code>,</code>连接，即：<code>print(&quot;string&quot;,int)</code>，也可以在函数中添加函数，如<code>print(&quot;{:.2f}.format(value)&quot;)</code>-&gt;<code>打印value保留两位小数的值</code>，如果需要输出后不换行，添加参数<code>end=&#39; &#39;</code>即<code>print(&quot;不换行&quot;,end=&#39; &#39;)</code></p><p><strong>input()函数</strong><br>从键盘读取信息，参数中添加字符串可输出至控制台，即：<code>input(&quot;请输入字符： &quot;)</code>，由于<code>input()</code>函数默认读取的是字符型，如果需要整型需要进行转码即：<code>int(input())</code>,例：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = int(input(<span class="string">"请输入数字："</span>))</span><br><span class="line">请输入字符：<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="2-华氏温度到摄氏温度转换程序"><a href="#2-华氏温度到摄氏温度转换程序" class="headerlink" title="2.华氏温度到摄氏温度转换程序"></a>2.华氏温度到摄氏温度转换程序</h5><div class="note info no-icon"><p>使用公式 C = (F - 32) / 1.8 将华氏温度转为摄氏温度。</p></div><ul><li>代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enter a Fahrenheit temperature F and convert it to Celsius C. The formula is: C = (F-32) / 1.8</span></span><br><span class="line">fahrenheit = int(input(<span class="string">"Please enter the fahrenheit: "</span>))</span><br><span class="line">celsius = (fahrenheit - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line">print(<span class="string">"The "</span>, fahrenheit, <span class="string">"°F is "</span>, <span class="string">"&#123;:.2f&#125;"</span>.format(celsius), <span class="string">"°C"</span>)</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter the fahrenheit: <span class="number">25</span></span><br><span class="line">The  <span class="number">25</span> °F <span class="keyword">is</span>  <span class="number">-3.89</span> °C</span><br></pre></td></tr></table></figure><ul><li>函数说明:</li></ul><blockquote><p><strong>format()</strong>函数<br>通常使用规范为<code>&quot;文本{变量}&quot;.format(变量限制)</code>，例如下面几个例子</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"&#123;1&#125; &#123;0&#125; &#123;1&#125;"</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line"><span class="string">'world hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"&#123;:.2f&#125;"</span>.format(<span class="number">3.1415926</span>));</span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure><ul><li>其他说明</li></ul><blockquote><p>对于format()函数中格式化数字的部分详见链接：<a href="http://vxiaozhe1998.cn/2020/02/29/format-函数格式化数字/" target="_blank" rel="noopener">format()函数格式化数字</a></p></blockquote><hr><p>上一篇：<a href="http://vxiaozhe1998.cn/2020/02/28/1.开始Python之旅/" target="_blank" rel="noopener">1.开始Python之旅</a><br>目    录：<a href="http://vxiaozhe1998.cn/2020/02/28/Python学习/" target="_blank" rel="noopener">Python学习</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;在本文中将给出Python中的变量和数据类型的一些解释&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://ame1314.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python保留字</title>
    <link href="https://ame1314.github.io/2020/02/29/Python%E4%BF%9D%E7%95%99%E5%AD%97/"/>
    <id>https://ame1314.github.io/2020/02/29/Python%E4%BF%9D%E7%95%99%E5%AD%97/</id>
    <published>2020-02-29T08:16:24.000Z</published>
    <updated>2020-02-29T12:50:48.421Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>本文将给出Python3的35个保留字<br>原文链接：<a href="https://www.jianshu.com/p/fb63b295bf64" target="_blank" rel="noopener">https://www.jianshu.com/p/fb63b295bf64</a><br>原文作者：大白python（简书）</p></div><a id="more"></a><h3 id="关键字就是程序发明者规定的有特殊含义的单词，又叫保留字-。"><a href="#关键字就是程序发明者规定的有特殊含义的单词，又叫保留字-。" class="headerlink" title="关键字就是程序发明者规定的有特殊含义的单词，又叫保留字 。"></a>关键字就是程序发明者规定的有特殊含义的单词，又叫保留字 。</h3><div class="table-container"><table><thead><tr><th>关键字</th><th>说     明</th></tr></thead><tbody><tr><td><strong>一、</strong></td><td><strong>运算 ：（10个）</strong></td></tr><tr><td>and</td><td>用于表达式运算，逻辑与操作</td></tr><tr><td>as</td><td>用于类型转换</td></tr><tr><td>assert</td><td>断言，用于判断变量或条件表达式的值是否为真</td></tr><tr><td>del</td><td>删除变量或序列的值</td></tr><tr><td>in</td><td>判断变量是否在序列中</td></tr><tr><td>is</td><td>判断变量是否为某个类的实例</td></tr><tr><td>not</td><td>用于表达式运算，逻辑非操作</td></tr><tr><td>or</td><td>用于表达式运算，逻辑或操作</td></tr><tr><td>None</td><td>表示该值是一个空对象，空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</td></tr><tr><td>false</td><td>错误</td></tr><tr><td>true</td><td>正确</td></tr><tr><td><strong>二、</strong></td><td><strong>条件与循环语句：（7个）</strong></td></tr><tr><td>if</td><td>条件语句，与else，elif结合使用</td></tr><tr><td>elif</td><td>条件语句，与if,else结合使用</td></tr><tr><td>else</td><td>条件语句，与if,elif结合使用，也可用于异常和循环语句</td></tr><tr><td>for</td><td>for循环语句</td></tr><tr><td>while</td><td>while的循环语句</td></tr><tr><td>break</td><td>中断循环语句的执行</td></tr><tr><td>continue</td><td>继续执行下一次循环</td></tr><tr><td><strong>三、</strong></td><td><strong>定义对象或函数：（7个）</strong></td></tr><tr><td>class</td><td>用于定义类</td></tr><tr><td>def</td><td>用于定义函数或方法</td></tr><tr><td>return</td><td>用于从函数返回计算结果</td></tr><tr><td>yield</td><td>用于从函数依此返回值</td></tr><tr><td>globe</td><td>定义全局变量</td></tr><tr><td>lambda</td><td>定义匿名变量</td></tr><tr><td>nonlocal</td><td>非局部变量</td></tr><tr><td><strong>四、</strong></td><td><strong>python功能语句：（6个）</strong></td></tr><tr><td>from</td><td>用于导入模块，与import结合使用</td></tr><tr><td>import</td><td>用于导入模块，与from结合使用</td></tr><tr><td>print</td><td>打印语句</td></tr><tr><td>exec</td><td>用于执行python 语句</td></tr><tr><td>pass</td><td>空的类，方法，函数的占位符</td></tr><tr><td>with</td><td>简化python的语句</td></tr><tr><td><strong>五、</strong></td><td><strong>有关异常的操作：（4个）</strong></td></tr><tr><td>try</td><td>try包含可能会出现异常的语句，与except，finally结合使用</td></tr><tr><td>except</td><td>except包含捕获异常后的操作代码块，与try,finally结合使用</td></tr><tr><td>finally</td><td>用于异常语句，出现异常后，始终要执行finally，包含的代码块，与try，except结合使用</td></tr><tr><td>raise</td><td>异常抛出操作</td></tr></tbody></table></div><hr><p>目录：<a href="http://vxiaozhe1998.cn/2020/02/28/Python学习/" target="_blank" rel="noopener">Python学习</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文将给出Python3的35个保留字&lt;br&gt;原文链接：&lt;a href=&quot;https://www.jianshu.com/p/fb63b295bf64&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/fb63b295bf64&lt;/a&gt;&lt;br&gt;原文作者：大白python（简书）&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://ame1314.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Windows端常用的cmd指令</title>
    <link href="https://ame1314.github.io/2020/02/28/Windows%E7%AB%AF%E5%B8%B8%E7%94%A8%E7%9A%84cmd%E6%8C%87%E4%BB%A4/"/>
    <id>https://ame1314.github.io/2020/02/28/Windows%E7%AB%AF%E5%B8%B8%E7%94%A8%E7%9A%84cmd%E6%8C%87%E4%BB%A4/</id>
    <published>2020-02-28T10:57:05.000Z</published>
    <updated>2020-02-28T11:48:58.221Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>本文中将提供一些常用指令</p></div><a id="more"></a><div class="table-container"><table><thead><tr><th>操作</th><th>指令</th></tr></thead><tbody><tr><td>切换到X盘</td><td>X:</td></tr><tr><td>打开某盘符的某个文件夹</td><td>cd folder</td></tr><tr><td>返回上一级目录</td><td>cd..</td></tr><tr><td>回到根目录</td><td>cd\</td></tr><tr><td>查看目录内容</td><td>dir</td></tr><tr><td>创建名为”fold”的文件夹</td><td>mkdir fold/md fold</td></tr><tr><td>创建名为”text.txt”空文件</td><td>type nul&gt;text.txt</td></tr><tr><td>创建名为”text.txt”内容为”content”的文件</td><td>echo content&gt;text.txt</td></tr><tr><td>复制目录中text.txt并以text1.txt的名称粘贴在本目录中</td><td>copy text.txt text1.txt</td></tr><tr><td>删除名为text.txt的文件</td><td>del text.txt</td></tr><tr><td>重命名text.txt文件为text1.txt</td><td>ren text.txt text1.txt</td></tr><tr><td>查看text.txt内容</td><td>type text.txt</td></tr><tr><td>清屏</td><td>cls</td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文中将提供一些常用指令&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="https://ame1314.github.io/categories/Windows/"/>
    
    
      <category term="cmd" scheme="https://ame1314.github.io/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>在Windows上配置Python以及部分编译器的推荐</title>
    <link href="https://ame1314.github.io/2020/02/28/%E5%9C%A8Windows%E4%B8%8A%E9%85%8D%E7%BD%AEPython%E4%BB%A5%E5%8F%8A%E9%83%A8%E5%88%86%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E6%8E%A8%E8%8D%90/"/>
    <id>https://ame1314.github.io/2020/02/28/%E5%9C%A8Windows%E4%B8%8A%E9%85%8D%E7%BD%AEPython%E4%BB%A5%E5%8F%8A%E9%83%A8%E5%88%86%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E6%8E%A8%E8%8D%90/</id>
    <published>2020-02-28T05:07:41.000Z</published>
    <updated>2020-03-01T02:12:52.730Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>在本文中将详细介绍如何在Windows上配置Python以及几种编译器的推荐。</p></div><a id="more"></a><h3 id="一、什么是Python"><a href="#一、什么是Python" class="headerlink" title="一、什么是Python"></a>一、什么是Python</h3><p>Python是一种跨平台的计算机程序设计语言。是一种面向对象的动态类型语言，最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越多被用于独立的、大型项目的开发。</p><h3 id="二、如何配置Python环境"><a href="#二、如何配置Python环境" class="headerlink" title="二、如何配置Python环境"></a>二、如何配置Python环境</h3><h4 id="1-打开Python官网"><a href="#1-打开Python官网" class="headerlink" title="1.打开Python官网"></a>1.打开Python官网</h4><p><a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a></p><p>按照图示先移动到<code>Downloads</code>处并点击<code>Windows</code></p><p><img src="https://upload-images.jianshu.io/upload_images/10646648-419fc022eefbe044.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Python官网"></p><h4 id="2-点击最近的版本跳转到新页面"><a href="#2-点击最近的版本跳转到新页面" class="headerlink" title="2.点击最近的版本跳转到新页面"></a>2.点击最近的版本跳转到新页面</h4><p><img src="https://upload-images.jianshu.io/upload_images/10646648-0b2a3cb1bf4a6a7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最近的版本"></p><h4 id="3-滑动到底部如下图所示"><a href="#3-滑动到底部如下图所示" class="headerlink" title="3.滑动到底部如下图所示"></a>3.滑动到底部如下图所示</h4><p><img src="https://upload-images.jianshu.io/upload_images/10646648-dd9ce518f21bb417.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Python版本"></p><blockquote><p><strong>有关Windows版本的介绍</strong></p><ul><li>Windows x86-64 web-based installer 需要通过联网完成安装(64位）</li><li>Windows x86-64 executable installer 是可执行文件(*.exe)方式安装（64位）</li><li>Windows x86-64 embeddable zip file 嵌入式版本，可以集成到其它应用中（64位）</li><li>Windows x86 web-based installer 需要通过联网完成安装(32位）</li><li>Windows x86 executable installer 是可执行文件(*.exe)方式安装（32位）</li><li>Windows x86 embeddable zip file 嵌入式版本，可以集成到其它应用中（32位）</li></ul></blockquote><p>我们选择下图所示版本点击下载<br><img src="https://upload-images.jianshu.io/upload_images/10646648-9f092f560e706469.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="64位可执行文件"><br><strong>注意：</strong>如果你是32位电脑系统就下载32位的即Windows x86 executable installer</p><blockquote><p><strong>如何查看自己电脑系统的位数？</strong><br>1.按快捷键<code>Win+R</code>,在运行框中输入<code>cmd</code><br><img src="https://upload-images.jianshu.io/upload_images/10646648-8b7e768def92a341.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行"><br>2.在弹出的窗口中输入<code>systeminfo</code><br><img src="https://upload-images.jianshu.io/upload_images/10646648-7dfe3d2057253af7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="系统类型"><br><strong>系统类型处是x64就是64位系统，如果是x86就是32位系统</strong></p></blockquote><h4 id="4-打开下载好的Python"><a href="#4-打开下载好的Python" class="headerlink" title="4.打开下载好的Python"></a>4.打开下载好的Python</h4><p><img src="https://upload-images.jianshu.io/upload_images/10646648-0e7c828c38467609.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="界面及翻译"></p><blockquote><p><strong>有关名词解释：</strong></p><ul><li>IDLE:（ 集成开发环境或集成开发和学习环境）是Python的集成开发环境</li><li>pip:一个现代的，通用的 Python 包管理工具。提供了对 Python 包的查找、下载、安装、卸载的功能。</li></ul></blockquote><h4 id="5-勾选Add-Python-3-8-to-PATH并点击Install-Now"><a href="#5-勾选Add-Python-3-8-to-PATH并点击Install-Now" class="headerlink" title="5.勾选Add Python 3.8 to PATH并点击Install Now"></a>5.勾选<code>Add Python 3.8 to PATH</code>并点击<code>Install Now</code></h4><p><img src="https://upload-images.jianshu.io/upload_images/10646648-8ff530604b2ac804.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装成功"></p><p><strong>安装成功后点击<code>Disable path length limit</code>之后点击<code>Close</code></strong></p><h4 id="6-运行cmd输入python得到Python的版本信息即配置成功"><a href="#6-运行cmd输入python得到Python的版本信息即配置成功" class="headerlink" title="6.运行cmd输入python得到Python的版本信息即配置成功"></a>6.运行<code>cmd</code>输入<code>python</code>得到Python的版本信息即配置成功</h4><p><img src="https://upload-images.jianshu.io/upload_images/10646648-fdc005d459bf0e88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="版本信息"></p><h4 id="7-按下Win键就是键盘上唯一一个全部都是图形的按键，直接输入python-点击推荐选项运行"><a href="#7-按下Win键就是键盘上唯一一个全部都是图形的按键，直接输入python-点击推荐选项运行" class="headerlink" title="7.按下Win键就是键盘上唯一一个全部都是图形的按键，直接输入python,点击推荐选项运行"></a>7.按下<code>Win</code>键就是键盘上唯一一个全部都是图形的按键，直接输入<code>python</code>,点击推荐选项运行</h4><p><img src="https://upload-images.jianshu.io/upload_images/10646648-d927540357444f6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行python"></p><h4 id="8-在其中输入下列代码并敲击enter："><a href="#8-在其中输入下列代码并敲击enter：" class="headerlink" title="8.在其中输入下列代码并敲击enter："></a>8.在其中输入下列代码并敲击<code>enter</code>：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/10646648-7431423a92e2e9dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>至此，python环境安装完成</strong></p><h3 id="三、编译器"><a href="#三、编译器" class="headerlink" title="三、编译器"></a>三、编译器</h3><h4 id="1-IDLE"><a href="#1-IDLE" class="headerlink" title="1.IDLE"></a>1.IDLE</h4><blockquote><p>这是安装Python自带的编译器，通过按下<code>Win</code>键并直接键入Idle选择搜索结果启动</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/10646648-ec8238c63859bbdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IDLE"></p><h5 id="1-1-通过键入如下代码并按enter来运行"><a href="#1-1-通过键入如下代码并按enter来运行" class="headerlink" title="1.1 通过键入如下代码并按enter来运行"></a>1.1 通过键入如下代码并按<code>enter</code>来运行</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/10646648-2fb01aeb240cf0b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IDLE"></p><h5 id="1-2-通过IDLE创建脚本"><a href="#1-2-通过IDLE创建脚本" class="headerlink" title="1.2 通过IDLE创建脚本"></a>1.2 通过IDLE创建脚本</h5><p>1.2.1 依次点击右上角<code>File</code>-&gt;<code>New File</code>创建脚本文档<br><img src="https://upload-images.jianshu.io/upload_images/10646648-3f2715de5f86f40b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建脚本文档"></p><p>1.2.2 输入快捷键<code>ctrl+s</code>命名为<code>helloworld.py</code>，一定要记住路径<br><img src="https://upload-images.jianshu.io/upload_images/10646648-85d66276ea7f9477.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="保存脚本"></p><p>1.2.3 在脚本文档中输入如下代码并保存<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><br><img src="https://upload-images.jianshu.io/upload_images/10646648-2857826b9cf1fd31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="脚本"></p><p>1.2.3 打开windows的cmd</p><blockquote><p>通过快捷键<code>win+R</code>在运行中输入<code>cmd</code>运行</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/10646648-a1fe6e072afc20de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开cmd"></p><p>1.2.4 切换到之前保存的盘符，并定位到保存的脚本的路径<br><img src="https://upload-images.jianshu.io/upload_images/10646648-02876b9ebd64d412.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="定位路径"></p><p> <strong>常用指令：<a href="http://vxiaozhe1998.cn/2020/02/28/Windows%E7%AB%AF%E5%B8%B8%E7%94%A8%E7%9A%84cmd%E6%8C%87%E4%BB%A4/" target="_blank" rel="noopener">Windows下cmd常用指令</a></strong></p><p>1.2.5 在该目录下输入<code>python helloworld.py</code><br><img src="https://upload-images.jianshu.io/upload_images/10646648-14b51b508dcb3276.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行"></p><p><strong>以上就是IDLE的基础使用</strong></p><h4 id="2-Pycharm"><a href="#2-Pycharm" class="headerlink" title="2.Pycharm"></a>2.Pycharm</h4><h5 id="2-1-下载Toolbox-App"><a href="#2-1-下载Toolbox-App" class="headerlink" title="2.1 下载Toolbox App"></a>2.1 下载Toolbox App</h5><p><a href="https://www.jetbrains.com/toolbox-app/" target="_blank" rel="noopener">下载地址</a><br><img src="https://upload-images.jianshu.io/upload_images/10646648-541e6abbca0c5e27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Toolbox App"></p><h5 id="2-2-安装之后打开软件注册登录之后下载Pycharm-Community"><a href="#2-2-安装之后打开软件注册登录之后下载Pycharm-Community" class="headerlink" title="2.2 安装之后打开软件注册登录之后下载Pycharm Community"></a>2.2 安装之后打开软件注册登录之后下载Pycharm Community</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-083d77a32f42de96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Pycharm Community"></p><h5 id="2-3-安装完成点击打开"><a href="#2-3-安装完成点击打开" class="headerlink" title="2.3 安装完成点击打开"></a>2.3 安装完成点击打开</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-60a4fa12926f02bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点击"></p><h5 id="2-4-选择不搬运后点击ok"><a href="#2-4-选择不搬运后点击ok" class="headerlink" title="2.4 选择不搬运后点击ok"></a>2.4 选择不搬运后点击ok</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-a6f2e0642bbd14da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择"></p><h5 id="2-5-选择主题之后点击Next-Featured-plugins-下一步：精选插件）"><a href="#2-5-选择主题之后点击Next-Featured-plugins-下一步：精选插件）" class="headerlink" title="2.5 选择主题之后点击Next:Featured plugins(下一步：精选插件）"></a>2.5 选择主题之后点击<code>Next:Featured plugins</code>(下一步：精选插件）</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-b8907c216ab8649a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主题页"></p><h5 id="2-6-建议安装Markdown语言支持，如果对Vim或R语言熟悉可选择安装推荐的其他插件，安装之后点击Start-using-Pycharm-开始使用Pycharm）"><a href="#2-6-建议安装Markdown语言支持，如果对Vim或R语言熟悉可选择安装推荐的其他插件，安装之后点击Start-using-Pycharm-开始使用Pycharm）" class="headerlink" title="2.6 建议安装Markdown语言支持，如果对Vim或R语言熟悉可选择安装推荐的其他插件，安装之后点击Start using Pycharm(开始使用Pycharm）"></a>2.6 建议安装Markdown语言支持，如果对Vim或R语言熟悉可选择安装推荐的其他插件，安装之后点击<code>Start using Pycharm</code>(开始使用Pycharm）</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-7bc08657b9c612fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插件"></p><h5 id="2-7-点击Create-New-Project（创建新项目）"><a href="#2-7-点击Create-New-Project（创建新项目）" class="headerlink" title="2.7 点击Create New Project（创建新项目）"></a>2.7 点击<code>Create New Project</code>（创建新项目）</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-451aa52251a36fcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建新项目"></p><h5 id="2-8-更改项目位置"><a href="#2-8-更改项目位置" class="headerlink" title="2.8 更改项目位置"></a>2.8 更改项目位置</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-fb9daf028d8833df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目位置"></p><p><strong>注意，我们选择的路径需要为空，不然无法创建，第二个Location不用动它，是自动默认的，其余不用点，然后点击Create。</strong></p><h5 id="2-9-等待片刻进入软件"><a href="#2-9-等待片刻进入软件" class="headerlink" title="2.9 等待片刻进入软件"></a>2.9 等待片刻进入软件</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-c16c34d4addd97af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="软件界面"></p><h5 id="2-10-创建-py脚本"><a href="#2-10-创建-py脚本" class="headerlink" title="2.10 创建.py脚本"></a>2.10 创建<code>.py</code>脚本</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-d8134bfe83ed3c41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建脚本"><br><img src="https://upload-images.jianshu.io/upload_images/10646648-799dede7c34ed199.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建文件名"></p><h5 id="2-11-软件的一些设置"><a href="#2-11-软件的一些设置" class="headerlink" title="2.11 软件的一些设置"></a>2.11 软件的一些设置</h5><p>2.11.1 在按住<code>ctrl</code>时鼠标滑轮可以控制字符大小</p><ul><li>依次点击<code>File</code>-&gt;<code>Settings</code><br><img src="https://upload-images.jianshu.io/upload_images/10646648-4a65ccaa1c837988.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置"></li><li>点击<code>Editor</code>下三角之后单击<code>General</code>勾选<code>Change font size(Zoom) with Ctrl+Mouse Wheel</code>单击Apply<br><img src="https://upload-images.jianshu.io/upload_images/10646648-69987df0cfcd3c93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置"></li></ul><p>2.11.2 安装插件（本插件用于美化界面，不安装对编程没影响）</p><ul><li>在上图中点击<code>Plugins</code>搜索<code>Mate</code>并安装<br><img src="https://upload-images.jianshu.io/upload_images/10646648-910919d9e99ced15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Material Theme UI"></li><li>点击<code>accept</code><br><img src="https://upload-images.jianshu.io/upload_images/10646648-d6cff6cda4fdacf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="accept"></li><li>点击<code>Restart IDE</code>(重启IDE）<br><img src="https://upload-images.jianshu.io/upload_images/10646648-161bcc030f0af366.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Restart IDE"></li><li>点击<code>Restart</code>使插件生效<br><img src="https://upload-images.jianshu.io/upload_images/10646648-76ebfb9765cf1ef2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Restart"></li><li>点击<code>NEXT:THEMES</code>(主题）<br><img src="https://upload-images.jianshu.io/upload_images/10646648-c99d022f5e490ba4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主题"></li><li>选择一款你喜欢的主题并点击<code>NEXT:CONTRAST</code>(对比）<br><img src="https://upload-images.jianshu.io/upload_images/10646648-9eea966d2ee2511b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主题"></li><li>选择一款你喜欢的样式并点击<code>NEXT:ACCENT</code><br><img src="https://upload-images.jianshu.io/upload_images/10646648-ed0997c21f5cfe1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对比"></li><li>后面的设置按照自己喜好来，如果不需要改动默认点击<code>NEXT</code>即可</li></ul><h5 id="2-12-在输入框输入内容点击运行即可。"><a href="#2-12-在输入框输入内容点击运行即可。" class="headerlink" title="2.12 在输入框输入内容点击运行即可。"></a>2.12 在输入框输入内容点击运行即可。</h5><p><img src="https://upload-images.jianshu.io/upload_images/10646648-7e614efada51576e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Hello world"></p><p><strong>至此，有关Pycharm的有关设置和使用就完成了</strong></p><hr><p>目录：<a href="http://vxiaozhe1998.cn/2020/02/28/Python学习/" target="_blank" rel="noopener">Python学习</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;在本文中将详细介绍如何在Windows上配置Python以及几种编译器的推荐。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://ame1314.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>1.开始Python之旅</title>
    <link href="https://ame1314.github.io/2020/02/28/1.%E5%BC%80%E5%A7%8BPython%E4%B9%8B%E6%97%85/"/>
    <id>https://ame1314.github.io/2020/02/28/1.%E5%BC%80%E5%A7%8BPython%E4%B9%8B%E6%97%85/</id>
    <published>2020-02-28T05:07:17.000Z</published>
    <updated>2020-02-29T12:58:26.939Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>在本文中记录了linux环境下交互模式的python3解释器的使用以及如何编写<code>.py</code>程序，简略解释了python3的代码风格、注释以及模块</p></div><a id="more"></a><h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><ul><li>了解什么是Python</li><li>认识交互模式的Python3解释器的使用</li><li>学习如何使用gedit编写Python3脚本</li><li>学习在终端模式下如程序何执行Python3脚本</li><li>认识python3的代码风格</li><li>学习Python3的注释</li><li>认识Python3的模块</li></ul><h3 id="二、知识要点"><a href="#二、知识要点" class="headerlink" title="二、知识要点"></a>二、知识要点</h3><ul><li>Python3 代码风格建议使用空格或Tab使用缩进符不可混用</li><li>Python3 中使用注释符号”#“</li><li>Python3 模块可以被别的程序引入，以使用该模块中的函数等功能。</li></ul><h3 id="三、实验内容"><a href="#三、实验内容" class="headerlink" title="三、实验内容"></a>三、实验内容</h3><h4 id="Xfce"><a href="#Xfce" class="headerlink" title="Xfce"></a>Xfce</h4><blockquote><p>Xfce是一个自由软件，运行在类Unix操作系统 （如Linux、FreeBSD 和 Solaris）上，提供轻量级桌面环境。</p></blockquote><p><strong>1.通过在该终端中输入Python3打开Python3的解释器：</strong><br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582864079247" alt="打开Python3解释器"><br><strong>2.在该终端中输入如下代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><p><strong>之后敲击<code>enter</code>键即可输出：</strong><br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582864361522" alt="输出第一个程序"></p><h4 id="gedit"><a href="#gedit" class="headerlink" title="gedit"></a>gedit</h4><blockquote><p>gedit是一个GNOME桌面环境下兼容UTF-8的文本编辑器。它使用GTK+编写而成，因此它十分的简单易用，有良好的语法高亮，对中文支持很好，支持包括gb2312、gbk在内的多种字符编码。gedit是一个自由软件。</p></blockquote><p><strong>1.打开桌面的gedit软件，默认创建一个<code>无标题文档1</code>，输入快捷键<code>ctrl+s</code>，将<code>无标题文档1</code>命名为<code>helloworld.py</code>保存在<code>/home/shiyanlou</code>下</strong><br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582864805374" alt="gedit软件"></p><p><strong>2.在该文档中输入代码：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><br><strong>保存之后关闭:</strong><br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582864956839" alt="输入第一个程序"></p><p><strong>3.执行：通过terminal中输入以下指令：</strong><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>chmod +x helloworld.py</span><br></pre></td></tr></table></figure><br><strong>添加可执行权限</strong><br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582865372437" alt="添加可执行权限"></p><p><strong>再通过输入：</strong><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python3</span> helloworld.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><br><strong>执行文件</strong><br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582865441805" alt="执行文件"></p><h4 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h4><blockquote><p>在 Python 中，空格很重要，我们使用空格将标识符区分开，行开始处的空格我们称之为缩进，如果你的缩进是错误的，Python 解释器会抛出错误。<br>建议遵守以下约定：</p></blockquote><ul><li>使用 4 个空格来缩进</li><li>永远不要混用空格和制表符</li><li>在函数之间空一行</li><li>在类之间空两行</li><li>字典，列表，元组以及参数列表中，在<code>,</code> 后添加一个空格。对于字典，<code>:</code> 后面也添加一个空格</li><li>在赋值运算符和比较运算符周围要有空格（参数列表中除外），但是括号里则不加空格：<code>a = f(1, 2) + g(3, 4)</code></li></ul><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><blockquote><p>Python 的注释以 <code>#</code>字符开始的，在 <code>#</code>字符到行尾之间的所有东西都被程序忽略为注释，也就说对程序没有任何影响。<strong>应该总是在 <code>#</code>后跟一个空格，然后再写注释。</strong></p></blockquote><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582865867374" alt="注释"></p><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><blockquote><p>模块是包含了我们能复用的代码的文件，包含了不同的函数定义，变量。模块文件通常以 .py 为扩展名。</p></blockquote><p><strong>例如：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math    <span class="comment"># 导入math模块</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(math.e)</span><br><span class="line"><span class="number">2.71828182846</span></span><br></pre></td></tr></table></figure></p><h3 id="四、实验结果"><a href="#四、实验结果" class="headerlink" title="四、实验结果"></a>四、实验结果</h3><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582864361522" alt="通过解释器运行Python3"></p><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582865441805" alt="通过可执行文件运行Python3"></p><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid1264885-20200228-1582865867374" alt="注释的使用"></p><hr><div class="note danger"><h4>在之后的记录中我将使用Windows端的Pycharm进行实验</h4></div><p>有关Window端的软件配置请参考文章：<a href="http://vxiaozhe1998.cn/2020/02/28/%E5%9C%A8Windows%E4%B8%8A%E9%85%8D%E7%BD%AEPython%E4%BB%A5%E5%8F%8A%E9%83%A8%E5%88%86%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E6%8E%A8%E8%8D%90/" target="_blank" rel="noopener">在Windows上配置Python以及部分编译器的推荐</a></p><hr><p>目    录：<a href="http://vxiaozhe1998.cn/2020/02/28/Python学习/" target="_blank" rel="noopener">Python学习</a><br>下一篇：<a href="http://vxiaozhe1998.cn/2020/02/29/2-变量和数据类型/" target="_blank" rel="noopener">2.变量和数据类型</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;在本文中记录了linux环境下交互模式的python3解释器的使用以及如何编写&lt;code&gt;.py&lt;/code&gt;程序，简略解释了python3的代码风格、注释以及模块&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://ame1314.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习</title>
    <link href="https://ame1314.github.io/2020/02/28/Python%E5%AD%A6%E4%B9%A0/"/>
    <id>https://ame1314.github.io/2020/02/28/Python%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-02-28T05:06:37.000Z</published>
    <updated>2020-02-29T13:22:02.396Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>Python学习目录</p></div><a id="more"></a><div class="note primary no-icon"><p><strong>每一篇将分为四个模块</strong><br><strong>一、实验目的：</strong>通过本实验能够学会掌握什么<br><strong>二、知识要点：</strong>本节实验的重点是什么<br><strong>三、实验内容：</strong>本节实验中牵扯到的代码<br><strong>四、实验结果：</strong>由本节实验所衍生出的题目</p></div><div class="note info no-icon"><h5>1.开始Python之旅</h5><p><a href="http://vxiaozhe1998.cn/2020/02/28/1.%E5%BC%80%E5%A7%8BPython%E4%B9%8B%E6%97%85/" target="_blank" rel="noopener">点击跳转</a></p></div><p><strong>拓展：</strong><br><a href="http://vxiaozhe1998.cn/2020/02/28/%E5%9C%A8Windows%E4%B8%8A%E9%85%8D%E7%BD%AEPython%E4%BB%A5%E5%8F%8A%E9%83%A8%E5%88%86%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E6%8E%A8%E8%8D%90/" target="_blank" rel="noopener">在Windows上配置Python以及部分编译器的推荐</a></p><div class="note info no-icon"><h5>2.变量和数据类型</h5><p><a href="http://vxiaozhe1998.cn/2020/02/29/2-变量和数据类型/" target="_blank" rel="noopener">点击跳转</a></p></div><p><strong>拓展：</strong><br><a href="http://vxiaozhe1998.cn/2020/02/29/Python保留字/" target="_blank" rel="noopener">Python保留字</a><br><a href="http://vxiaozhe1998.cn/2020/02/29/format-函数格式化数字/" target="_blank" rel="noopener">format()函数格式化数字</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;Python学习目录&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://ame1314.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://ame1314.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
